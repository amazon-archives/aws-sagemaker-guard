{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Manage fleets of SageMaker notebook instances through AWS Systems Manage and Cognito single sign on",
  "Parameters": {
    "CidrBlock": {
      "Type": "String",
      "Default": "10.0.1.0/24",
      "Description": "CIDR block to use for the VPC. choose carefully if you are going to peer the VPC in this stack with another one"
    },
    "AssetBucket": {
      "Type": "String"
    },
    "AssetPrefix": {
      "Type": "String"
    },
    "AdminUsername": {
      "Type": "String",
      "Description": "The username for the administrator",
      "Default": "Admin"
    },
    "AdminEmail": {
      "Type": "String",
      "Description": "will be used to setup initial password to log into admin interface"
    },
    "AdminPhoneNumber": {
      "Type": "String",
      "AllowedPattern": "^\\+[0-9]{11}$",
      "ConstraintDescription": "must be in a format like +18005550100",
      "Description": "Admin Phone Number used for multi factor authentication"
    },
    "VPCEndpoints": {
      "Type": "String",
      "Default": "ENABLE",
      "Description": "Enable or Disable creation of VPC endpoints. You must enable endpoints if you want to disable direct internet access to notebook instances",
      "AllowedValues": [
        "ENABLE",
        "DISABLE"
      ]
    }
  },
  "Outputs": {
    "WebsiteBucket": {
      "Value": {
        "Ref": "WebsiteBucket"
      }
    },
    "AdminLoginUrl": {
      "Value": {
        "Fn::GetAtt": [
          "URLs",
          "AdminLogin"
        ]
      },
      "Description": ""
    },
    "UserLoginUrl": {
      "Value": {
        "Fn::GetAtt": [
          "URLs",
          "UserLogin"
        ]
      },
      "Description": ""
    },
    "APIUrl": {
      "Value": {
        "Fn::GetAtt": [
          "URLs",
          "API"
        ]
      },
      "Description": ""
    }
  },
  "Resources": {
    "AdminPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/${Constants.ApiStageName}/*/*/*"
                },
                {
                  "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/${Constants.ApiStageName}/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "AdminRole"
          }
        ]
      }
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiGatewayRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "APIAuthLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryAttachLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryAttachPolicyLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryAttachmentClearLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryAttachmentListLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryDetachLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryDetachPolicyLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryIndexListLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryObjectCreateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryObjectDeleteLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryObjectGetLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryObjectUpdateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryPolicyClearLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APICloudDirectoryPolicyListLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIFailLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstanceCreateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstanceDeleteLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstanceDeleteWaitLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstanceGetLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstanceListLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstancePostStateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstanceRedirectLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstanceStartStopLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIInstanceUpdateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIOptionsLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIRouterLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIUserCreateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIUserDeleteLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIUserGetLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIUserUpdateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIattachmentsTemplateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIbulkTemplateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIbulkPostTemplateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIinstanceTemplateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIinstanceUserTemplateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIinstanceUserPostTemplateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIinstancesTemplateLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "APIitemsTemplateLambda",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${WebsiteBucket}/*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "APIAuthLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var axios=require(\"axios\"),jwt=require(\"jsonwebtoken\"),jwkToPem=require(\"jwk-to-pem\"),authenticate=require(\"authenticate\"),authorize=require(\"authorize\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var token=event.headers.Authorization||event.queryStringParameters.Auth,userpool=event.stageVariables.UserPool;authenticate(token,userpool).then(result=>(console.log(result),authorize(result.payload[\"cognito:username\"],event))).then(id=>{event.headers,event.queryStringParameters,event.pathParameters,event.stageVariables,event.requestContext;var tmp=event.methodArn.split(\":\"),apiGatewayArnTmp=(tmp[4],tmp[3],tmp[5].split(\"/\")),out=(apiGatewayArnTmp[0],apiGatewayArnTmp[1],{principalId:id,context:{InstanceName:event.pathParameters.id},policyDocument:{Version:\"2012-10-17\",Statement:[{Action:\"execute-api:Invoke\",Effect:\"Allow\",Resource:event.methodArn}]}});console.log(out),callback(null,out)}).catch(error=>{console.log(error),callback(\"unAuthorized\")})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryAttachLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),crypto=require(\"crypto\"),hash=crypto.createHash(\"md5\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(event,context,callback){return console.log(JSON.stringify(event,null,2)),cd.batchWrite({DirectoryArn:process.env.DIRECTORY,Operations:[{AttachTypedLink:{SourceObjectReference:{Selector:`$${event.SourceID}`},TargetObjectReference:{Selector:`$${event.TargetID}`},Attributes:Object.keys(event.Attributes).map(key=>({AttributeName:key,Value:{StringValue:event.Attributes[key]}})),TypedLinkFacet:{SchemaArn:process.env.SCHEMA,TypedLinkName:\"Attachment\"}}},{AttachObject:{LinkName:hash.update(event.SourceID+event.TargetID).digest(\"hex\"),ParentReference:{Selector:`$${event.SourceID}`},ChildReference:{Selector:`$${event.TargetID}`}}}]}).promise().then(response=>{console.log(JSON.stringify(response,null,2)),callback(null,event)}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryAttachPolicyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(event,context,callback){return console.log(JSON.stringify(event,null,2)),cd.batchWrite({DirectoryArn:process.env.DIRECTORY,Operations:[{AttachTypedLink:{SourceObjectReference:{Selector:`$${event.SourceID}`},TargetObjectReference:{Selector:`$${event.TargetID}`},TypedLinkFacet:{SchemaArn:process.env.SCHEMA,TypedLinkName:\"Attachment\"},Attributes:Object.keys(event.Attributes).map(key=>({AttributeName:key,Value:{StringValue:event.Attributes[key]}}))}},{AttachPolicy:{ObjectReference:{Selector:`$${event.SourceID}`},PolicyReference:{Selector:`$${event.TargetID}`}}}]}).promise().then(response=>{console.log(JSON.stringify(response,null,2)),callback(null,event)}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryAttachmentClearLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),Promise.all([{FunctionName:event.ListAttachments,InvocationType:\"RequestResponse\",Payload:JSON.stringify({ID:event.ID,ChildrenOrParents:\"children\"})},{FunctionName:event.ListAttachments,InvocationType:\"RequestResponse\",Payload:JSON.stringify({ID:event.ID,ChildrenOrParents:\"parents\"})}].map(x=>lambda.invoke(x).promise())).then(results=>(console.log(results),results.map(y=>{if(y.FunctionError)throw console.log(JSON.parse(y.Payload)),JSON.parse(JSON.parse(y.Payload).errorMessage);return JSON.parse(y.Payload)}))).then(results=>(console.log(JSON.stringify(results,null,2)),links=results[0].Links.concat(results[1].Links).map(x=>({DetachTypedLink:x})).slice(10),cd.batchWrite({DirectoryArn:process.env.DIRECTORY,Operations:links}).promise().then(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise()))).then(response=>{callback(null,{ID:event.ID})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryAttachmentListLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params={DirectoryArn:process.env.DIRECTORY,ConsistencyLevel:\"SERIALIZABLE\",ObjectReference:{Selector:`$${event.ID}`},FilterTypedLink:{SchemaArn:process.env.SCHEMA,TypedLinkName:\"Attachment\"},MaxResults:event.MaxResults||10};event.SourceType&&(params.FilterAttributeRanges=[{AttributeName:\"SourceType\",Range:{StartMode:\"INCLUSIVE\",EndMode:\"INCLUSIVE\",StartValue:{StringValue:event.SourceType},EndValue:{StringValue:event.SourceType}}},{AttributeName:\"TargetType\",Range:{StartMode:\"INCLUSIVE\",EndMode:\"INCLUSIVE\",StartValue:{StringValue:event.TargetType},EndValue:{StringValue:event.TargetType}}}]),event.NextToken&&(params.NextToken=event.NextToken),\"children\"===event.ChildrenOrParents?start=cd.listOutgoingTypedLinks(params).promise():start=cd.listIncomingTypedLinks(params).promise(),start.then(response=>{if(console.log(JSON.stringify(response,null,2)),\"parents\"===event.ChildrenOrParents)var out=response.LinkSpecifiers;else out=response.TypedLinkSpecifiers;callback(null,Object.assign(event,{Links:out.map(x=>(x.direct=!0,x)),NextToken:encodeURIComponent(response.NextToken||\"null\"),search:out.length>0||event.Query?\"true\":\"false\"}))}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryDetachLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),crypto=require(\"crypto\"),hash=crypto.createHash(\"md5\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(event,context,callback){return console.log(JSON.stringify(event,null,2)),cd.batchWrite({DirectoryArn:process.env.DIRECTORY,Operations:[{DetachTypedLink:{TypedLinkSpecifier:{SourceObjectReference:{Selector:`$${event.SourceID}`},TargetObjectReference:{Selector:`$${event.TargetID}`},IdentityAttributeValues:Object.keys(event.Attributes).map(key=>({AttributeName:key,Value:{StringValue:event.Attributes[key]}})),TypedLinkFacet:{SchemaArn:process.env.SCHEMA,TypedLinkName:\"Attachment\"}}}},{DetachObject:{LinkName:hash.update(event.SourceID+event.TargetID).digest(\"hex\"),ParentReference:{Selector:`$${event.SourceID}`}}}]}).promise().then(response=>{console.log(JSON.stringify(response,null,2)),callback(null,event)}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryDetachPolicyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(event,context,callback){return console.log(JSON.stringify(event,null,2)),cd.batchWrite({DirectoryArn:process.env.DIRECTORY,Operations:[{DetachTypedLink:{TypedLinkSpecifier:{SourceObjectReference:{Selector:`$${event.SourceID}`},TargetObjectReference:{Selector:`$${event.TargetID}`},IdentityAttributeValues:Object.keys(event.Attributes).map(key=>({AttributeName:key,Value:{StringValue:event.Attributes[key]}})),TypedLinkFacet:{SchemaArn:process.env.SCHEMA,TypedLinkName:\"Attachment\"}}}},{DetachPolicy:{ObjectReference:{Selector:`$${event.SourceID}`},PolicyReference:{Selector:`$${event.TargetID}`}}}]}).promise().then(response=>{console.log(JSON.stringify(response,null,2)),callback(null,event)}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryIndexListLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;function next(string){var len=string.length,last=string.charCodeAt(len-1)+1;return string.substring(0,len-1)+String.fromCharCode(last)}exports.handler=function(event,context,callback){return console.log(JSON.stringify(event,null,2)),cd.listIndex({DirectoryArn:process.env.DIRECTORY,IndexReference:{Selector:`/index/${event.Type}`},MaxResults:event.MaxResults||10,NextToken:event.NextToken||null,ConsistencyLevel:\"SERIALIZABLE\",RangesOnIndexedValues:[{AttributeKey:{FacetName:event.Type,Name:\"ID\",SchemaArn:process.env.SCHEMA},Range:event.Query?{StartMode:\"INCLUSIVE\",EndMode:\"EXCLUSIVE\",StartValue:{StringValue:event.Query},EndValue:{StringValue:next(event.Query)}}:{StartMode:\"FIRST\",EndMode:\"LAST\"}}]}).promise().then(response=>{response.PrevToken=encodeURIComponent(event.NextToken||\"null\"),response.NextToken=encodeURIComponent(response.NextToken||\"null\"),response.Type=event.Type,console.log(JSON.stringify(response,null,2)),callback(null,response)}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryObjectCreateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var crypto=require(\"crypto\"),cd=new aws.CloudDirectory,wait=require(\"wait\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),Promise.all([cd.listFacetAttributes({Name:event.Type,SchemaArn:process.env.SCHEMA}).promise(),cd.getFacet({Name:event.Type,SchemaArn:process.env.SCHEMA}).promise()]).then(function(result){console.log(result);var attributes=result[0].Attributes.map(x=>x.Name),type=result[1].Facet.ObjectType,ObjectAttributeList=Object.keys(event.Attributes).filter(x=>attributes.includes(x)).map(key=>({Key:{FacetName:event.Type,Name:key,SchemaArn:process.env.SCHEMA},Value:\"policy_document\"!==key?{StringValue:event.Attributes[key]}:{BinaryValue:new Buffer(event.Attributes[key])}}));return\"POLICY\"===type&&(ObjectAttributeList.push({Key:{FacetName:event.Type,Name:\"policy_document\",SchemaArn:process.env.SCHEMA},Value:{BinaryValue:new Buffer(event.Attributes.policy_document)}}),ObjectAttributeList.push({Key:{FacetName:event.Type,Name:\"policy_type\",SchemaArn:process.env.SCHEMA},Value:{StringValue:event.Attributes.policy_type}})),console.log(JSON.stringify(ObjectAttributeList,null,2)),cd.batchWrite({DirectoryArn:process.env.DIRECTORY,Operations:[{CreateObject:{BatchReferenceName:\"ref\",ObjectAttributeList:ObjectAttributeList,LinkName:event.Attributes.ID,ParentReference:{Selector:`/${event.Type}`},SchemaFacet:[{FacetName:event.Type,SchemaArn:process.env.SCHEMA}]}},{AttachToIndex:{IndexReference:{Selector:`/index/${event.Type}`},TargetReference:{Selector:\"#ref\"}}}]}).promise()}).then(()=>wait(process.env.API,event.Type,event.Attributes.ID)).then(x=>callback(null,x)).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryObjectDeleteLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory,lambda=new aws.Lambda,step=new aws.StepFunctions;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),step.startExecution({stateMachineArn:process.env.STATEMACHINECLEAROBJECT,input:JSON.stringify(event)}).promise().then(response=>{callback(null,{ID:event.ID})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryObjectGetLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),cd.listObjectAttributes({DirectoryArn:process.env.DIRECTORY,ConsistencyLevel:\"SERIALIZABLE\",ObjectReference:{Selector:`$${event.ID}`}}).promise().then(response=>{var out={};response.Attributes.forEach(function(x){out[x.Key.Name]=x.Value.StringValue}),console.log(JSON.stringify(out,null,2)),callback(null,Object.assign({attributes:out},event))}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryObjectUpdateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),cd.listFacetAttributes({Name:event.Type,SchemaArn:process.env.SCHEMA}).promise().then(function(result){console.log(JSON.stringify(result,null,2));var attributes=result.Attributes.map(x=>x.Name),AttributeUpdates=Object.keys(event.Attributes).filter(x=>attributes.includes(x)).map(key=>({ObjectAttributeAction:{ObjectAttributeActionType:\"CREATE_OR_UPDATE\",ObjectAttributeUpdateValue:{StringValue:event.Attributes[key]}},ObjectAttributeKey:{FacetName:event.Type,Name:key,SchemaArn:process.env.SCHEMA}}));return console.log(JSON.stringify(AttributeUpdates,null,2)),cd.updateObjectAttributes({DirectoryArn:process.env.DIRECTORY,ObjectReference:{Selector:`$${event.ID}`},AttributeUpdates:AttributeUpdates}).promise()}).then(result=>{console.log(result),callback(null,{ObjectIdentifier:event.ID})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryPolicyClearLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),cd.listPolicyAttachments({DirectoryArn:process.env.DIRECTORY,PolicyReference:{Selector:`$${event.ID}`},MaxResults:10}).promise().then(x=>{var ids=x.ObjectIdentifiers,links=ids.map(x=>({DetachPolicy:{ObjectReference:{Selector:x},PolicyReference:{Selector:event.ID}}}));if(ids.length)return cd.batchWrite({DirectoryArn:process.env.DIRECTORY,Operations:links}).promise().then(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise())}).then(response=>{callback(null,{ID:event.ID})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APICloudDirectoryPolicyListLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),cd.lookupPolicy({DirectoryArn:process.env.DIRECTORY,ObjectReference:{Selector:event.ID?`$${event.ID}`:event.path},MaxResults:3,NextToken:event.NextToken||null}).promise().then(response=>{console.log(JSON.stringify(response,null,2));var tmp=[].concat.apply([],response.PolicyToPathList.map(x=>x.Policies.filter(y=>y.PolicyId).map(y=>({id:y.PolicyId,direct:y.ObjectIdentifier===event.ID})))).reduce((a,b)=>(a[b.id]=a[b.id]||b.direct,a),{});console.log(tmp);var Links=Object.keys(tmp).map(x=>({id:x,direct:tmp[x]}));console.log(Links),callback(null,Object.assign({NextToken:response.NextToken,Links:Links.map(x=>({TargetObjectReference:{Selector:`#${x.id}`},direct:x.direct}))},event))}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIFailLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),callback(JSON.stringify(event))};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstanceCreateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var validate=require(\"lambda\").validate,lambda=new aws.Lambda,sagemaker=new aws.SageMaker,step=new aws.StepFunctions,wait=require(\"wait\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),event.Attributes.SecurityGroupIds&&(event.Attributes.SecurityGroupIds=event.Attributes.SecurityGroupIds.join(\",\")),step.startExecution({stateMachineArn:process.env.STATEMACHINECREATEINSTANCE,input:JSON.stringify(event)}).promise().then(x=>wait(process.env.API,event.Type,event.Attributes.ID)).then(x=>callback(null,x)).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstanceDeleteLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),lambda.invoke({FunctionName:event.GetFunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise().then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);var payload=JSON.parse(result.Payload);return payload.deleteParams=event,lambda.invoke({FunctionName:event.DeleteInstanceFunctionName,InvocationType:\"Event\",Payload:JSON.stringify(payload)}).promise().then(x=>payload)}).then(result=>new Promise(function(res,rej){!function next(count){console.log(`try ${100-count}`);sagemaker.describeNotebookInstance({NotebookInstanceName:`SageGuard-${result.attributes.ID}`}).promise().then(response=>{\"InService\"===response.NotebookInstanceStatus?count?setTimeout(()=>next(--count),100):rej(\"timeout waiting for instance to begin stopping\"):\"Stopping\"===response.NotebookInstanceStatus?res():\"Stopped\"===response.NotebookInstanceStatus?res():rej(response)}).catch(rej)}(100)})).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstanceDeleteWaitLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var sagemaker=new aws.SageMaker,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var NotebookInstanceName=`SageGuard-${event.attributes.ID}`;sagemaker.describeNotebookInstance({NotebookInstanceName:NotebookInstanceName}).promise().then(function(result){if(\"InService\"===result.NotebookInstanceStatus)return sagemaker.stopNotebookInstance({NotebookInstanceName:NotebookInstanceName}).promise().then(()=>new Promise(function(res,rej){setTimeout(()=>{lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().then(res).catch(rej)},2e3)}));if(\"Stopped\"===result.NotebookInstanceStatus)return sagemaker.deleteNotebookInstance({NotebookInstanceName:NotebookInstanceName}).promise().then(()=>lambda.invoke({FunctionName:event.deleteParams.FunctionName,InvocationType:\"Event\",Payload:JSON.stringify(event.deleteParams)}).promise());if(\"Stopping\"===result.NotebookInstanceStatus)return new Promise(function(res,rej){setTimeout(()=>{lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().then(res).catch(rej)},2e3)});throw result}).then(()=>callback(null)).catch(x=>{console.log(x),callback(x)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstanceGetLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,sagemaker=new aws.SageMaker,cf=new aws.CloudFormation,_=require(\"lodash\");exports.handler=function(event,context,callback){return console.log(JSON.stringify(event,null,2)),Promise.all([lambda.invoke({FunctionName:event.FunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise(),lambda.invoke({FunctionName:process.env.ESPROXY,InvocationType:\"RequestResponse\",Payload:JSON.stringify({endpoint:process.env.ESADDRESS,path:\"/logins/_search\",method:\"GET\",body:{size:4,query:{term:{InstanceName:event.ID}},sort:[{Date:{order:\"desc\"}}]}})}).promise()]).then(results=>results.map(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);return JSON.parse(result.Payload)})).then(results=>{var result=results[0];result.attributes=_.omit(result.attributes,[\"policy_type\",\"policy_document\"]);var es=results[1];if(es.hits.total>0)var logins=es.hits.hits.map(x=>`${x._source.UserName} ${Date(x._source.Date)}`);else logins=null;return cf.describeStacks({StackName:result.attributes.StackName}).promise().then(stack=>{var outputs={};if(stack.Stacks[0].Outputs.forEach(out=>{outputs[out.OutputKey]=out.OutputValue}),outputs.NoteBookName){var NotebookInstanceName=outputs.NoteBookName;return sagemaker.describeNotebookInstance({NotebookInstanceName:NotebookInstanceName}).promise().then(function(info){Object.assign(result.attributes,outputs,info),logins&&(result.attributes[\"Last Logins\"]=logins),callback(null,Object.assign({attributes:result.attributes},event))})}result.attributes.status=\"creating\",logins&&(result.attributes[\"Last Logins\"]=logins),callback(null,Object.assign({attributes:result.attributes},event))}).catch(error=>{if(\"ValidationError\"!==error.code)throw error;callback(null,Object.assign({attributes:Object.assign(result.attributes,{status:\"StackFailed\"})},event))})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstanceListLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),_=require(\"lodash\");aws.config.region=process.env.AWS_REGION;_=require(\"lodash\");var sagemaker=new aws.SageMaker,lambda=new aws.Lambda,cf=new aws.CloudFormation;function validate(result){if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);return JSON.parse(result.Payload)}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),Promise.all([lambda.invoke({FunctionName:event.stageVariables.APIInstanceGetLambda,InvocationType:\"RequestResponse\",Payload:JSON.stringify({FunctionName:event.stageVariables.APICloudDirectoryObjectGetLambda,ID:event.pathParameters.id,Type:\"instances\"})}).promise().then(validate),lambda.invoke({FunctionName:process.env.ESPROXY,InvocationType:\"RequestResponse\",Payload:JSON.stringify({endpoint:process.env.ESADDRESS,path:\"/logins/_search\",method:\"GET\",body:{size:2,query:{bool:{must:[{term:{InstanceName:event.requestContext.authorizer.InstanceName}},{term:{UserName:event.requestContext.authorizer.principalId}}]}},sort:[{Date:{order:\"desc\"}}]}})}).promise().then(validate)]).then(results=>{var data=results[0],es=results[1],stackname=data.attributes.StackName;return es.hits.total>0?data.attributes[\"Last Logins\"]=es.hits.hits.map(x=>Date(x._source.Date)):delete data.attributes[\"Last Logins\"],cf.describeStacks({StackName:stackname}).promise().then(result=>{console.log(JSON.stringify(result,null,2));var status=result.Stacks[0].StackStatus;data.attributes.status=status;var state=_.fromPairs(result.Stacks[0].Outputs.map(y=>[y.OutputKey,y.OutputValue])).State;return data.attributes.state=state,[\"CREATE_COMPLETE\",\"ROLLBACK_COMPLETE\",\"UPDATE_COMPLETE\",\"UPDATE_ROLLBACK_COMPLETE\"].includes(status)&&\"ON\"===state?{attributes:data.attributes,url:`https://${event.requestContext.domainPrefix}.execute-api.${event.stageVariables.Region}.amazonaws.com${event.requestContext.path}/login?Auth=${event.headers.Authorization}`}:{attributes:data.attributes}})}).then(body=>{console.log(body);var href=`https://${event.requestContext.apiId}.execute-api.${event.stageVariables.Region}.amazonaws.com/${event.requestContext.path}`,out={collection:{version:\"1.0\",href:href,links:[],items:[{href:href,links:[body.url?{href:body.url,rel:\"login\"}:null].filter(x=>x),data:_.pick(body.attributes,[\"ID\",\"InstanceType\",\"Last Logins\",\"NotebookInstanceStatus\"])}]}};[\"CREATE_COMPLETE\",\"ROLLBACK_COMPLETE\",\"UPDATE_COMPLETE\",\"UPDATE_ROLLBACK_COMPLETE\"].includes(body.attributes.status)&&\"ON\"===body.attributes.state?out.collection.template={data:{schema:{type:\"object\",properties:{state:{type:\"string\",enum:[\"off\"]}},required:\"state\"},prompt:\"Turn Instance Off\"}}:[\"CREATE_COMPLETE\",\"ROLLBACK_COMPLETE\",\"UPDATE_COMPLETE\",\"UPDATE_ROLLBACK_COMPLETE\"].includes(body.attributes.status)&&\"OFF\"===body.attributes.state&&(out.collection.template={data:{schema:{type:\"object\",properties:{state:{type:\"string\",enum:[\"on\"]}},required:\"state\"},prompt:\"Turn Instance On\"}}),callback(null,{statusCode:200,body:JSON.stringify(out)})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstancePostStateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var sagemaker=new aws.SageMaker,lambda=new aws.Lambda,_=require(\"lodash\"),cf=new aws.CloudFormation,ssm=new aws.SSM;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),lambda.invoke({FunctionName:event.stageVariables.APIInstanceGetLambda,InvocationType:\"RequestResponse\",Payload:JSON.stringify({FunctionName:event.stageVariables.APICloudDirectoryObjectGetLambda,ID:event.pathParameters.id,Type:\"instances\"})}).promise().then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);var stackname=JSON.parse(result.Payload).attributes.StackName;return cf.describeStacks({StackName:stackname}).promise().then(x=>{if([\"CREATE_COMPLETE\",\"ROLLBACK_COMPLETE\",\"UPDATE_COMPLETE\",\"UPDATE_ROLLBACK_COMPLETE\"].includes(x.Stacks[0].StackStatus)){var Parameters=_.fromPairs(x.Stacks[0].Parameters.map(y=>[y.ParameterKey,y.ParameterValue]));return Parameters.State=body.state.toUpperCase(),cf.updateStack({StackName:result.attributes.StackName,Capabilities:[\"CAPABILITY_NAMED_IAM\"],UsePreviousTemplate:!0,Parameters:_.toPairs(Parameters).map(y=>({ParameterKey:y[0],ParameterValue:y[1]}))}).promise().catch(error=>{if(\"No updates are to be performed.\"!==error.message)throw error})}throw new Error(`Stack currently in state ${x.Stacks[0].StackStatus}`)})}).then(body=>{console.log(body);var href=`https://${event.requestContext.apiId}.execute-api.${event.stageVariables.Region}.amazonaws.com/${event.requestContext.path}`;callback(null,{statusCode:200,body:JSON.stringify({collection:{version:\"1.0\",href:href,links:[],items:[{href:href,links:[]}]}})})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstanceRedirectLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var sagemaker=new aws.SageMaker,lambda=new aws.Lambda,firehose=new aws.Firehose,cf=new aws.CloudFormation;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),lambda.invoke({FunctionName:event.stageVariables.APIInstanceGetLambda,InvocationType:\"RequestResponse\",Payload:JSON.stringify({FunctionName:event.stageVariables.APICloudDirectoryObjectGetLambda,ID:event.pathParameters.id,Type:\"instances\"})}).promise().then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);var stackname=JSON.parse(result.Payload).attributes.StackName;return cf.describeStacks({StackName:stackname}).promise().then(result=>{console.log(JSON.stringify(result,null,2));var NotebookInstanceName=result.Stacks[0].Outputs.filter(x=>\"NoteBookName\"===x.OutputKey)[0].OutputValue;return sagemaker.describeNotebookInstance({NotebookInstanceName:NotebookInstanceName}).promise().then(y=>sagemaker.createPresignedNotebookInstanceUrl({NotebookInstanceName:NotebookInstanceName}).promise().then(x=>x.AuthorizedUrl))})}).then(url=>firehose.putRecord({DeliveryStreamName:process.env.LOGINFIREHOSE,Record:{Data:JSON.stringify({UserName:event.requestContext.authorizer.principalId,InstanceName:event.requestContext.authorizer.InstanceName,Date:event.requestContext.requestTimeEpoch,IP:event.requestContext.identity.sourceIp,UserAgent:event.requestContext.identity.userAgent,RequestId:event.requestContext.requestId})}}).promise().then(()=>callback(null,{statusCode:307,headers:{Location:url}}))).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstanceStartStopLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){return lambda.invoke({FunctionName:event.FunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise().then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);return result}).then(result=>{var NotebookInstanceName=`SageGuard-${event.ID}`;return sagemaker.describeNotebookInstance({NotebookInstanceName:NotebookInstanceName}).promise().then(function(info){Object.assign(result.attributes,info)})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIInstanceUpdateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,cf=new aws.CloudFormation;exports.handler=function(event,context,callback){return console.log(JSON.stringify(event,null,2)),lambda.invoke({FunctionName:event.GetFunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise().then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);return JSON.parse(result.Payload)}).then(result=>cf.describeStacks({StackName:result.attributes.StackName}).promise().then(x=>{if([\"CREATE_COMPLETE\",\"ROLLBACK_COMPLETE\",\"UPDATE_COMPLETE\",\"UPDATE_ROLLBACK_COMPLETE\"].includes(x.Stacks[0].StackStatus)){var Parameters=x.Stacks[0].Parameters.map(y=>(result.attributes[y.ParameterKey]&&(y.ParameterValue=result.attributes[y.ParameterKey]),y));return cf.updateStack({StackName:result.attributes.StackName,Capabilities:[\"CAPABILITY_NAMED_IAM\"],UsePreviousTemplate:!0,Parameters:Parameters}).promise().catch(error=>{if(\"No updates are to be performed.\"!==error.message)throw error})}throw new Error(`Stack currently in state ${x.Stacks[0].StackStatus}`)})).then(response=>lambda.invoke({FunctionName:event.FunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise()).then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);callback(null,event)}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIOptionsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cognito=new aws.CognitoIdentityServiceProvider,send=require(\"request\").send,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),\"users\"===event.pathParameters?send({href:`${event.requestContext.domainPrefix}.execute-api.${event.stageVariables.Region}.amazonaws.com/${event.path}`,method:\"GET\"}).then(x=>cognito.adminListGroupsForUser({UserPoolId:event.stageVariables.UserPool,Username:x.collection.items[0].data.ID})).then(x=>{if(x.Groups.map(y=>y.GroupName).contains(\"Admin\"))var Allow=\"OPTIONS, GET, PUT\";else Allow=\"OPTIONS, GET, PUT, DELETE\";callback(null,{statusCode:200,headers:{Allow:Allow}})}).catch(callback):callback(null,{statusCode:200,headers:{Allow:\"OPTIONS, GET, PUT, DELETE\"}})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIRouterLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),lambda.invoke({FunctionName:event.FunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event.Payload)}).promise().then(result=>{console.log(JSON.stringify(result,null,2)),result.FunctionError?callback(JSON.parse(result.Payload).errorMessage):callback(null,JSON.parse(result.Payload))}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIUserCreateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cognito=new aws.CognitoIdentityServiceProvider,wait=require(\"wait\"),lambda=new aws.Lambda;exports.handler=function(event,context,callback){return console.log(JSON.stringify(event,null,2)),cognito.adminCreateUser({UserPoolId:event.UserPool,Username:event.Attributes.ID,DesiredDeliveryMediums:[\"EMAIL\"],UserAttributes:[{Name:\"email\",Value:event.Attributes.email},{Name:\"phone_number\",Value:event.Attributes.phone_number}]}).promise().then(x=>wait(process.env.API,event.Type,event.Attributes.ID)).then(x=>callback(null,x)).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIUserDeleteLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cognito=new aws.CognitoIdentityServiceProvider,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),lambda.invoke({FunctionName:event.GetFunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise().then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);var data=JSON.parse(result.Payload);return cognito.adminDeleteUser({UserPoolId:event.UserPool,Username:data.attributes.ID}).promise()}).then(response=>lambda.invoke({FunctionName:event.FunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise()).then(()=>callback(null,event)).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIUserGetLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cognito=new aws.CognitoIdentityServiceProvider,lambda=new aws.Lambda;function validate(result){if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);return JSON.parse(result.Payload)}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),lambda.invoke({FunctionName:event.FunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise().then(validate).then(result=>{Promise.all([lambda.invoke({FunctionName:process.env.ESPROXY,InvocationType:\"RequestResponse\",Payload:JSON.stringify({endpoint:process.env.ESADDRESS,path:\"/logins/_search\",method:\"GET\",body:{size:4,query:{term:{UserName:result.attributes.ID}},sort:[{Date:{order:\"desc\"}}]}})}).promise().then(validate),cognito.adminListUserAuthEvents({UserPoolId:event.UserPool,Username:result.attributes.ID,MaxResults:4}).promise()]).then(results=>{var es=results[0],cog=results[1];if(es.hits.total>0)return Promise.all(es.hits.hits.map(x=>lambda.invoke({FunctionName:event.FunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify({ID:x._source.InstanceName,Type:\"instances\"})}).promise().then(validate).then(y=>`${Date(x._source.Date)}:${y.attributes.ID} `))).then(x=>result.attributes[\"Last Logins\"]=x);cog.AuthEvents.length>0&&(result.attributes[\"Login events\"]=cog.AuthEvents.map(x=>`${x.CreationDate}:${x.EventType} ${x.EventResponse}:${x.EventRisk.RiskLevel||\"\"}`))}).then(()=>{callback(null,Object.assign({attributes:result.attributes},event))})}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APIUserUpdateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cognito=new aws.CognitoIdentityServiceProvider,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),Promise.all([cognito.describeUserPool({UserPoolId:event.UserPool}).promise(),lambda.invoke({FunctionName:event.GetFunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise().then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);return JSON.parse(result.Payload)})]).then(function(result){console.log(JSON.stringify(result,null,2));var pool=result[0],obj=result[1],allowed=pool.UserPool.SchemaAttributes.filter(x=>x.Mutable).map(x=>x.Name),Attributes=Object.keys(event.Attributes).filter(key=>allowed.includes(key)).map(key=>({Name:key,Value:event.Attributes[key]}));if(event.Attributes.email||event.Attributes.phone_number)return cognito.adminUpdateUserAttributes({UserPoolId:event.UserPool,Username:obj.attributes.ID,UserAttributes:Attributes}).promise()}).then(response=>lambda.invoke({FunctionName:event.FunctionName,InvocationType:\"RequestResponse\",Payload:JSON.stringify(event)}).promise()).then(result=>{if(console.log(JSON.stringify(result,null,2)),result.FunctionError)throw JSON.parse(JSON.parse(result.Payload).errorMessage);callback(null,event)}).catch(error=>{console.log(error),callback(JSON.stringify({type:404===error.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:error.statusCode,message:error.message,data:error}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "LOGINFIREHOSE": {
              "Ref": "LoginFirehose"
            },
            "ESPROXY": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ESProxyLambda"
              ]
            },
            "ESADDRESS": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.ElasticsearchEndpoint"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "STATEMACHINECLEAROBJECT": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearObject"
              ]
            },
            "STATEMACHINECLEARSTACKS": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineClearStacks"
              ]
            },
            "STATEMACHINECREATEINSTANCE": {
              "Fn::GetAtt": [
                "StepFunctions",
                "Outputs.StateMachineCreateInstance"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiRouteHandler"
          }
        ]
      }
    },
    "APILambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonCloudDirectoryFullAccess",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
          "arn:aws:iam::aws:policy/AmazonCognitoPowerUser",
          "arn:aws:iam::aws:policy/AWSLambdaFullAccess",
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
          "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess",
          "arn:aws:iam::aws:policy/AWSPriceListServiceFullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "KMS",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": {
                "Effect": "Allow",
                "Resource": "*",
                "Action": [
                  "kms:Describe*",
                  "kms:Get*",
                  "kms:List*",
                  "cloudformation:*",
                  "glue:*"
                ]
              }
            }
          },
          {
            "PolicyName": "IAM",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": {
                "Effect": "Allow",
                "Resource": "*",
                "Action": [
                  "iam:Describe*",
                  "iam:Get*",
                  "iam:List*",
                  "firehose:*",
                  "ssm:*"
                ]
              }
            }
          }
        ]
      }
    },
    "UtilCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNS3VersionLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "AssetBucket"
        },
        "Key": {
          "Fn::Sub": "${AssetPrefix}/lambda/util.zip"
        },
        "BuildDate": "2018-12-30T03:49:15.416Z"
      }
    },
    "UtilLambdaLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Ref": "AssetBucket"
          },
          "S3Key": {
            "Fn::Sub": "${AssetPrefix}/lambda/util.zip"
          },
          "S3ObjectVersion": {
            "Ref": "UtilCodeVersion"
          }
        },
        "LayerName": {
          "Fn::Sub": "${AWS::StackName}-util"
        }
      }
    },
    "Collection": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiResource"
        },
        "PathPart": "{type}",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "CollectionGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APICloudDirectoryIndexListLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    #if ( $inputRoot.PrevToken==\"null\")\n        \"href\":\"$root/api/$inputRoot.Type\",\n    #else\n        \"href\":\"$root/api/$inputRoot.Type?NextToken=$inputRoot.PrevToken\",\n    #end\n    \"links\":[\n        #if ( $inputRoot.NextToken!=\"null\")\n            {\"rel\":\"next\",\"href\":\" $root/api/$inputRoot.Type?NextToken=$inputRoot.NextToken\"}\n        #end\n    ],\n    \"items\":[\n        #foreach( $object in $inputRoot.IndexAttachments)\n        {\"href\":\"$root/api/$inputRoot.Type/$object.ObjectIdentifier\"}\n        #if( $foreach.hasNext ),#end\n        #end\n    ],\n    \"template\":{\n        \"data\":{\n            #if ($input.params('type') == 'groups')\n                \"schema\":{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\",\"title\":\"User ID\",\"immutable\":true},\"DisplayName\":{\"title\":\"Display Name\",\"type\":\"string\"},\"Description\":{\"title\":\"Group Description\",\"type\":\"string\"}},\"required\":[\"ID\"]},\n                \"prompt\":\"Create a new group\"\n            #elseif ($input.params('type') == 'users')\n                \"schema\":{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\",\"description\":\"The users name or unique ID\",\"title\":\"ID\",\"immutable\":true},\"email\":{\"title\":\"User Email Address\",\"description\":\"Users email address. Used for password setting and reseting\",\"type\":\"string\"},\"phone_number\":{\"title\":\"User Phone Number\",\"description\":\"User's phone number used for MFA, in format +112345678901\",\"pattern\":\"^\\\\+[0-9]{11}$\",\"type\":\"string\"}},\"required\":[\"ID\",\"email\",\"phone_number\"]},\n                \"prompt\":\"Add a new user\"\n            #elseif ($input.params('type') == 'instances')\n                \"schema\":{\n                    \"href\":\"$root/templates/instances\"\n                },\n                \"prompt\":\"Create a new SageMaker Notebook instance\"\n            #end\n        }\n    },\n    \"queries\":[\n        {   \n            \"href\":\"$root/api/$inputRoot.Type?\",\n            \"rel\":\"search\",\n            \"prompt\":\"Search for $input.params('type') by ID\",\n            \"data\":[\n                {\"name\":\"MaxResults\",\"prompt\":\"Maximum results to return\"},\n                {\"name\":\"Query\",\"prompt\":\"Prefix to search by\"}\n            ]\n        }\n    ]\n}}\n\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"Type\":\"$input.params('type')\",\n    \"MaxResults\":\"$input.params('MaxResults')\",\n    \"NextToken\":\"$input.params('NextToken')\",\n    \"Query\":\"$input.params('Query')\"\n}\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.NextToken": false,
          "method.request.querystring.MaxResults": false,
          "method.request.querystring.Query": false
        },
        "ResourceId": {
          "Ref": "Collection"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "CollectionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIRouterLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 201,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "$input.body\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#if ($input.params('type') == 'groups'  ||\n    $input.params('type') == 'users'    ||\n    $input.params('type') == 'instances')\n{\n    #if ($input.params('type') == 'groups')\n        \"FunctionName\":\"${APICloudDirectoryObjectCreateLambda.Arn}\",\n    #elseif ($input.params('type') == 'users')\n        \"FunctionName\":\"${APIUserCreateLambda.Arn}\",\n    #else \n        \"FunctionName\":\"${APIInstanceCreateLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"FunctionName\":\"${APICloudDirectoryObjectCreateLambda.Arn}\",\n        \"UserPool\":\"${QNA.Outputs.UserPool}\",\n        \"Type\":\"$input.params('type')\",\n        \"Attributes\":$input.json('$.template.data')\n    }\n}\n#else\n{\n    \"FunctionName\":\"${APIFailLambda.Arn}\",\n    \"Payload\":{\n        \"type\":\"[NotFound]\",\n        \"message\":\"$input.params('type') is not a valid type, allowed values are 'groups','instances', or 'users'\"\n    }\n}\n#end\n\n\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "Collection"
        },
        "MethodResponses": [
          {
            "StatusCode": 201
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "CollectionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{}"
                }
              },
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Allow": "'OPTIONS, GET, POST'"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "ResourceId": {
          "Ref": "Collection"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Allow": false
            }
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "Item": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "Collection"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "ItemPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIRouterLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n{\n    \"href\":\"$root/api/groups/$input.path('$.ObjectIdentifier')\"\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))\n{\n    #if ($input.params('type') == 'groups')\n        \"FunctionName\":\"${APICloudDirectoryObjectUpdateLambda.Arn}\",\n    #elseif ($input.params('type') == 'users')\n        \"FunctionName\":\"${APIUserUpdateLambda.Arn}\",\n    #else \n        \"FunctionName\":\"${APIInstanceUpdateLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"FunctionName\":\"${APICloudDirectoryObjectUpdateLambda.Arn}\",\n        \"GetFunctionName\":\"${APICloudDirectoryObjectGetLambda.Arn}\",\n        \"UserPool\":\"${QNA.Outputs.UserPool}\",\n        \"ID\":\"$input.params('id')\",\n        \"Type\":\"$input.params('type')\",\n        \"Attributes\":$input.json('$.template.data')\n    }\n}\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "Item"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "ItemGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIRouterLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n#set ( $base=\"$root/api/$input.path('$.Type')/$input.path('$.ID')\" )\n{\n    \"collection\":{\n        \"version\":\"1.0\",\n        \"href\":\"$base\",\n        \"links\":[],\n        \"items\":[{\n            \"href\":\"$base\",\n            \"data\":$input.json('$.attributes'),\n            \"links\":[\n                #if ($input.path('$.attributes.status')!=\"StackFailed\")\n                #if ($input.path('$.Type')==\"groups\")\n                {\n                    \"href\":\"$base/children/groups\",\n                    \"title\":\"Groups that are a part of this group\",\n                    \"rel\":\"child\"\n                },\n                {\n                    \"href\":\"$base/children/users\",\n                    \"title\":\"Users that are a part of this group\",\n                    \"rel\":\"child\"\n                },\n                {\n                    \"href\":\"$base/children/instances\",\n                    \"title\":\"Instances this group has access to\",\n                    \"rel\":\"child\"\n                },\n                {\n                    \"href\":\"$base/parents/groups\",\n                    \"title\":\"Groups this group is in\",\n                    \"rel\":\"parent\"\n                }\n                #elseif ($input.path('$.Type')==\"users\")\n                {\n                    \"href\":\"$base/children/instances\",\n                    \"title\":\"Instances this user has access to\",\n                    \"rel\":\"child\"\n                },\n                {\n                    \"href\":\"$base/parents/groups\",\n                    \"title\":\"Groups this user is in\",\n                    \"rel\":\"parent\"\n                }\n                #elseif ($input.path('$.Type')==\"instances\")\n                {\n                    \"href\":\"$base/parents/groups\",\n                    \"title\":\"Groups this Instance is attached to\",\n                    \"rel\":\"parent\"\n                },\n                {\n                    \"href\":\"$base/parents/users\",\n                    \"title\":\"Users this Instance is attached to\",\n                    \"rel\":\"parent\"\n                },\n                {\n                    \"href\":\"https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logEventViewer:group=${SSMLogGroup};stream=$input.path('$.attributes.InstanceID')-jupyter;\",\n                    \"title\":\"Jupyter server logs\",\n                    \"rel\":\"info\"\n                }\n                #if ( $input.path('$.attributes.InstanceID') ),{\n                    \"href\":\"https://console.aws.amazon.com/systems-manager/managed-instances/$input.path('$.attributes.InstanceID')/description?region=${AWS::Region}\",\n                    \"title\":\"SSM link\",\n                    \"rel\":\"info\"\n                } #end\n                #end\n                #end\n            ]\n        }],\n        \"queries\":[],\n        \"template\":{\n            #if ($input.path('$.attributes.status')!=\"StackFailed\")\n            \"data\":{\n                #if ($input.path('$.Type')==\"instances\")\n                \"schema\":{\n                    \"href\":\"$root/templates/instance?Type=$input.path('$.Type')&ID=$input.path('$.ID')\"\n                },\n                #else\n                \"schema\":{\n                    \"href\":\"$root/templates/items?Type=$input.path('$.Type')&ID=$input.path('$.ID')\"\n                },\n                #end\n                #if ($input.path('$.Type')==\"groups\")\n                    \"prompt\":\"Update group information\"\n                #elseif ($input.path('$.Type')==\"users\")\n                    \"prompt\":\"Update user information\"\n                #elseif ($input.path('$.Type')==\"instances\")\n                    \"prompt\":\"Update instance information\"\n                #end\n            }#end\n        }\n    }\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    #if ($input.params('type') == 'groups')\n        \"FunctionName\":\"${APICloudDirectoryObjectGetLambda.Arn}\",\n    #elseif ($input.params('type') == 'users')\n        \"FunctionName\":\"${APIUserGetLambda.Arn}\",\n    #else \n        \"FunctionName\":\"${APIInstanceGetLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"FunctionName\":\"${APICloudDirectoryObjectGetLambda.Arn}\",\n        \"UserPool\":\"${QNA.Outputs.UserPool}\",\n        \"Type\":\"$input.params('type')\",\n        \"ID\":\"$input.params('id')\"\n    }\n}\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "Item"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "ItemDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIRouterLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n{\n    \"href\":\"$root/api/groups/$input.path('$.ID')\"\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"FunctionName\":\"${APICloudDirectoryObjectDeleteLambda.Arn}\",\n    \"Payload\":{\n        \"UserPool\":\"${QNA.Outputs.UserPool}\",\n        \"ID\":\"$input.params('id')\",\n        \"Type\":\"$input.params('type')\"\n    }\n}\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "Item"
        },
        "MethodResponses": [
          {
            "StatusCode": 204
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "ItemOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIOptionsLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          }
        },
        "ResourceId": {
          "Ref": "Item"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "ChildrenOrParents": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "Item"
        },
        "PathPart": "{childrenOrParents}",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AttachedCollection": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ChildrenOrParents"
        },
        "PathPart": "{subCollection}",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AttachedCollectionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{}"
                }
              },
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Allow": "'OPTIONS, GET, PUT'"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "ResourceId": {
          "Ref": "AttachedCollection"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Allow": false
            }
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AttachedItem": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "AttachedCollection"
        },
        "PathPart": "{subItem}",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AttachedItemOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{}"
                }
              },
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Allow": "'OPTIONS, DELETE'"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "ResourceId": {
          "Ref": "AttachedItem"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Allow": false
            }
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AttachedCollectionGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIRouterLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n#set ( $base=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com$inputRoot.path\" )\n{\n    \"collection\":{\n        \"version\":\"1.0\",\n        #if ( $inputRoot.PrevToken )\n            \"href\":\"$base\",\n        #else\n            \"href\":\"$base?NextToken=$inputRoot.PrevToken\",\n        #end\n        \"links\":[\n            #if ( $inputRoot.NextToken )\n            #else\n                {\"rel\":\"next\",\"href\":\"$base?NextToken=$inputRoot.NextToken\"}\n            #end\n        ],\n        \"items\":[\n            #foreach( $object in $inputRoot.Links)\n                {\n                #if ($input.path('$.ChildrenOrParents')==\"children\")\n                    \"href\":\"$base/$object.TargetObjectReference.Selector.substring(1)\"\n                #else\n                    \"href\":\"$base/$object.SourceObjectReference.Selector.substring(1)\"\n                #end\n                #if ($object.direct)\n                    ,\"rel\":\"attachment\"\n                #end\n                }#if( $foreach.hasNext ),#end\n            #end\n        ],\n        \"queries\":[\n            #if ( $inputRoot.search==\"true\"){\n                #if ( $inputRoot.NextToken )\n                    \"href\":\"$base?\",\n                #else\n                    \"href\":\"$base?NextToken=$inputRoot.NextToken\",\n                #end\n                \"rel\":\"search\",\n                #if ($input.path('$.ChildrenOrParents')==\"children\")\n                    \"prompt\":\"Search for attached $input.path('$.TargetType') by ID\",\n                #elseif  ($input.path('$.ChildrenOrParents')==\"parents\")\n                    \"prompt\":\"Search for parent $input.path('$.SourceType') by ID\",\n                #end \n                \"data\":[\n                    {\"name\":\"MaxResults\",\"prompt\":\"Maximum results to return\"}\n                ]\n            }#end\n        ],\n        \"template\":{\n            \"data\":{\n                \"schema\":{\n                #if ($input.path('$.ChildrenOrParents')==\"children\")\n                    \"href\":\"$root/templates/attachments?SourceType=$input.path('$.SourceType')&SourceID=$input.path('$.ID')&DestType=$input.path('$.TargetType')&Relationship=$input.path('$.ChildrenOrParents')\"\n                #else \n                    \"href\":\"$root/templates/attachments?SourceType=$input.path('$.TargetType')&SourceID=$input.path('$.ID')&DestType=$input.path('$.SourceType')&Relationship=$input.path('$.ChildrenOrParents')\"\n                #end\n                }\n                #if ($input.path('$.ChildrenOrParents')==\"children\")\n                    ,\"prompt\":\"attach $input.path('$.TypeType')\"\n                #elseif  ($input.path('$.ChildrenOrParents')==\"parents\")\n                    ,\"prompt\":\"attach $input.path('$.SourceType')\"\n                #end\n            }\n        }\n    }\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    #if ($input.params('subCollection')=='instances')\n        \"FunctionName\":\"${APICloudDirectoryPolicyListLambda.Arn}\",\n    #else\n        \"FunctionName\":\"${APICloudDirectoryAttachmentListLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"ID\":\"$input.params('id')\",\n        #if ( $input.params('childrenOrParents')==\"children\" )\n            \"SourceType\":\"$input.params('type')\",\n            \"TargetType\":\"$input.params('subCollection')\",\n        #else\n            \"SourceType\":\"$input.params('subCollection')\",\n            \"TargetType\":\"$input.params('type')\",\n        #end\n        \"MaxResults\":\"$input.params('MaxResults')\",\n        \"NextToken\":\"$input.params('NextToken')\",\n        \"Query\":\"$input.params('Query')\",\n        \"ChildrenOrParents\":\"$input.params('childrenOrParents')\",\n        \"path\":\"$context.path\"\n    }\n}\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "AttachedCollection"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AttachedCollectionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIRouterLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 201,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n{\n    \"href\":\"$root/$input.path('$.Type')/$input.path('$.SourceID')/$input.path('$.SourceID')//$input.path('$.TargetID')\"\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#if ( $input.params('childrenOrParents')==\"children\" )\n{\n    #if ($input.params('subCollection')=='instances')\n        \"FunctionName\":\"${APICloudDirectoryAttachPolicyLambda.Arn}\",\n    #else \n        \"FunctionName\":\"${APICloudDirectoryAttachLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"TargetID\":$input.json('$.template.data.ID'),\n        \"TargetType\":\"$input.params('subCollection')\",\n        \"SourceID\":\"$input.params('id')\",\n        \"SourceType\":\"$input.params('type')\",\n        \"Attributes\":{\n            \"SourceType\":\"$input.params('type')\",\n            \"TargetType\":\"$input.params('subCollection')\"\n        }\n    }\n}\n#else \n{\n    #if ($input.params('type')=='instances')\n        \"FunctionName\":\"${APICloudDirectoryAttachPolicyLambda.Arn}\",\n    #else \n        \"FunctionName\":\"${APICloudDirectoryAttachLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"TargetID\":\"$input.params('id')\",\n        \"TargetType\":\"$input.params('type')\",\n        \"SourceID\":$input.json('$.template.data.ID'),\n        \"SourceType\":\"$input.params('subCollection')\",\n        \"Attributes\":{\n            \"SourceType\":\"$input.params('subCollection')\",\n            \"TargetType\":\"$input.params('type')\"\n        }\n    }\n}\n#end\n\n\n\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "AttachedCollection"
        },
        "MethodResponses": [
          {
            "StatusCode": 201
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AttachedItemDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIRouterLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#if ( $input.params('childrenOrParents')==\"children\" )\n{\n    #if ( $input.params('subCollection')=='instances' )\n        \"FunctionName\":\"${APICloudDirectoryDetachPolicyLambda.Arn}\",\n    #else \n        \"FunctionName\":\"${APICloudDirectoryDetachLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"TargetID\":\"$input.params('subItem')\",\n        \"TargetType\":\"$input.params('subCollection')\",\n        \"SourceID\":\"$input.params('id')\",\n        \"SourceType\":\"$input.params('type')\",\n        \"Attributes\":{\n            \"SourceType\":\"$input.params('type')\",\n            \"TargetType\":\"$input.params('subCollection')\"\n        }\n    }\n}\n#else \n{\n    #if ( $input.params('type')=='instances' )\n        \"FunctionName\":\"${APICloudDirectoryDetachPolicyLambda.Arn}\",\n    #else \n        \"FunctionName\":\"${APICloudDirectoryDetachLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"TargetID\":\"$input.params('id')\",\n        \"TargetType\":\"$input.params('type')\",\n        \"SourceID\":\"$input.params('subItem')\",\n        \"SourceType\":\"$input.params('subCollection')\",\n        \"Attributes\":{\n            \"SourceType\":\"$input.params('subCollection')\",\n            \"TargetType\":\"$input.params('type')\"\n        }\n    }\n}\n#end\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "AttachedItem"
        },
        "MethodResponses": [
          {
            "StatusCode": 204
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AttachedItemGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIRouterLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n#set ( $base=\"$root/api/$input.path('$.Type')/$input.path('$.ID')\" )\n{\n    \"collection\":{\n        \"version\":\"1.0\",\n        \"href\":\"$root/api/$input.path('$.ParentType')/$input.path('$.ParentId')/$input.path('$.ChildrenOrParents')/$input.path('$.Type')/$input.path('$.ID')\",\n        \"links\":[],\n        \"items\":[{\n            \"href\":\"$base\",\n            \"data\":$input.json('$.attributes'),\n            \"links\":[\n                {\n                    \"href\":\"$base\",\n                    \"rel\":\"self\"\n                }\n                #if ($input.path('$.Type')==\"groups\")\n                ,{\n                    \"href\":\"$base/children/groups\",\n                    \"title\":\"Groups that are a part of this group\",\n                    \"rel\":\"child\"\n                },\n                {\n                    \"href\":\"$base/children/users\",\n                    \"title\":\"Users that are a part of this group\",\n                    \"rel\":\"child\"\n                },\n                {\n                    \"href\":\"$base/children/instances\",\n                    \"title\":\"Instances this group has access to\",\n                    \"rel\":\"child\"\n                },\n                {\n                    \"href\":\"$base/parents/groups\",\n                    \"title\":\"Groups this group is in\",\n                    \"rel\":\"parent\"\n                }\n                #elseif ($input.path('$.Type')==\"users\")\n                ,{\n                    \"href\":\"$base/children/instances\",\n                    \"title\":\"Instances this user has access to\",\n                    \"rel\":\"child\"\n                },\n                {\n                    \"href\":\"$base/parents/groups\",\n                    \"title\":\"Groups this user is in\",\n                    \"rel\":\"parent\"\n                }\n                #elseif ($input.path('$.Type')==\"instances\")\n                ,{\n                    \"href\":\"$base/parents/groups\",\n                    \"title\":\"Groups this Instance is attached to\",\n                    \"rel\":\"parent\"\n                },\n                {\n                    \"href\":\"$base/parents/users\",\n                    \"title\":\"Users this Instance is attached to\",\n                    \"rel\":\"parent\"\n                }\n                #end\n            ]\n        }],\n        \"queries\":[]\n    }\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    #if ($input.params('subCollection') == 'groups')\n        \"FunctionName\":\"${APICloudDirectoryObjectGetLambda.Arn}\",\n    #elseif ($input.params('subCollection') == 'users')\n        \"FunctionName\":\"${APICloudDirectoryObjectGetLambda.Arn}\",\n    #else \n        \"FunctionName\":\"${APIInstanceGetLambda.Arn}\",\n    #end\n    \"Payload\":{\n        \"FunctionName\":\"${APICloudDirectoryObjectGetLambda.Arn}\",\n        \"ParentType\":\"$input.params('type')\",\n        \"ParentId\":\"$input.params('id')\",\n        \"ChildrenOrParents\":\"$input.params('childrenOrParents')\",\n        \"Type\":\"$input.params('subCollection')\",\n        \"ID\":\"$input.params('subItem')\"\n    }\n}\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "AttachedItem"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "RootGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root\",\n    \"items\":[{\n        \"href\":\"$root\",\n        \"data\":[\n            {\"name\":\"region\",\"value\":\"${AWS::Region}\"},\n            {\"name\":\"stackname\",\"value\":\"${AWS::StackName}\"},\n            {\"name\":\"account\",\"value\":\"${AWS::AccountId}\"},\n            {\"name\":\"version\",\"value\":\"${Constants.Version}\"},\n            {\"name\":\"build-date\",\"value\":\"${Constants.BuildDate}\"},\n            {\"name\":\"vpc\",\"value\":\"${VPC.Outputs.VPC}\"},\n            {\"name\":\"SSM Automation Role\",\"value\":\"${SSM.Outputs.AutomationRole}\"}\n        ],\n        \"links\":[\n            {\n                \"rel\":\"api\",\n                \"href\":\"$root/api\"\n            },\n            {\"rel\":\"login\",\"href\":\"$root/website/admin\"},\n            {\"rel\":\"logout\",\"href\":\"$root/website/admin/logout\"}\n        ]\n    }]\n}}\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId"
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {}
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "ApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId"
          ]
        },
        "PathPart": "api",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "ApiResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root/api\",\n    \"items\":[{\n        \"data\":{\n            \"title\":\"Welcome to SageGuard\",\n            \"description\":\"from here you can create, remove, and manager users,groups and notebook instances.\"\n        }\n    }],\n    \"links\":[\n        {\n            \"href\":\"$root/api/users\",\n            \"rel\":\"resources\",\n            \"name\":\"Users\",\n            \"render\":\"person\",\n            \"prompt\":\"Manage users who log into SageMaker Notebook Instances\"\n        },\n        {\n            \"href\":\"$root/api/instances\",\n            \"rel\":\"resources\",\n            \"name\":\"SageMaker Instances\",\n            \"render\":\"computer\",\n            \"prompt\":\"Manage SageMaker Notebook Instances\"\n        },\n        {   \n            \"href\":\"$root/api/groups\",\n            \"rel\":\"resources\",\n            \"name\":\"Groups\",\n            \"render\":\"people\",\n            \"prompt\":\"Manage Groups of users\"\n        },\n        {   \n            \"href\":\"$root/website/api/messages?view=Admins\",\n            \"rel\":\"messages\",\n            \"name\":\"Messages\",\n            \"render\":\"mail_outline\",\n            \"title\":\"Requests\",\n            \"prompt\":\"Approve/Deny requests from your users\"\n        },\n        {   \n            \"href\":\"https://${QNA.Outputs.ElasticsearchEndpoint}/_plugin/kibana/\",\n            \"rel\":\"external\",\n            \"name\":\"Kibana\",\n            \"render\":\"show_chart\",\n            \"prompt\":\"Analyze and Visualize logs\"\n        },\n        {   \n            \"href\":\"https://console.aws.amazon.com/cognito/users/?region=${AWS::Region}#/pool/${QNA.Outputs.UserPool}\",\n            \"rel\":\"external\",\n            \"name\":\"Cognito UserPool Console\",\n            \"prompt\":\"View/Edit your Cognito User Pool\",\n            \"render\":\"domain\"\n        },\n        {   \n            \"href\":\"https://github.com/aws-samples/aws-sagemaker-build/issues\",\n            \"rel\":\"external\",\n            \"name\":\"GitHub Issues\",\n            \"prompt\":\"Having Trouble? Want new features? submit a ticket in the github repo\",\n            \"render\":\"message\"\n        },\n        {\n            \"href\":\"$root/website/api/instances\",\n            \"title\":\"instances\",\n            \"name\":\"instances\",\n            \"render\":\"computer\",\n            \"rel\":\"instances\",\n            \"prompt\":\"login to the instances you have access to\"\n        },\n        {\n            \"href\":\"https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/landing\",\n            \"title\":\"Amazon SageMaker Console\",\n            \"name\":\"sagemaker\",\n            \"rel\":\"external\"\n        }\n    ],\n    \"template\":[{\n        \"data\":{\n            \"schema\":{\n                \"href\":\"$root/templates/instanceUser\"\n            },\n            \"prompt\":\"Create a user and their instance together\"\n        },\n        \"href\":\"$root/templates/instanceUser\"\n    },{\n        \"data\":{\n            \"schema\":{\n                \"href\":\"$root/templates/bulk\"\n            },\n            \"prompt\":\"Create Multiple Users and Instances\"\n        },\n        \"href\":\"$root/templates/bulk\"\n    }]\n}}\n\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "ResourceId": {
          "Ref": "ApiResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {}
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "Templates": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId"
          ]
        },
        "PathPart": "templates",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "attachmentsTemplate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "Templates"
        },
        "PathPart": "attachments",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "attachmentsTemplateGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIattachmentsTemplateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root/api/template/attachments\",\n    \"template\":{\n        \"data\":{\n            \"schema\":{\n                \"type\":\"object\",\n                \"properties\":{\n                    \"ID\":{\n                        \"title\":\"$inputRoot.DestType ID\",\n                        \"type\":\"string\",\n                        \"immutable\":true,\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.result)\n                            {\n                                \"text\":\"$object.attributes.ID\",\n                                \"value\":\"$object.ID\"\n                            }\n                            #if( $foreach.hasNext ),#end\n                            #end\n                        ]\n                    }\n                },\n                \"required\":[\"ID\"]\n            }        \n        }\n    }\n}}\n    \n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($allParams = $input.params())\n{\n  \"params\" : {\n    #foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n    \"$type\" : {\n      #foreach($paramName in $params.keySet())\n      \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n      #if($foreach.hasNext),#end\n      #end\n    }\n    #if($foreach.hasNext),#end\n    #end\n  }\n}\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.SourceID": false,
          "method.request.querystring.SourceType": false,
          "method.request.querystring.DestType": false,
          "method.request.querystring.Type": false,
          "method.request.querystring.ID": false
        },
        "ResourceId": {
          "Ref": "attachmentsTemplate"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "APIattachmentsTemplateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,kms=new aws.KMS,iam=new aws.IAM;function filterRoles(e){var s=JSON.parse(decodeURIComponent(e.AssumeRolePolicyDocument));return console.log(s.Statement),s.Statement.filter(e=>\"sagemaker.amazonaws.com\"===e.Principal.Service).length}exports.handler=function(e,s,n){console.log(JSON.stringify(e,null,2));var a=e.params.querystring;isInstance=\"instances\"===a.SourceType,fnc=process.env[isInstance?\"POLICYLISTLAMBDA\":\"ATTACHMENTLISTLAMBDA\"],already=lambda.invoke({FunctionName:fnc,InvocationType:\"RequestResponse\",Payload:JSON.stringify({ID:a.SourceID,SourceType:a.SourceType,TargetType:a.DestType,MaxResults:10,NextToken:null,ChildrenOrParents:a.Relationship})}).promise().then(e=>(console.log(\"already\",e),results=JSON.parse(e.Payload),results.Links?\"children\"===a.Relationship?results.Links.map(e=>e.TargetObjectReference.Selector.slice(1)):results.Links.map(e=>e.SourceObjectReference.Selector.slice(1)):[])),possible=lambda.invoke({FunctionName:process.env.INDEXLISTLAMBDA,InvocationType:\"RequestResponse\",Payload:JSON.stringify({Type:a.DestType,MaxResults:10})}).promise().then(e=>(console.log(\"possible\",e),results=JSON.parse(e.Payload).IndexAttachments,results.map(e=>e.ObjectIdentifier))),Promise.all([possible,already]).then(e=>(console.log(e),e)).then(e=>e[0].filter(s=>!e[1].includes(s))).then(e=>Promise.all(e.map(e=>lambda.invoke({FunctionName:process.env.OBJECTGETLAMBDA,InvocationType:\"RequestResponse\",Payload:JSON.stringify({ID:e})}).promise().then(e=>JSON.parse(e.Payload))))).then(e=>{console.log(JSON.stringify(e,null,2)),n(null,{params:a,result:e})}).catch(e=>{console.log(e),n(JSON.stringify({type:404===e.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:e.statusCode,message:e.message,data:e}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "896",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ATTACHMENTLISTLAMBDA": {
              "Ref": "APICloudDirectoryAttachmentListLambda"
            },
            "POLICYLISTLAMBDA": {
              "Ref": "APICloudDirectoryPolicyListLambda"
            },
            "INDEXLISTLAMBDA": {
              "Ref": "APICloudDirectoryIndexListLambda"
            },
            "OBJECTGETLAMBDA": {
              "Ref": "APICloudDirectoryObjectGetLambda"
            },
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "ASSETBUCKET": {
              "Ref": "AssetBucket"
            },
            "ASSETPREFIX": {
              "Ref": "AssetPrefix"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiTemplate"
          }
        ]
      }
    },
    "bulkTemplate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "Templates"
        },
        "PathPart": "bulk",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "bulkTemplateGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIbulkTemplateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root/api/template/items\",\n    \"template\":{\n        \"data\":{\n            \"schema\":$input.json('$')        \n        }\n    }\n}}\n    \n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($allParams = $input.params())\n{\n  \"params\" : {\n    #foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n    \"$type\" : {\n      #foreach($paramName in $params.keySet())\n      \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n      #if($foreach.hasNext),#end\n      #end\n    }\n    #if($foreach.hasNext),#end\n    #end\n  }\n}\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.SourceID": false,
          "method.request.querystring.SourceType": false,
          "method.request.querystring.DestType": false,
          "method.request.querystring.Type": false,
          "method.request.querystring.ID": false
        },
        "ResourceId": {
          "Ref": "bulkTemplate"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "APIbulkTemplateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var send=require(\"request\").send,_=require(\"lodash\");exports.handler=function(e,s,r){console.log(JSON.stringify(e,null,2)),Promise.all([send({href:`${process.env.API}/templates/instances`,method:\"GET\"}),send({href:`${process.env.API}/api/users`,method:\"GET\"})]).then(e=>{console.log(JSON.stringify(e,null,2)),instances=e[0],users=e[1],user_schema=users.collection.template.data.schema,instance_schema=instances.collection.template.data.schema,r(null,{type:\"object\",properties:Object.assign({users:{type:\"array\",items:{type:\"object\",properties:user_schema.properties}}},_.omit(instance_schema.properties,[\"ID\",\"Description\",\"DisplayName\"])),required:[\"users\"].concat(user_schema.required).concat(instance_schema.required)})}).catch(e=>{console.log(e),r(e)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "896",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ATTACHMENTLISTLAMBDA": {
              "Ref": "APICloudDirectoryAttachmentListLambda"
            },
            "POLICYLISTLAMBDA": {
              "Ref": "APICloudDirectoryPolicyListLambda"
            },
            "INDEXLISTLAMBDA": {
              "Ref": "APICloudDirectoryIndexListLambda"
            },
            "OBJECTGETLAMBDA": {
              "Ref": "APICloudDirectoryObjectGetLambda"
            },
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "ASSETBUCKET": {
              "Ref": "AssetBucket"
            },
            "ASSETPREFIX": {
              "Ref": "AssetPrefix"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiTemplate"
          }
        ]
      }
    },
    "APIbulkPostTemplateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var delay=require(\"delay\"),_=require(\"lodash\");exports.handler=function(e,t,a){console.log(JSON.stringify(e,null,2)),Promise.all(e.template.data.users.map(t=>send({href:`${process.env.API}/templates/instanceUser`,method:\"POST\",body:{template:{data:Object.assign(t,_.omit(e.template.data,\"users\"))}}}))).then(e=>a(null,_.flatten(e))).catch(e=>{console.log(e),a(e)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "896",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ATTACHMENTLISTLAMBDA": {
              "Ref": "APICloudDirectoryAttachmentListLambda"
            },
            "POLICYLISTLAMBDA": {
              "Ref": "APICloudDirectoryPolicyListLambda"
            },
            "INDEXLISTLAMBDA": {
              "Ref": "APICloudDirectoryIndexListLambda"
            },
            "OBJECTGETLAMBDA": {
              "Ref": "APICloudDirectoryObjectGetLambda"
            },
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "ASSETBUCKET": {
              "Ref": "AssetBucket"
            },
            "ASSETPREFIX": {
              "Ref": "AssetPrefix"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiTemplate"
          }
        ]
      }
    },
    "bulkTemplatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIbulkPostTemplateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n[{\n    \"href\":\"$root/api/users/$input.path('$.user')\"\n},{\n    \"href\":\"$root/api/instances/$input.path('$.instance')\"\n}]\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "$input.body\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.SourceID": false,
          "method.request.querystring.SourceType": false,
          "method.request.querystring.DestType": false,
          "method.request.querystring.Type": false,
          "method.request.querystring.ID": false
        },
        "ResourceId": {
          "Ref": "bulkTemplate"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "instanceTemplate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "Templates"
        },
        "PathPart": "instance",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "instanceTemplateGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIinstanceTemplateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root/api/template/instance\",\n    \"template\":{\n        \"data\":{\n            \"schema\":$input.json('$')        \n        }\n    }\n}}\n \n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($allParams = $input.params())\n{\n  \"params\" : {\n    #foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n    \"$type\" : {\n      #foreach($paramName in $params.keySet())\n      \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n      #if($foreach.hasNext),#end\n      #end\n    }\n    #if($foreach.hasNext),#end\n    #end\n  }\n}\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.SourceID": false,
          "method.request.querystring.SourceType": false,
          "method.request.querystring.DestType": false,
          "method.request.querystring.Type": false,
          "method.request.querystring.ID": false
        },
        "ResourceId": {
          "Ref": "instanceTemplate"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "APIinstanceTemplateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var send=require(\"request\").send,_=require(\"lodash\"),cd=new aws.CloudDirectory,cf=new aws.CloudFormation;function filterRoles(e){return JSON.parse(decodeURIComponent(e.AssumeRolePolicyDocument)).Statement.filter(e=>\"sagemaker.amazonaws.com\"===e.Principal.Service).length}exports.handler=function(e,t,r){console.log(JSON.stringify(e,null,2));var s=e.params.querystring,a=s.ID;s.Type;Promise.all([cd.listObjectAttributes({DirectoryArn:process.env.DIRECTORY,ObjectReference:{Selector:`$${a}`}}).promise(),send({href:`${process.env.API}/templates/instances`,method:\"GET\"})]).then(e=>{console.log(JSON.stringify(e,null,2));var t=_.fromPairs(e[0].Attributes.map(e=>[e.Key.name,e.Value.StringValue]));cf.describeStacks({StackName:t.StackName}).promise().then(s=>{var a=s.Stacks[0].StackStatus,o=_.fromPairs(s.Stacks[0].Outputs.map(e=>[e.OutputKey,e.OutputValue])).State,n=[\"DisplayName\",\"Description\",\"IdleShutdown\",\"OnTerminateDocument\",\"OnStopDocument\"];a.match(/.*_COMPLETE/)&&\"OFF\"===o&&(n=n.concat([\"OnStartDocument\",\"GlueDevEndpoint\",\"RoleArn\",\"InstanceType\",\"AcceleratorTypes\",\"AdditionalCodeRepositories\",\"DefaultCodeRepository\"]));var i=e[1].collection.template.data.schema;i.required=_.intersection(i.required,n),i.properties=_.pick(_.pickBy(i.properties,(e,t)=>!e.immutable),n),a.match(/.*_COMPLETE/)&&(i.properties.State={title:\"Instance state\",description:\"turn instance ON or OFF. some properties of the instance are only updateable when the instance is off\",enum:[\"ON\",\"OFF\"],default:o}),_.each(t,(e,t)=>{i.properties[e]&&(i.properties[e].default=t)}),console.log(JSON.stringify(i,null,2)),r(null,i)})}).catch(e=>{console.log(e),r(JSON.stringify({type:404===e.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:e.statusCode,message:e.message,data:e}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "896",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ATTACHMENTLISTLAMBDA": {
              "Ref": "APICloudDirectoryAttachmentListLambda"
            },
            "POLICYLISTLAMBDA": {
              "Ref": "APICloudDirectoryPolicyListLambda"
            },
            "INDEXLISTLAMBDA": {
              "Ref": "APICloudDirectoryIndexListLambda"
            },
            "OBJECTGETLAMBDA": {
              "Ref": "APICloudDirectoryObjectGetLambda"
            },
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "ASSETBUCKET": {
              "Ref": "AssetBucket"
            },
            "ASSETPREFIX": {
              "Ref": "AssetPrefix"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiTemplate"
          }
        ]
      }
    },
    "instanceUserTemplate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "Templates"
        },
        "PathPart": "instanceUser",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "instanceUserTemplateGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIinstanceUserTemplateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root/api/template/items\",\n    \"template\":{\n        \"data\":{\n            \"schema\":$input.json('$')        \n        }\n    }\n}}\n    \n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($allParams = $input.params())\n{\n  \"params\" : {\n    #foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n    \"$type\" : {\n      #foreach($paramName in $params.keySet())\n      \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n      #if($foreach.hasNext),#end\n      #end\n    }\n    #if($foreach.hasNext),#end\n    #end\n  }\n}\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.SourceID": false,
          "method.request.querystring.SourceType": false,
          "method.request.querystring.DestType": false,
          "method.request.querystring.Type": false,
          "method.request.querystring.ID": false
        },
        "ResourceId": {
          "Ref": "instanceUserTemplate"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "APIinstanceUserTemplateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var send=require(\"request\").send,_=require(\"lodash\");exports.handler=function(e,s,r){console.log(JSON.stringify(e,null,2)),Promise.all([send({href:`${process.env.API}/templates/instances`,method:\"GET\"}),send({href:`${process.env.API}/api/users`,method:\"GET\"})]).then(e=>{instances=e[0],users=e[1],user_schema=users.collection.template.data.schema,instance_schema=instances.collection.template.data.schema,r(null,{type:\"object\",properties:Object.assign(_.pick(user_schema.properties,[\"ID\",\"Description\",\"DisplayName\"]),_.omit(user_schema.properties,[\"ID\",\"Description\",\"DisplayName\"]),_.omit(instance_schema.properties,[\"ID\",\"Description\",\"DisplayName\"])),required:[].concat(user_schema.required).concat(instance_schema.required)})}).catch(e=>{console.log(e),r(e)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "896",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ATTACHMENTLISTLAMBDA": {
              "Ref": "APICloudDirectoryAttachmentListLambda"
            },
            "POLICYLISTLAMBDA": {
              "Ref": "APICloudDirectoryPolicyListLambda"
            },
            "INDEXLISTLAMBDA": {
              "Ref": "APICloudDirectoryIndexListLambda"
            },
            "OBJECTGETLAMBDA": {
              "Ref": "APICloudDirectoryObjectGetLambda"
            },
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "ASSETBUCKET": {
              "Ref": "AssetBucket"
            },
            "ASSETPREFIX": {
              "Ref": "AssetPrefix"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiTemplate"
          }
        ]
      }
    },
    "APIinstanceUserPostTemplateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var send=require(\"request\").send,wait=require(\"wait\"),delay=require(\"delay\"),_=require(\"lodash\");exports.handler=function(e,s,t){console.log(JSON.stringify(e,null,2)),Promise.all([send({href:`${process.env.API}/templates/instances`,method:\"GET\"}),send({href:`${process.env.API}/api/users`,method:\"GET\"})]).then(s=>(console.log(JSON.stringify(s,null,2)),instances=s[0],users=s[1],user_properties=Object.keys(users.collection.template.data.schema.properties),instance_properties=Object.keys(instances.collection.template.data.schema.properties),user_data=_.pick(e.template.data,user_properties),instance_data=Object.assign({ID:`${user_data.ID}-instance`,Description:`${user_data.ID}'s instance`},_.pick(e.template.data,instance_properties)),Promise.all([send({href:`${process.env.API}/api/instances`,method:\"POST\",body:{template:{data:instance_data}}}),send({href:`${process.env.API}/api/users`,method:\"POST\",body:{template:{data:user_data}}})]).then(e=>{console.log(JSON.stringify(e,null,2));var s=e[0].collection.items[0].href.split(\"/\").reverse()[0],t=e[1].collection.items[0].href.split(\"/\").reverse()[0];return send({href:`${process.env.API}/api/users/${t}/children/instances`,method:\"POST\",body:{template:{data:{ID:s}}}}).then(()=>({user:t,instance:s}))}))).catch(e=>{console.log(e),t(e)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "896",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ATTACHMENTLISTLAMBDA": {
              "Ref": "APICloudDirectoryAttachmentListLambda"
            },
            "POLICYLISTLAMBDA": {
              "Ref": "APICloudDirectoryPolicyListLambda"
            },
            "INDEXLISTLAMBDA": {
              "Ref": "APICloudDirectoryIndexListLambda"
            },
            "OBJECTGETLAMBDA": {
              "Ref": "APICloudDirectoryObjectGetLambda"
            },
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "ASSETBUCKET": {
              "Ref": "AssetBucket"
            },
            "ASSETPREFIX": {
              "Ref": "AssetPrefix"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiTemplate"
          }
        ]
      }
    },
    "instanceUserTemplatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIinstanceUserPostTemplateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n[{\n    \"href\":\"$root/api/users/$input.path('$.user')\"\n},{\n    \"href\":\"$root/api/instances/$input.path('$.instance')\"\n}]\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "$input.body\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.SourceID": false,
          "method.request.querystring.SourceType": false,
          "method.request.querystring.DestType": false,
          "method.request.querystring.Type": false,
          "method.request.querystring.ID": false
        },
        "ResourceId": {
          "Ref": "instanceUserTemplate"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "instancesTemplate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "Templates"
        },
        "PathPart": "instances",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "instancesTemplateGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIinstancesTemplateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root/api/template/instances\",\n    \"template\":{\n        \"data\":{\n            \"schema\":{\n                \"type\":\"object\",\n                \"properties\":{\n                    \"ID\":{\n                        \"title\":\"Instance ID\",\n                        \"description\":\"The unique identifier for this instance\",\n                        \"type\":\"string\",\n                        \"immutable\":true,\n                        \"default\":\"$context.requestId\"\n                    },\n                    \"DisplayName\":{\n                        \"title\":\"Instance DisplayName\",\n                        \"description\":\"A friendly name for this instance\",\n                        \"type\":\"string\"\n                    },\n                    \"Description\":{\n                        \"title\":\"Instance Description\",\n                        \"description\":\"A brief description of how this instance will be used\",\n                        \"type\":\"string\",\n                        \"maxLength\":500\n                    },\n                    #if( $inputRoot.repos.length() != 0)\n                    \"CodeRepository\":{\n                        \"description\":\"A git repository to associate with the notebook instance as its default code repository. When you open a notebook instance, it opens in the directory that contains this repository.\",\n                        \"title\":\"Git Code Repository\",\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.repos)\n                            {\n                                \"value\":\"$object.value\",\n                                \"text\":\"$object.value\",\n                                \"description\":\"$object.description\"\n                            }#if( $foreach.hasNext ),#end\n                            #end\n                        ]\n                    },#end\n                    #if( $inputRoot.eia.length() != 0)\n                    \"AcceleratorType\":{\n                        \"title\":\"Elastic Inference Accelerator\",\n                        \"description\":\"An Elastic Inference (EI) instance types to associate with this notebook instance\",\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.eia)\n                            {\n                                \"value\":\"$object.value\",\n                                \"text\":\"$object.value\",\n                                \"description\":\"$object.description\"\n                            }#if( $foreach.hasNext ),#end\n                            #end\n                        ]\n                    },#end\n                    \"InstanceType\":{\n                        \"title\":\"Instance Compute Type\",\n                        \"description\":\"The EC2 instance type for this notebook\",\n                        \"type\":\"string\",\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.instances)\n                            {\n                                \"value\":\"$object.value\",\n                                \"text\":\"$object.name\",\n                                \"description\":\"$object.description\"\n                            }#if( $foreach.hasNext ),#end\n                            #end\n                        ],\n                        \"default\":\"ml.t3.medium\"\n                    },\n                    \"RoleArn\":{\n                        \"title\":\"Instance IAM RoleArn\",\n                        \"description\":\"Choose the IAM role that will give users on the notebook instance to call AWS APIs\",\n                        \"type\":\"string\",\n                        \"enum\":[\n                            {\n                                \"text\":\"DefaultRole\",\n                                \"value\":\"${DefaultNotebookRole.Arn}\",\n                                \"href\":\"https://console.aws.amazon.com/iam/home?region=${AWS::Region}#/roles/${DefaultNotebookRole}\",\n                                \"description\":\"Default Sagemaker Role\"\n                            },\n                            {\n                                \"text\":\"Create Role\",\n                                \"value\":\"CREATE\",\n                                \"description\":\"Create a new role for this instance with the default sagemaker policy applied\"\n                            }\n                            #foreach( $object in $inputRoot.roles)\n                            ,{\n                                \"value\":\"$object.Arn\",\n                                \"text\":\"$object.RoleName\",\n                                \"href\":\"https://console.aws.amazon.com/iam/home?region=${AWS::Region}#/roles/$object.RoleName\",\n                                \"description\":\"$object.Description\"\n                            }\n                            #end\n                        ],\n                        \"default\":\"${DefaultNotebookRole.Arn}\"\n                    },\n                    #if( $inputRoot.keys.length() != 0)\n                    \"KmsKeyId\":{\n                        \"title\":\"KMS key Id\",\n                        \"description\":\"A AWS KMS key to use for encrypting the data volumnes of the instance\",\n                        \"type\":\"string\",\n                        \"immutable\":true,\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.keys){\n                                \"text\":\"$object.KeyId\",\n                                \"value\":\"$object.KeyId\",\n                                \"href\":\"https://console.aws.amazon.com/kms/home?region=${AWS::Region}#/kms/keys/$object.KeyId/\"\n                            }#if( $foreach.hasNext ),#end\n                            #end\n                        ]\n                    },\n                    #end\n                    \"DirectInternetAccess\":{\n                        \"title\":\"Enable/Disable Direct Internet Access\",\n                        \"type\":\"string\",\n                        \"immutable\":true,\n                        \"enum\":[\"Disabled\",\"Enabled\"],\n                        \"default\":\"Enabled\"\n                    },\n                    \n                    #if ($inputRoot.endpoints.length() != 0)\n                    \"GlueDevEndpoint\":{\n                        \"title\":\"Glue development endpoints\",\n                        \"type\":\"string\",\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.endpoints){\n                                \"text\":\"$object.name\",\n                                \"value\":\"$object.name\",\n                                \"description\":\"Nodes:$object.nodes VPC:$object.vpc\",\n                                \"href\":\"https://console.aws.amazon.com/glue/home?region=${AWS::Region}#devEndpoint:name=$object.name\"\n                            }#if( $foreach.hasNext ),#end\n                            #end\n                        ]\n                    },#end\n                    #if ($inputRoot.commands.length() != 0)\n                    \"OnStartDocument\":{\n                        \"title\":\"SSM OnStart Document\",\n                        \"description\":\"An SSM document to run on each instance start up. The document must be of type 'Command' and have the following parameters: #foreach( $object in $inputRoot.params)$object#if( $foreach.hasNext ), #end#end.\",\n                        \"type\":\"string\",\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.commands){\n                                \"text\":\"$object.Name\",\n                                \"value\":\"$object.Name\",\n                                \"href\":\"https://console.aws.amazon.com/systems-manager/documents/$object.Name/description?region=${AWS::Region}\"\n                            }#if( $foreach.hasNext ),#end#end\n                        ]\n                    },#end\n                    #if ($inputRoot.automation.length() != 0)\n                    \"OnCreateDocument\":{\n                        \"title\":\"SSM OnCreate Document\",\n                        \"immutable\":true,\n                        \"description\":\"An SSM document to run on instance creation. The document must be of type 'Command' and have the following parameters: #foreach( $object in $inputRoot.params)$object#if( $foreach.hasNext ), #end#end.\",\n                        \"ask\":\"Tell me about the OnCreate Document\",\n                        \"type\":\"string\",\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.automation){\n                                \"text\":\"$object.Name\",\n                                \"value\":\"$object.Name\",\n                                \"href\":\"https://console.aws.amazon.com/systems-manager/documents/$object.Name/description?region=${AWS::Region}\"\n                            }#if( $foreach.hasNext ),#end#end\n                        ]\n                    },\n                    \"OnTerminateDocument\":{\n                        \"title\":\"SSM OnTerminate Document\",\n                        \"immutable\":true,\n                        \"description\":\"An SSM document to run on instance termination. The document must be of type 'Command' and have the following parameters: #foreach( $object in $inputRoot.params)$object#if( $foreach.hasNext ), #end#end.\",\n                        \"ask\":\"Tell me about the OnTerminate Document\",\n                        \"type\":\"string\",\n                        \"enum\":[\n                            #foreach( $object in $inputRoot.automation){\n                                \"text\":\"$object.Name\",\n                                \"value\":\"$object.Name\",\n                                \"href\":\"https://console.aws.amazon.com/systems-manager/documents/$object.Name/description?region=${AWS::Region}\"\n                            }#if( $foreach.hasNext ),#end#end\n                        ]\n                    },#end\n                    \"IdleShutdown\":{\n                        \"title\":\"Idle Shutdown Wait Period in minutes\",\n                        \"description\":\"The number of minutes of inactivity before the instance is shutdown to save cost\",\n                        \"type\":\"string\",\n                        \"enum\":[{\n                            \"value\":\"30\",\n                            \"text\":\"30 minutes\"\n                        },{\n                            \"value\":\"45\",\n                            \"text\":\"45 minutes\"\n                        },{\n                            \"value\":\"60\",\n                            \"text\":\"1 hr\"\n                        }],\n                        \"default\":\"30\"\n                    }\n                },\n                \"required\":[\"ID\",\"InstanceType\",\"RoleArn\"]\n            }        \n        }\n    }\n}}\n    \n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{}\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.SourceID": false,
          "method.request.querystring.SourceType": false,
          "method.request.querystring.DestType": false,
          "method.request.querystring.Type": false,
          "method.request.querystring.ID": false
        },
        "ResourceId": {
          "Ref": "instancesTemplate"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "APIinstancesTemplateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),_=require(\"lodash\");aws.config.region=process.env.AWS_REGION;var s3=new aws.S3,ssm=new aws.SSM,ec2=new aws.EC2,pricing=new aws.Pricing({region:\"us-east-1\"}),kms=new aws.KMS,iam=new aws.IAM,list_eia=require(\"list_eia\"),list_repos=require(\"list_repos\"),glue=new aws.Glue;function filterRoles(e){return JSON.parse(decodeURIComponent(e.AssumeRolePolicyDocument)).Statement.filter(e=>\"sagemaker.amazonaws.com\"===e.Principal.Service).length}function documents(e,t){return new Promise(function(s,n){var o=[];!function r(a){Promise.all([ssm.listDocuments({DocumentFilterList:e,NextToken:a}).promise(),t]).then(e=>{console.log(JSON.stringify(e,null,2));var t=e[0].DocumentIdentifiers.filter(e=>!e.Name.match(/^AWS-/)),a=e[1];Promise.all(t.map(e=>ssm.describeDocument({Name:e.Name}).promise())).then(t=>{t.filter(e=>(console.log(e.Document.Parameters.map(e=>e.Name),a),0===_.xor(e.Document.Parameters.map(e=>e.Name),a).length)).forEach(e=>{o.push(_.omit(e.Document,\"Parameters\"))}),e[0].NextToken?r(e[0].NextToken):s(o)}).catch(n)}).catch(n)}()})}exports.handler=function(e,t,s){console.log(JSON.stringify(e,null,2));var n=s3.getObject({Bucket:process.env.ASSETBUCKET,Key:`${process.env.ASSETPREFIX}/instance.json`}).promise().then(e=>{var t=JSON.parse(e.Body.toString()),s=_.keys(_.omit(t.Parameters,[\"OnCreateDocument\",\"OnTerminateDocument\",\"OnStartDocument\"]));return s.push(\"StackName\"),s.push(\"InstanceId\"),s}),o=new Promise((e,t)=>{!function t(s,n){pricing.getProducts({ServiceCode:\"AmazonSageMaker\",Filters:[{Field:\"productFamily\",Type:\"TERM_MATCH\",Value:\"ML Instance\"},{Field:\"location\",Type:\"TERM_MATCH\",Value:process.env.REGIONNAME}],MaxResults:100,NextToken:s}).promise().then(s=>{s.PriceList.filter(e=>e.product.attributes.instanceType.match(/.*-Notebook/)).map(e=>n.push({type:e.product.attributes.instanceType.match(/(.*)-Notebook/)[1],cpus:e.product.attributes.vCpu,ram:e.product.attributes.memory,gpus:e.product.attributes.physicalGpu,gpu:e.product.attributes.gpu,price:_.toPairs(_.toPairs(e.terms.OnDemand)[0][1].priceDimensions)[0][1].pricePerUnit.USD})),s.NextToken?t(s.NextToken,n):e(n)})}(null,[])}).then(e=>_.sortBy(e,e=>e.price).map(e=>({name:`${e.type}: $${parseFloat(e.price).toFixed(3)}`,value:e.type,description:\"None\"===e.gpus?`vCPUs:${e.cpus} Memory:${e.ram}`:`vCPUs:${e.cpus} Memory:${e.ram} GPUs:${e.gpu}`}))),r=new Promise(function(e,t){var s=[];!function n(o){iam.listRoles({Marker:o}).promise().then(t=>{t.Roles.filter(filterRoles).map(e=>({RoleName:e.RoleName,Arn:e.Arn,Description:e.Description})).forEach(e=>s.push(e)),t.IsTruncated?n(t.Marker):e(s)}).catch(t)}()}),a=new Promise(function(e,t){var s=[];!function n(o){kms.listKeys({Marker:o,Limit:1e3}).promise().then(t=>{t.Keys.forEach(e=>s.push(e)),t.Truncated?n(t.NextMarker):e(s)}).catch(t)}()}),i=new Promise(function(e,t){var s=[];!function n(o){glue.getDevEndpoints({NextToken:o}).promise().then(t=>{t.DevEndpoints.forEach(e=>s.push({name:e.EndpointName,nodes:e.NumberOfNodes,vpc:e.VpcId})),t.NextToken?n(t.NextToken):e(s)}).catch(t)}()});Promise.all([a,r,i,o,documents([{key:\"PlatformTypes\",value:\"Linux\"},{key:\"DocumentType\",value:\"Command\"}],n),documents([{key:\"DocumentType\",value:\"Automation\"}],n),n,list_eia(),list_repos()]).then(e=>s(null,{keys:e[0],roles:e[1],endpoints:e[2],instances:e[3],commands:e[4],automation:e[5],params:e[6],eia:e[7],repos:e[8]})).catch(e=>{console.log(e),s(JSON.stringify({type:404===e.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:e.statusCode,message:e.message,data:e}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "896",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ATTACHMENTLISTLAMBDA": {
              "Ref": "APICloudDirectoryAttachmentListLambda"
            },
            "POLICYLISTLAMBDA": {
              "Ref": "APICloudDirectoryPolicyListLambda"
            },
            "INDEXLISTLAMBDA": {
              "Ref": "APICloudDirectoryIndexListLambda"
            },
            "OBJECTGETLAMBDA": {
              "Ref": "APICloudDirectoryObjectGetLambda"
            },
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "ASSETBUCKET": {
              "Ref": "AssetBucket"
            },
            "ASSETPREFIX": {
              "Ref": "AssetPrefix"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiTemplate"
          }
        ]
      }
    },
    "itemsTemplate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "Templates"
        },
        "PathPart": "items",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "itemsTemplateGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIitemsTemplateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root/api/template/items\",\n    \"template\":{\n        \"data\":{\n            \"schema\":{\n                \"type\":\"object\",\n                \"properties\":{\n                    #foreach( $object in $inputRoot.result)\n                        \"$object.name\":{\n                            \"title\":\"$object.name\",\n                            \"type\":\"string\",\n                            \"immutable\":false,\n                            \"default\":\"$object.value\" \n                        }#if($foreach.hasNext),#end\n                    #end\n                },\n                \"required\":[#foreach( $object in $inputRoot.result)\"$object.name\"#if($foreach.hasNext),#end#end]\n            }        \n        }\n    }\n}}\n    \n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($allParams = $input.params())\n{\n  \"params\" : {\n    #foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n    \"$type\" : {\n      #foreach($paramName in $params.keySet())\n      \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n      #if($foreach.hasNext),#end\n      #end\n    }\n    #if($foreach.hasNext),#end\n    #end\n  }\n}\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.SourceID": false,
          "method.request.querystring.SourceType": false,
          "method.request.querystring.DestType": false,
          "method.request.querystring.Type": false,
          "method.request.querystring.ID": false
        },
        "ResourceId": {
          "Ref": "itemsTemplate"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "APIitemsTemplateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cd=new aws.CloudDirectory;exports.handler=function(e,t,r){console.log(JSON.stringify(e,null,2));var s=e.params.querystring,a=s.ID,n=s.Type;Promise.all([cd.listFacetAttributes({Name:n,SchemaArn:process.env.SCHEMA}).promise(),cd.listObjectAttributes({DirectoryArn:process.env.DIRECTORY,ObjectReference:{Selector:`$${a}`}}).promise()]).then(e=>{console.log(JSON.stringify(e,null,2));var t=e[0].Attributes,r=e[1].Attributes;return mutable=t.filter(e=>!e.AttributeDefinition.IsImmutable).map(e=>(tmp=r.find(t=>t.Key.Name===e.Name),console.log(e,tmp),tmp?{name:e.Name,value:tmp.Value.StringValue}:{name:e.Name,value:\"\"})),mutable}).then(e=>{console.log(JSON.stringify(e,null,2)),r(null,{params:s,result:e})}).catch(e=>{console.log(e),r(JSON.stringify({type:404===e.statusCode?\"[NotFoud]\":\"[InternalServiceError]\",status:e.statusCode,message:e.message,data:e}))})};"
        },
        "Handler": "index.handler",
        "MemorySize": "896",
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ATTACHMENTLISTLAMBDA": {
              "Ref": "APICloudDirectoryAttachmentListLambda"
            },
            "POLICYLISTLAMBDA": {
              "Ref": "APICloudDirectoryPolicyListLambda"
            },
            "INDEXLISTLAMBDA": {
              "Ref": "APICloudDirectoryIndexListLambda"
            },
            "OBJECTGETLAMBDA": {
              "Ref": "APICloudDirectoryObjectGetLambda"
            },
            "DIRECTORY": {
              "Ref": "Directory"
            },
            "SCHEMA": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            },
            "API": {
              "Fn::GetAtt": [
                "URLs",
                "API"
              ]
            },
            "REGIONNAME": {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "name"
              ]
            },
            "ASSETBUCKET": {
              "Ref": "AssetBucket"
            },
            "ASSETPREFIX": {
              "Ref": "AssetPrefix"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "ApiTemplate"
          }
        ]
      }
    },
    "InstancesLoginResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "WebsiteAPIResource"
        },
        "PathPart": "instances",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "InstanceLoginResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "InstancesLoginResource"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "InstancesLoginGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "CognitoAuthorizer"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APICloudDirectoryPolicyListLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n#set ( $userRoot=\"$root/website/api\")\n#set ( $instanceRoot=\"$userRoot/instances\")\n\n\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    #if ( $inputRoot.PrevToken.length())\n        \"href\":\"$instanceRoot\",\n    #else\n        \"href\":\"$instanceRoot?NextToken=inputRoot.PrevToken\",\n    #end\n    \"links\":[\n        #if ( $inputRoot.NextToken.length())\n            {\"rel\":\"next\",\"href\":\"$instanceRoot?NextToken=$inputRoot.NextToken\"}\n        #end\n        #if(  $inputRoot.NextToken.length() && $inputRoot.Links.length()),#end\n        #foreach( $object in $inputRoot.Links)\n        {\n            \"href\":\"$instanceRoot/$object.TargetObjectReference.Selector.substring(1)\",\n            \"rel\":\"item\"\n        }\n        #if( $foreach.hasNext ),#end\n        #end\n    ],\n    \"items\":[{\n        \"data\":{\n            \"title\":\"SageMaker Notebook Instances\",\n            #if($inputRoot.Links() == 0)\n                \"description\":\"You do not have access to any notebook instances\"\n            #else\n                \"description\":\"You currently have access to the following instances\"\n            #end\n        }\n    }],\n    \"queries\":[\n        {   \n            #if ( $inputRoot.NextToken.length())\n                \"href\":\"$instanceRoot?\",\n            #else\n                \"href\":\"$instanceRoot?NextToken=inputRoot.NextToken\",\n            #end\n            \"rel\":\"search\",\n            \"prompt\":\"Search for instances by ID\",\n            \"data\":[\n                #if ( $inputRoot.NextToken.length())\n                    {\"name\":\"MaxResults\",\"prompt\":\"Maximum results to return\"},\n                #else\n                {\"name\":\"Query\",\"prompt\":\"Prefix to search by\"}\n            ]\n        }\n    ]\n}}\n\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"path\":\"/users/$context.authorizer.claims['cognito:username']\",\n    \"MaxResults\":\"$input.params('MaxResults')\",\n    \"NextToken\":\"$input.params('NextToken')\"\n}\n"
            }
          }
        },
        "ResourceId": {
          "Ref": "InstancesLoginResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "InstanceLoginGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "ClouddirectoryAuthorizer"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIInstanceListLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          }
        },
        "ResourceId": {
          "Ref": "InstanceLoginResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "InstanceLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "ClouddirectoryAuthorizer"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIInstancePostStateLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          }
        },
        "ResourceId": {
          "Ref": "InstanceLoginResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AuthenticateResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "InstanceLoginResource"
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AuthenticateGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "ClouddirectoryHeaderAuthorizer"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIInstanceRedirectLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$root$context.path\",\n    \"error\":$input.json('$.errorMessage')\n}}\n"
                }
              }
            }
          ],
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          }
        },
        "ResourceId": {
          "Ref": "AuthenticateResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 409
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 500
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "WebsiteResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId"
          ]
        },
        "PathPart": "website",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "WebsiteResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.view": "view"
        },
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "text/html": {
                  "Fn::Sub": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,height=device-height, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Nunito:400,600,700,800,900\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"//fonts.googleapis.com/icon?family=Material+Icons\">\n    <link href=\"https://unpkg.com/vuetify/dist/vuetify.min.css\" rel=\"stylesheet\">\n    <link rel=\"API\" href=\"${URLs.API}\">\n    <link rel=\"webAPI\" href=\"${URLs.UserAPI}\">\n    <meta name=\"View\" content=\"$input.params('view')\">\n    <meta name=\"PoolId\" content=\"${IdPool}\">\n    <meta name=\"Endpoint\" content=\"${URLs.CognitoEndpoint}\">\n    <meta name=\"UserPool\" content=\"${QNA.Outputs.UserPool}\">\n    <meta name=\"Region\" content=\"${AWS::Region}\">\n    #if( $input.params('view') == 'admin' )\n        <meta name=\"ClientId\" content=\"${AdminClient}\">\n        <link rel=\"Login\" href=\"${LoginURLS.AdminLogin}\">\n        <link rel=\"Logout\" href=\"${LoginURLS.AdminLogout}\">\n        <title>SageGuard Administration</title>\n    #else\n        <meta name=\"ClientId\" content=\"${UserClient}\">\n        <link rel=\"Login\" href=\"${LoginURLS.UserLogin}\">\n        <link rel=\"Logout\" href=\"${LoginURLS.UserLogout}\">\n        <title>SageGuard User</title>\n    #end\n  </head>\n  <body>\n    <div id=\"App\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script src=\"https://unpkg.com/vuex\"></script>\n    <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n    <script src=\"https://unpkg.com/vuetify/dist/vuetify.js\"></script>\n    <script src=\"https://sdk.amazonaws.com/js/aws-sdk-2.211.0.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.5/lodash.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/bluebird/latest/bluebird.min.js\"></script>\n    <script src=\"website/assets/vendor.js\"></script>\n    <script src=\"website/assets/app.js\"></script>\n    #if( $input.params('view') == 'admin' )\n        <script src=\"${LexWebUi.Outputs.LoaderScriptUrl}\"></script>\n        <script>\n          var chatbotUiConfig = {\n            ui: {\n                toolbarTitle: 'SageGuard Helper',\n                showDialogStateIcon: false,\n                AllowSuperDangerousHTMLInMessage: true,\n                toolbarColor: \"grey lighten-4 black--text\"\n            },\n            recorder:{\n                enable:false\n            }\n          };\n          var loaderOpts = {\n            baseUrl:\"${LexWebUi.Outputs.LoaderScriptUrl}\".split('/').slice(0,3).join('/'),\n          };\n          var loader = new ChatBotUiLoader.IframeLoader(loaderOpts);\n          window.lex=loader.load(chatbotUiConfig).then(x=>loader)\n          lex.then(x=>x.api.ping())\n        </script>\n    #end\n  </body>\n</html>\n"
                }
              },
              "ResponseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              },
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "ResourceId": {
          "Ref": "WebsiteResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            }
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "WebsiteAPIResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "WebsiteResource"
        },
        "PathPart": "api",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "WebsiteAPIResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n#set ( $userRoot=\"$root/website/api\")\n\n{\"collection\":{\n    \"version\":\"1.0\",\n    \"href\":\"$userRoot\",\n    \"items\":[],\n    \"links\":[{\n            \"href\":\"$userRoot/instances\",\n            \"title\":\"Notebook Instances\",\n            \"prompt\":\"Access your notebook instances\",\n            \"name\":\"instances\",\n            \"render\":\"computer\",\n            \"rel\":\"instances\"\n    },{\n            \"href\":\"$userRoot/messages?view=Users\",\n            \"title\":\"Requests\",\n            \"prompt\":\"Request access from your Admin to notebook instances\",\n            \"name\":\"messages\",\n            \"render\":\"email\",\n            \"rel\":\"messages\"\n    }]\n}}\n\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "ResourceId": {
          "Ref": "WebsiteAPIResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {}
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AdminWebsiteResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "WebsiteResource"
        },
        "PathPart": "admin",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AdminWebsiteResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      {
                        "Fn::GetAtt": [
                          "LoginURLS",
                          "AdminLogin"
                        ]
                      },
                      "'"
                    ]
                  ]
                }
              },
              "StatusCode": "302"
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 302}"
          }
        },
        "ResourceId": {
          "Ref": "AdminWebsiteResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 302,
            "ResponseParameters": {
              "method.response.header.location": true
            }
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AdminWebsiteLogoutResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "AdminWebsiteResource"
        },
        "PathPart": "logout",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "AdminWebsiteLogoutResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      {
                        "Fn::GetAtt": [
                          "LoginURLS",
                          "AdminLogout"
                        ]
                      },
                      "'"
                    ]
                  ]
                }
              },
              "StatusCode": "302"
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 302}"
          }
        },
        "ResourceId": {
          "Ref": "AdminWebsiteLogoutResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 302,
            "ResponseParameters": {
              "method.response.header.location": true
            }
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "UserWebsiteResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "WebsiteResource"
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "UserWebsiteResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      {
                        "Fn::GetAtt": [
                          "LoginURLS",
                          "UserLogin"
                        ]
                      },
                      "'"
                    ]
                  ]
                }
              },
              "StatusCode": "302"
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 302}"
          }
        },
        "ResourceId": {
          "Ref": "UserWebsiteResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 302,
            "ResponseParameters": {
              "method.response.header.location": true
            }
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "UserWebsiteLogoutResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "UserWebsiteResource"
        },
        "PathPart": "logout",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "UserWebsiteLogoutResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      {
                        "Fn::GetAtt": [
                          "LoginURLS",
                          "UserLogout"
                        ]
                      },
                      "'"
                    ]
                  ]
                }
              },
              "StatusCode": "302"
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 302}"
          }
        },
        "ResourceId": {
          "Ref": "UserWebsiteLogoutResource"
        },
        "MethodResponses": [
          {
            "StatusCode": 302,
            "ResponseParameters": {
              "method.response.header.location": true
            }
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "WebsiteAssets": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "WebsiteResource"
        },
        "PathPart": "assets",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "WebsiteAsset": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "WebsiteAssets"
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "WebsiteAssetsAnyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":s3:path/",
                {
                  "Ref": "WebsiteBucket"
                },
                "/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {
          "method.request.path.proxy": false
        },
        "ResourceId": {
          "Ref": "WebsiteAsset"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.content-type": false
            }
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 404
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "WebsiteAssetsAnyHead": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "HEAD",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "HEAD",
          "Credentials": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":s3:path/",
                {
                  "Ref": "WebsiteBucket"
                },
                "/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {
          "method.request.path.proxy": false
        },
        "ResourceId": {
          "Ref": "WebsiteAsset"
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.content-type": false
            }
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 404
          }
        ],
        "RestApiId": {
          "Ref": "API"
        }
      }
    },
    "CognitoAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "IdentitySource": "method.request.header.authorization",
        "Name": "CognitoAuthorizer",
        "ProviderARNs": [
          {
            "Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${QNA.Outputs.UserPool}"
          }
        ],
        "RestApiId": {
          "Ref": "API"
        },
        "Type": "COGNITO_USER_POOLS"
      }
    },
    "ClouddirectoryAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerCredentials": {
          "Fn::GetAtt": [
            "ApiGatewayRole",
            "Arn"
          ]
        },
        "AuthorizerUri": {
          "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIAuthLambda.Arn}/invocations"
        },
        "IdentitySource": "method.request.header.authorization",
        "Name": "ClouddirectoryAuthorizer",
        "AuthorizerResultTtlInSeconds": 0,
        "RestApiId": {
          "Ref": "API"
        },
        "Type": "REQUEST"
      }
    },
    "ClouddirectoryHeaderAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerCredentials": {
          "Fn::GetAtt": [
            "ApiGatewayRole",
            "Arn"
          ]
        },
        "AuthorizerUri": {
          "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIAuthLambda.Arn}/invocations"
        },
        "IdentitySource": "method.request.querystring.Auth",
        "Name": "ClouddirectoryHeaderAuthorizer",
        "AuthorizerResultTtlInSeconds": 0,
        "RestApiId": {
          "Ref": "API"
        },
        "Type": "REQUEST"
      }
    },
    "API": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "Description": "An Api interface for SageMaker Build"
      },
      "DependsOn": []
    },
    "ApiCompression": {
      "Type": "Custom::ApiCompression",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNApiGatewayCompressionLambda",
            "Arn"
          ]
        },
        "restApiId": {
          "Ref": "API"
        },
        "value": "500000"
      }
    },
    "Deployment": {
      "Type": "Custom::ApiDeployment",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNApiGatewayDeploymentLambda",
            "Arn"
          ]
        },
        "restApiId": {
          "Ref": "API"
        },
        "buildDate": "2018-12-30T03:49:15.418Z",
        "stage": {
          "Fn::GetAtt": [
            "Constants",
            "ApiStageName"
          ]
        }
      },
      "DependsOn": [
        "CollectionGet",
        "CollectionPost",
        "CollectionOptions",
        "ItemPut",
        "ItemGet",
        "ItemDelete",
        "ItemOptions",
        "AttachedCollectionOptions",
        "AttachedItemOptions",
        "AttachedCollectionGet",
        "AttachedCollectionPost",
        "AttachedItemDelete",
        "AttachedItemGet",
        "RootGet",
        "ApiResourceGet",
        "attachmentsTemplateGet",
        "bulkTemplateGet",
        "bulkTemplatePost",
        "instanceTemplateGet",
        "instanceUserTemplateGet",
        "instanceUserTemplatePost",
        "instancesTemplateGet",
        "itemsTemplateGet",
        "InstancesLoginGet",
        "InstanceLoginGet",
        "InstanceLoginPost",
        "AuthenticateGet",
        "WebsiteResourceGet",
        "WebsiteAPIResourceGet",
        "AdminWebsiteResourceGet",
        "AdminWebsiteLogoutResourceGet",
        "UserWebsiteResourceGet",
        "UserWebsiteLogoutResourceGet",
        "WebsiteAssetsAnyGet",
        "WebsiteAssetsAnyHead",
        "APIAuthLambda",
        "APICloudDirectoryAttachLambda",
        "APICloudDirectoryAttachPolicyLambda",
        "APICloudDirectoryAttachmentClearLambda",
        "APICloudDirectoryAttachmentListLambda",
        "APICloudDirectoryDetachLambda",
        "APICloudDirectoryDetachPolicyLambda",
        "APICloudDirectoryIndexListLambda",
        "APICloudDirectoryObjectCreateLambda",
        "APICloudDirectoryObjectDeleteLambda",
        "APICloudDirectoryObjectGetLambda",
        "APICloudDirectoryObjectUpdateLambda",
        "APICloudDirectoryPolicyClearLambda",
        "APICloudDirectoryPolicyListLambda",
        "APIFailLambda",
        "APIInstanceCreateLambda",
        "APIInstanceDeleteLambda",
        "APIInstanceDeleteWaitLambda",
        "APIInstanceGetLambda",
        "APIInstanceListLambda",
        "APIInstancePostStateLambda",
        "APIInstanceRedirectLambda",
        "APIInstanceStartStopLambda",
        "APIInstanceUpdateLambda",
        "APIOptionsLambda",
        "APIRouterLambda",
        "APIUserCreateLambda",
        "APIUserDeleteLambda",
        "APIUserGetLambda",
        "APIUserUpdateLambda"
      ]
    },
    "Stage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": [
        "Messages"
      ],
      "Properties": {
        "DeploymentId": {
          "Ref": "Deployment"
        },
        "RestApiId": {
          "Ref": "API"
        },
        "StageName": {
          "Fn::GetAtt": [
            "Constants",
            "ApiStageName"
          ]
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "Variables": {
          "UserPool": {
            "Fn::GetAtt": [
              "QNA",
              "Outputs.UserPool"
            ]
          },
          "Region": {
            "Ref": "AWS::Region"
          },
          "DirectoryArn": {
            "Ref": "Directory"
          },
          "SchemaArn": {
            "Fn::GetAtt": [
              "Directory",
              "AppliedSchemaArn"
            ]
          },
          "APIAuthLambda": {
            "Fn::GetAtt": [
              "APIAuthLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryAttachLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryAttachLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryAttachPolicyLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryAttachPolicyLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryAttachmentClearLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryAttachmentClearLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryAttachmentListLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryAttachmentListLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryDetachLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryDetachLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryDetachPolicyLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryDetachPolicyLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryIndexListLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryIndexListLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryObjectCreateLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryObjectCreateLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryObjectDeleteLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryObjectDeleteLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryObjectGetLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryObjectGetLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryObjectUpdateLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryObjectUpdateLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryPolicyClearLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryPolicyClearLambda",
              "Arn"
            ]
          },
          "APICloudDirectoryPolicyListLambda": {
            "Fn::GetAtt": [
              "APICloudDirectoryPolicyListLambda",
              "Arn"
            ]
          },
          "APIFailLambda": {
            "Fn::GetAtt": [
              "APIFailLambda",
              "Arn"
            ]
          },
          "APIInstanceCreateLambda": {
            "Fn::GetAtt": [
              "APIInstanceCreateLambda",
              "Arn"
            ]
          },
          "APIInstanceDeleteLambda": {
            "Fn::GetAtt": [
              "APIInstanceDeleteLambda",
              "Arn"
            ]
          },
          "APIInstanceDeleteWaitLambda": {
            "Fn::GetAtt": [
              "APIInstanceDeleteWaitLambda",
              "Arn"
            ]
          },
          "APIInstanceGetLambda": {
            "Fn::GetAtt": [
              "APIInstanceGetLambda",
              "Arn"
            ]
          },
          "APIInstanceListLambda": {
            "Fn::GetAtt": [
              "APIInstanceListLambda",
              "Arn"
            ]
          },
          "APIInstancePostStateLambda": {
            "Fn::GetAtt": [
              "APIInstancePostStateLambda",
              "Arn"
            ]
          },
          "APIInstanceRedirectLambda": {
            "Fn::GetAtt": [
              "APIInstanceRedirectLambda",
              "Arn"
            ]
          },
          "APIInstanceStartStopLambda": {
            "Fn::GetAtt": [
              "APIInstanceStartStopLambda",
              "Arn"
            ]
          },
          "APIInstanceUpdateLambda": {
            "Fn::GetAtt": [
              "APIInstanceUpdateLambda",
              "Arn"
            ]
          },
          "APIOptionsLambda": {
            "Fn::GetAtt": [
              "APIOptionsLambda",
              "Arn"
            ]
          },
          "APIRouterLambda": {
            "Fn::GetAtt": [
              "APIRouterLambda",
              "Arn"
            ]
          },
          "APIUserCreateLambda": {
            "Fn::GetAtt": [
              "APIUserCreateLambda",
              "Arn"
            ]
          },
          "APIUserDeleteLambda": {
            "Fn::GetAtt": [
              "APIUserDeleteLambda",
              "Arn"
            ]
          },
          "APIUserGetLambda": {
            "Fn::GetAtt": [
              "APIUserGetLambda",
              "Arn"
            ]
          },
          "APIUserUpdateLambda": {
            "Fn::GetAtt": [
              "APIUserUpdateLambda",
              "Arn"
            ]
          }
        }
      }
    },
    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGatewayCloudWatchLogsRole",
            "Arn"
          ]
        }
      }
    },
    "CFNApiGatewayCompressionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.maxRetries=10\naws.config.region=process.env.AWS_REGION\nvar api=new aws.APIGateway()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    if(event.RequestType===\"Create\" || event.RequestType===\"Update\"){\n        var value=params.value\n    }else{\n        var value=null\n    }\n    api.updateRestApi({\n        restApiId:params.restApiId,\n        patchOperations:[{\n            op:\"replace\",\n            path:\"/minimumCompressionSize\",\n            value:value\n        }]\n    }).promise()\n    .then(x=>response.send(event, context, response.SUCCESS))\n    .catch(error=>{\n        console.log(error)\n        response.send(event, context, response.FAILED)\n    })\n}\n    \n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNApiGatewayDeploymentLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.maxRetries=10\naws.config.region=process.env.AWS_REGION\nvar api=new aws.APIGateway()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    if(event.RequestType===\"Create\"){\n        delete params.buildDate\n        delete params.stage\n\n        run(()=>api.createDeployment(params).promise())\n        .then(result=>send(\"SUCCESS\",{},result.id))\n        .catch(error)\n    }else if(event.RequestType===\"Update\"){\n        var stage=params.stage\n        delete params.buildDate\n        delete params.stage\n\n        new Promise(function(res,rej){\n            run(()=>api.createDeployment(params).promise())\n            .then(result=>setTimeout(()=>res(result.id),2000))\n            .catch(rej)\n        })\n        .then(id=>run(()=>api.updateStage({\n                restApiId:params.restApiId,\n                stageName:stage,\n                patchOperations:[{\n                    op:\"replace\",\n                    path:\"/deploymentId\",\n                    value:id\n                }]\n            }).promise()\n            .then(()=>send(\"SUCCESS\",{},id))\n        ))\n        .catch(error)\n    }else{\n        run(()=>api.deleteDeployment({\n            deploymentId:event.PhysicalResourceId,\n            restApiId:params.restApiId\n        }).promise())\n        .then(id=>send(\"SUCCESS\",{},event.PhysicalResourceId))\n        .catch(error)\n    }\n\n    function error(e){\n        console.log(e)\n        send(\"FAILED\",{},event.id,e.toString())\n    }\n    function send(responseStatus, responseData, physicalResourceId,reason) {\n        var responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason:reason,\n            PhysicalResourceId: physicalResourceId || context.logStreamName,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            Data: responseData\n        });\n     \n        console.log(\"Response body:\\n\", responseBody);\n     \n        var https = require(\"https\");\n        var url = require(\"url\");\n     \n        var parsedUrl = url.parse(event.ResponseURL);\n        var options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n     \n        var request = https.request(options, function(response) {\n            console.log(\"Status code: \" + response.statusCode);\n            console.log(\"Status message: \" + response.statusMessage);\n            context.done();\n        });\n     \n        request.on(\"error\", function(error) {\n            console.log(\"send(..) failed executing https.request(..): \" + error);\n            context.done();\n        });\n     \n        request.write(responseBody);\n        request.end();\n    }\n}\n\n\nfunction run(fnc){\n    return new Promise(function(res,rej){\n        console.log(\"starting\")\n        function next(count){\n            console.log(\"tries left:\"+count)\n            if(count>0){\n                fnc()\n                .then(res)\n                .catch(x=>{\n                    if(x.statusCode===429){\n                        console.log(\"retry in \"+x.retryDelay)\n                        setTimeout(()=>next(--count),x.retryDelay*1000)\n                    }else{\n                        rej(x)\n                    }\n                })\n            }else{\n                rej(\"timeout\")\n            }\n        }\n        next(10)\n    })\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCloudDirectoryDirectoryLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar https = require(\"https\");\nvar url = require(\"url\");\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar clouddirectory=new aws.CloudDirectory()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    \n    new Promise(function(res,rej){\n        if(event.RequestType===\"Create\" || event.RequestType===\"Update\"){\n            return clouddirectory.createDirectory(params).promise()\n            .then(function(result){\n                send(\"SUCCESS\",result,result.DirectoryArn)\n                res()\n            })\n        }else if(event.RequestType===\"Delete\"){\n            return clouddirectory.disableDirectory({\n                DirectoryArn:event.PhysicalResourceId\n            }).promise()\n            .then(()=>clouddirectory.deleteDirectory({\n                DirectoryArn:event.PhysicalResourceId\n            }).promise())\n            .then(function(){\n                send(\"SUCCESS\",{},event.PhysicalResourceId)\n                res()\n            }).catch(rej)\n        }\n    })\n    .catch(function(e){\n        console.log(e)\n        send(\"FAILED\",{},event.PhysicalResourceId,e.toString())\n    })\n\n    function send(responseStatus, responseData, physicalResourceId,reason) {\n     \n        var responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason:reason,\n            PhysicalResourceId: physicalResourceId || context.logStreamName,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            Data: responseData\n        });\n     \n        console.log(\"Response body:\\n\", responseBody);\n     \n        var https = require(\"https\");\n        var url = require(\"url\");\n     \n        var parsedUrl = url.parse(event.ResponseURL);\n        var options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n     \n        var request = https.request(options, function(response) {\n            console.log(\"Status code: \" + response.statusCode);\n            console.log(\"Status message: \" + response.statusMessage);\n            context.done();\n        });\n     \n        request.on(\"error\", function(error) {\n            console.log(\"send(..) failed executing https.request(..): \" + error);\n            context.done();\n        });\n     \n        request.write(responseBody);\n        request.end();\n    }\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCloudDirectoryIndexLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar https = require(\"https\");\nvar url = require(\"url\");\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar clouddirectory=new aws.CloudDirectory()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    \n    new Promise(function(res,rej){\n        if(event.RequestType===\"Create\" || event.RequestType===\"Update\"){\n            params.IsUnique=params.IsUnique===\"true\"\n            return clouddirectory.createIndex(params)\n            .promise()\n            .then(function(result){\n                send(\"SUCCESS\",result,result.ObjectIdentifier)\n                res()\n            })\n            .catch(rej)\n        }else if(event.RequestType===\"Delete\"){\n            send(\"SUCCESS\",{},event.PhysicalResourceId)\n            res()\n        }\n    })\n    .catch(function(e){\n        console.log(e)\n        send(\"FAILED\",{},event.PhysicalResourceId,e.toString())\n    })\n\n    function send(responseStatus, responseData, physicalResourceId,reason) {\n     \n        var responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason:reason,\n            PhysicalResourceId: physicalResourceId || context.logStreamName,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            Data: responseData\n        });\n     \n        console.log(\"Response body:\\n\", responseBody);\n     \n        var https = require(\"https\");\n        var url = require(\"url\");\n     \n        var parsedUrl = url.parse(event.ResponseURL);\n        var options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n     \n        var request = https.request(options, function(response) {\n            console.log(\"Status code: \" + response.statusCode);\n            console.log(\"Status message: \" + response.statusMessage);\n            context.done();\n        });\n     \n        request.on(\"error\", function(error) {\n            console.log(\"send(..) failed executing https.request(..): \" + error);\n            context.done();\n        });\n     \n        request.write(responseBody);\n        request.end();\n    }\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCloudDirectoryObjectLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar https = require(\"https\");\nvar url = require(\"url\");\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar clouddirectory=new aws.CloudDirectory()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    \n    new Promise(function(res,rej){\n        if(event.RequestType===\"Create\" || event.RequestType===\"Update\"){\n            return clouddirectory.createObject(params).promise()\n            .then(function(result){\n                send(\"SUCCESS\",result,result.ObjectIdentifier)\n                res()\n            })\n        }else if(event.RequestType===\"Delete\"){\n            send(\"SUCCESS\",{},event.PhysicalResourceId)\n            res()\n        }\n    })\n    .catch(function(e){\n        console.log(e)\n        send(\"FAILED\",{},event.PhysicalResourceId,e.toString())\n    })\n\n    function send(responseStatus, responseData, physicalResourceId,reason) {\n     \n        var responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason:reason,\n            PhysicalResourceId: physicalResourceId || context.logStreamName,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            Data: responseData\n        });\n     \n        console.log(\"Response body:\\n\", responseBody);\n     \n        var https = require(\"https\");\n        var url = require(\"url\");\n     \n        var parsedUrl = url.parse(event.ResponseURL);\n        var options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n     \n        var request = https.request(options, function(response) {\n            console.log(\"Status code: \" + response.statusCode);\n            console.log(\"Status message: \" + response.statusMessage);\n            context.done();\n        });\n     \n        request.on(\"error\", function(error) {\n            console.log(\"send(..) failed executing https.request(..): \" + error);\n            context.done();\n        });\n     \n        request.write(responseBody);\n        request.end();\n    }\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCloudDirectoryPublishSchemaLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar https = require(\"https\");\nvar url = require(\"url\");\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar clouddirectory=new aws.CloudDirectory()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    \n    new Promise(function(res,rej){\n        if(event.RequestType===\"Create\"){\n            return clouddirectory.publishSchema(params).promise()\n            .then(x=>res(x.PublishedSchemaArn)).catch(rej)\n        }else if(event.RequestType===\"Update\"){\n            return clouddirectory.publishSchema(params).promise()\n            .then(x=>res(x.PublishedSchemaArn)).catch(rej)\n        }else if(event.RequestType===\"Delete\"){\n            return clouddirectory.deleteSchema({\n                SchemaArn:event.PhysicalResourceId\n            }).promise()\n            .then(x=>res(event.PhysicalResourceId)).catch(rej)\n        }\n    })\n    .then(arn=>send(\"SUCCESS\",{},arn))\n    .catch(function(e){\n        console.log(e)\n        send(\"FAILED\",{},event.PhysicalResourceId,e.toString())\n    })\n\n    function send(responseStatus, responseData, physicalResourceId,reason) {\n     \n        var responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason:reason,\n            PhysicalResourceId: physicalResourceId || context.logStreamName,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            Data: responseData\n        });\n     \n        console.log(\"Response body:\\n\", responseBody);\n     \n        var https = require(\"https\");\n        var url = require(\"url\");\n     \n        var parsedUrl = url.parse(event.ResponseURL);\n        var options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n     \n        var request = https.request(options, function(response) {\n            console.log(\"Status code: \" + response.statusCode);\n            console.log(\"Status message: \" + response.statusMessage);\n            context.done();\n        });\n     \n        request.on(\"error\", function(error) {\n            console.log(\"send(..) failed executing https.request(..): \" + error);\n            context.done();\n        });\n     \n        request.write(responseBody);\n        request.end();\n    }\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCloudDirectorySchemaLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar https = require(\"https\");\nvar url = require(\"url\");\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar clouddirectory=new aws.CloudDirectory()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    \n    new Promise(function(res,rej){\n        if(event.RequestType===\"Create\"){\n            return clouddirectory.createSchema({\n                Name:params.Name\n            }).promise()\n            .then(result=>clouddirectory.putSchemaFromJson({\n                SchemaArn:result.SchemaArn,\n                Document:params.Schema\n            }).promise())\n            .then(x=>res(x.Arn)).catch(rej)\n        }else if(event.RequestType===\"Update\"){\n            return clouddirectory.updateSchema({\n                SchemaArn:event.PhysicalResourceId,\n                Name:params.Name\n            }).promise()\n            .then(()=>clouddirectory.putSchemaFromJson({\n                SchemaArn:event.PhysicalResourceId,\n                Document:params.Schema\n            }).promise())\n            .then(x=>res(x.Arn)).catch(rej)\n        }else if(event.RequestType===\"Delete\"){\n            return clouddirectory.deleteSchema({\n                SchemaArn:event.PhysicalResourceId\n            }).promise()\n            .then(x=>res(event.PhysicalResourceId)).catch(rej)\n        }\n    })\n    .then(arn=>send(\"SUCCESS\",{},arn))\n    .catch(function(e){\n        console.log(e)\n        send(\"FAILED\",{},event.PhysicalResourceId,e.toString())\n    })\n\n    function send(responseStatus, responseData, physicalResourceId,reason) {\n     \n        var responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason:reason,\n            PhysicalResourceId: physicalResourceId || context.logStreamName,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            Data: responseData\n        });\n     \n        console.log(\"Response body:\\n\", responseBody);\n     \n        var https = require(\"https\");\n        var url = require(\"url\");\n     \n        var parsedUrl = url.parse(event.ResponseURL);\n        var options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n     \n        var request = https.request(options, function(response) {\n            console.log(\"Status code: \" + response.statusCode);\n            console.log(\"Status message: \" + response.statusMessage);\n            context.done();\n        });\n     \n        request.on(\"error\", function(error) {\n            console.log(\"send(..) failed executing https.request(..): \" + error);\n            context.done();\n        });\n     \n        request.write(responseBody);\n        request.end();\n    }\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCognitoDomainLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar cognito=new aws.CognitoIdentityServiceProvider()\nvar crypto=require('crypto')\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    if(event.RequestType===\"Create\"){\n        var name=generate()\n        cognito.createUserPoolDomain({\n            Domain:name,\n            UserPoolId:params.UserPool\n        }).promise()    \n        .then(x=>response.send(event, context, response.SUCCESS,{\n             \n        },name))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else if(event.RequestType===\"Delete\"){\n        var name=event.PhysicalResourceId\n        cognito.deleteUserPoolDomain({\n            Domain:name,\n            UserPoolId:params.UserPool\n        }).promise()\n        .then(x=>response.send(event, context, response.SUCCESS,{},name))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\nfunction generate(){\n    return crypto.randomBytes(16)\n        .toString('base64')\n        .replace(/=|\\/|\\+/g,'')\n        .toLowerCase()\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCognitoLoginLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar cognito=new aws.CognitoIdentityServiceProvider()\nvar crypto=require('crypto')\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    if(event.RequestType!==\"Delete\"){\n        var url=params.CallbackUrl\n        \n        return cognito.updateUserPoolClient({\n            ClientId:params.ClientId,\n            UserPoolId:params.UserPool,\n            CallbackURLs:params.LoginCallbackUrls,\n            LogoutURLs:[],\n            RefreshTokenValidity:1,\n            SupportedIdentityProviders:['COGNITO'],\n            AllowedOAuthFlows:params.OAuthFlows,\n            AllowedOAuthScopes:['phone', 'email', 'openid', 'profile'],\n            AllowedOAuthFlowsUserPoolClient:true\n        }).promise()\n        .then(()=>response.send(event, context, response.SUCCESS,{url}))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n\n\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCognitoMFALambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar cognito=new aws.CognitoIdentityServiceProvider()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    \n    if(event.RequestType!==\"Delete\"){\n        \n        cognito.adminSetUserMFAPreference({\n            UserPoolId:params.UserPoolId,\n            Username:params.Username,\n            SMSMfaSettings:{\n                Enabled:true,\n                PreferredMfa:true\n            }\n        }).promise()    \n        .then(x=>response.send(event, context, response.SUCCESS))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCognitoPoolUpdateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar cognito=new aws.CognitoIdentityServiceProvider()\nvar crypto=require('crypto')\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    params.AdminCreateUserConfig.AllowAdminCreateUserOnly=params.AdminCreateUserConfig.AllowAdminCreateUserOnly===\"true\"\n\n    if(event.RequestType!==\"Delete\"){\n        cognito.updateUserPool(params).promise()    \n        .then(x=>response.send(event, context, response.SUCCESS,{\n        }))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCognitoRoleAttachmentLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar https = require(\"https\");\nvar url = require(\"url\");\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar cognito=new aws.CognitoIdentity()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    \n    new Promise(function(res,rej){\n        if(event.RequestType===\"Create\" || event.RequestType===\"Update\"){\n            var RoleMappings={}\n            params.RoleMappings.map(function(x){\n                var id=\"cognito-idp.us-east-1.amazonaws.com/\"+x.UserPool+':'+x.ClientId\n                delete x.ClientId\n                delete x.UserPool\n                RoleMappings[id]=x\n            })\n\n            cognito.getIdentityPoolRoles({\n                IdentityPoolId:params.IdentityPoolId\n            }).promise()\n            .then(function(result){\n                result.Roles=Object.assign(result.Roles || {},params.Roles)\n                result.RoleMappings=Object.assign(result.RoleMappings || {},RoleMappings)\n                console.log(result)\n\n                return cognito.setIdentityPoolRoles(result).promise()\n            })\n            .then(function(result){\n                send(\"SUCCESS\",result,result.ObjectIdentifier)\n                res()\n            })\n        }else if(event.RequestType===\"Delete\"){\n            send(\"SUCCESS\",{},event.PhysicalResourceId)\n            res()\n        }\n    })\n    .catch(function(e){\n        console.log(e)\n        send(\"FAILED\",{},event.PhysicalResourceId,e.toString())\n    })\n\n    function send(responseStatus, responseData, physicalResourceId,reason) {\n     \n        var responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason:reason,\n            PhysicalResourceId: physicalResourceId || context.logStreamName,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            Data: responseData\n        });\n     \n        console.log(\"Response body:\\n\", responseBody);\n     \n        var https = require(\"https\");\n        var url = require(\"url\");\n     \n        var parsedUrl = url.parse(event.ResponseURL);\n        var options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n     \n        var request = https.request(options, function(response) {\n            console.log(\"Status code: \" + response.statusCode);\n            console.log(\"Status message: \" + response.statusMessage);\n            context.done();\n        });\n     \n        request.on(\"error\", function(error) {\n            console.log(\"send(..) failed executing https.request(..): \" + error);\n            context.done();\n        });\n     \n        request.write(responseBody);\n        request.end();\n    }\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNCognitoUILambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar _=require('lodash')\nvar s3=new aws.S3()\nvar cognito=new aws.CognitoIdentityServiceProvider()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    if(event.RequestType!==\"Delete\"){\n        s3.getObject(params.ImageFile).promise()\n        .then(x=>{\n            console.log(x)\n            return cognito.setUICustomization(\n            Object.assign(\n                _.omit(params,[\"ImageFile\"]),\n                {ImageFile:x.Body}\n            )\n            ).promise()\n        })\n        .then(()=>response.send(event, context, response.SUCCESS))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n\n\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNElasticSearchArnLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar es = new aws.ES();\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n\n    if(event.RequestType!==\"Delete\"){\n        var name=params.endpoint.match(/search-(.*)-.*\\..*\\.es/)[1]\n        console.log(name)\n        es.describeElasticsearchDomain({\n            DomainName:name\n        }).promise()\n        .then(x=>response.send(event, context, response.SUCCESS,x.DomainStatus,name))\n        .catch(x=>{\n            console.log(x)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNEncodeURIComponentLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    response.send(event, context, response.SUCCESS,{\n        value:encodeURIComponent(params.value)   \n    })\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNLexWebUICSSLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    delete params.Version\n    try{\n        if(event.RequestType!==\"Delete\"){\n            var dst_bucket=params.URL.match(/https:\\/\\/(.*)\\.s3.*/)[1]\n            var src_bucket=params.Bucket\n            var index=params.Index\n            var css=params.CSS\n            console.log({\n                    Bucket:dst_bucket,\n                    Key:\"index.html\",\n                    CopySource:`/${src_bucket}/${index}`,\n                    ACL:\"public-read\"\n                })\n            Promise.all([\n                s3.copyObject({\n                    Bucket:dst_bucket,\n                    Key:\"index.html\",\n                    CopySource:`/${src_bucket}/${index}`,\n                    ACL:\"public-read\"\n                }).promise(),\n                s3.copyObject({\n                    Bucket:dst_bucket,\n                    Key:\"custom.css\",\n                    CopySource:`/${src_bucket}/${css}`,\n                    ACL:\"public-read\"\n                }).promise()\n            ])\n            .then(console.log)\n            .then(()=>response.send(event, context, response.SUCCESS))\n            .catch(e=>{\n                console.log(e)\n                response.send(event, context, response.FAILED)\n            })\n        }else{\n            response.send(event, context, response.SUCCESS)\n        }\n    }catch(e){\n        console.log(e)\n        response.send(event, context, response.FAILED)\n    }\n}   \n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNQnABotImportLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\nvar URL=require('url')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    var url=URL.parse(params.QnABotUrl)\n    var host=url.host\n    var api=url.path.split('/')[1]\n\n    if(event.RequestType!==\"Delete\"){\n        var Body=params.content.qna\n            .map(x=>JSON.stringify(x))\n            .join('\\n')\n        send({\n            host,\n            path:`/${api}/`,\n        })\n        .then(result=>{\n            var path=URL.parse(result._links.jobs.href).path\n            return send({host,path})\n        })\n        .then(result=>{\n            var bucket=result._links.imports.bucket\n            var key=`${result._links.imports.uploadPrefix}/${event.RequestId}`\n            return s3.putObject({\n                Bucket:bucket,\n                Key:key,\n                Body:Body\n            }).promise()\n        })\n        .then(result=>{\n            console.log(result)\n            response.send(event, context, response.SUCCESS)\n        })\n        .catch(e=>{\n            console.log(e)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\nfunction send(opts){\n    console.log(opts)\n    return new Promise(function(resolve,reject){\n    try{\n        var endpoint = new aws.Endpoint(opts.host);\n\n        var request = new aws.HttpRequest(endpoint, aws.config.region);\n        \n        request.method=opts.method || \"GET\"\n        request.path=opts.path\n        request.headers['Host'] = opts.host;\n        if(opts.body){\n            request.body=JSON.stringify(opts.body)\n        }\n        request.headers['Content-Type'] = 'application/json';\n\n        (new aws.CredentialProviderChain())\n        .resolvePromise()\n        .then(credentials=>{\n            var signer = new aws.Signers.V4(request,\"execute-api\");\n            signer.addAuthorization(credentials, new Date());\n            console.log(request)\n            var client = new aws.HttpClient();\n            client.handleRequest(request, null, function(response) {\n                console.log(response.statusCode + ' ' + response.statusMessage);\n                var responseBody = '';\n                response.on('data', function (chunk) {\n                    responseBody += chunk;\n                });\n                response.on('end', function (chunk) {\n                    console.log('Response body: ' + responseBody);\n                    resolve(JSON.parse(responseBody)) \n                });\n              }, function(error) {\n                console.log('Error: ' + error);\n                reject(error)\n            });\n        })\n    }catch(e){\n        console.log(e)\n        reject(e)\n    }})\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNS3ClearLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    if(event.RequestType===\"Delete\"){\n        new Promise(function(res,rej){\n            function next(){\n                s3.listObjectVersions({\n                    Bucket:params.Bucket,\n                    Prefix:params.Prefix\n                }).promise()\n                .then(x=>x.Versions.concat(x.DeleteMarkers))\n                .then(function(files){\n                    return files.map(file=>{return {\n                        Key:file.Key,\n                        VersionId:file.VersionId\n                    }  })\n                })\n                .then(function(keys){\n                    if(keys.length>0){ \n                        return s3.deleteObjects({\n                            Bucket:params.Bucket,\n                            Delete:{\n                                Objects:keys\n                            }\n                        }).promise()\n                        .then(()=>next())\n                        .catch(rej)\n                    }else{\n                        res()\n                    }\n                })\n            }\n            next()\n        })\n        .then(()=>response.send(event, context, response.SUCCESS))\n        .catch(e=>{\n            console.log(e)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}   \n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNS3VersionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    if(event.RequestType!==\"Delete\"){\n        s3.headObject({\n            Bucket:params.Bucket,\n            Key:params.Key\n        }).promise()\n        .then(result=>response.send(event, context, response.SUCCESS,{},result.VersionId))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ]
      }
    },
    "CFNUnzipLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var cfnLambda=require('cfn-lambda')\nvar Promise=require('bluebird')\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\naws.config.setPromisesDependency(Promise)\nvar s3=new aws.S3()\nvar mime = require('mime-types')\n\nvar JSZip=require('jszip')\nJSZip.external.Promise = Promise;\nvar jszip=new JSZip()\n\nexports.handler=cfnLambda({\n    Create:function Create(params,reply){\n        console.log(\"params\",params)\n\n        getFiles(params)\n        .map(function(file){\n            var type=mime.lookup(file)\n            console.log(file+':'+type)\n            \n            return jszip.file(file).async('nodebuffer')\n            .then(function(content){\n                var param={\n                    Bucket:params.DstBucket,\n                    Key:file,\n                    Body:content,\n                    ContentType:type ? type : null\n                }\n                console.log(param)\n                return s3.putObject(param).promise()\n            })\n        })\n        .map(console.log)\n        .then(()=>reply(null,params.SrcBucket+'/'+params.Key) )\n        .catch(err=>reply(err,params.SrcBucket+'/'+params.Key) )\n    },\n    Update:function Update(ID,params,oldparams,reply){\n        this.Create(params,reply)\n    },\n    Delete:function Delete(ID,params,reply){\n        reply(null,ID,null)\n    }\n})\n\nfunction getFiles(params){\n    var param={\n        Bucket:params.SrcBucket,\n        Key:params.Key\n    }\n    console.log(\"get param\",param)\n    return s3.getObject(param).promise()\n    .get(\"Body\")\n    .then(function(buff){\n        return jszip.loadAsync(buff)\n        .get('files')\n        .then(function(files){\n            return Object.keys(files)\n                .map(key=>files[key])\n                .filter(file=>!file.dir)\n                .map(file=>file.name)\n        })\n        .tap(console.log)\n    })\n}\n\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNVariableLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar crypto = require('crypto');\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n    var hash = crypto.createHash('md5').update(JSON.stringify(params)).digest('hex');\n\n\n    response.send(event, context, response.SUCCESS,params,hash)\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource"
          }
        ],
        "Layers": [
          {
            "Ref": "UtilLambdaLayer"
          }
        ]
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
          "arn:aws:iam::aws:policy/AWSLambdaFullAccess",
          "arn:aws:iam::aws:policy/AmazonCloudDirectoryFullAccess",
          "arn:aws:iam::aws:policy/AmazonCognitoPowerUser",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator",
          "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*",
                    "s3:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:*",
                    "es:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CFNLambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:*",
                "es:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "DevSchema": {
      "Type": "Custom::CloudDirectorySchema",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectorySchemaLambda",
            "Arn"
          ]
        },
        "Schema": "{\"sourceSchemaArn\":\"\",\"facets\":{\"groups\":{\"objectType\":\"NODE\",\"facetAttributes\":{\"ID\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":true,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"REQUIRED_ALWAYS\"},\"DisplayName\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":false,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"NOT_REQUIRED\"},\"Description\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":false,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"NOT_REQUIRED\"}}},\"users\":{\"objectType\":\"LEAF_NODE\",\"facetAttributes\":{\"ID\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":true,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"REQUIRED_ALWAYS\"},\"email\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":false,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"REQUIRED_ALWAYS\"},\"phone_number\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":false,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"REQUIRED_ALWAYS\"}}},\"instances\":{\"objectType\":\"POLICY\",\"facetAttributes\":{\"ID\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":true,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"REQUIRED_ALWAYS\"},\"DisplayName\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":false,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"NOT_REQUIRED\"},\"Description\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":false,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"NOT_REQUIRED\"},\"StackName\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":true,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"NOT_REQUIRED\"}}},\"Root\":{\"objectType\":\"NODE\",\"facetAttributes\":{\"Type\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":true,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"REQUIRED_ALWAYS\"}}}},\"typedLinkFacets\":{\"Attachment\":{\"facetAttributes\":{\"TargetType\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":true,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"REQUIRED_ALWAYS\"},\"SourceType\":{\"attributeDefinition\":{\"attributeType\":\"STRING\",\"isImmutable\":true,\"attributeRules\":{\"nameLength\":{\"parameters\":{\"min\":\"0\",\"max\":\"256\"},\"ruleType\":\"STRING_LENGTH\"}}},\"requiredBehavior\":\"REQUIRED_ALWAYS\"}},\"identityAttributeOrder\":[\"SourceType\",\"TargetType\"]}}}",
        "Name": {
          "Fn::Sub": "schema-${AWS::StackName}"
        }
      }
    },
    "PubSchema": {
      "Type": "Custom::CloudDirectoryPublishedSchema",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryPublishSchemaLambda",
            "Arn"
          ]
        },
        "DevelopmentSchemaArn": {
          "Ref": "DevSchema"
        },
        "Version": "1"
      }
    },
    "Directory": {
      "Type": "Custom::CloudDirectoryDirectory",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryDirectoryLambda",
            "Arn"
          ]
        },
        "SchemaArn": {
          "Ref": "PubSchema"
        },
        "Name": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "RootIndex": {
      "Type": "Custom::CloudDirectoryObject",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryObjectLambda",
            "Arn"
          ]
        },
        "DirectoryArn": {
          "Fn::GetAtt": [
            "Directory",
            "DirectoryArn"
          ]
        },
        "SchemaFacets": [
          {
            "FacetName": "Root",
            "SchemaArn": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            }
          }
        ],
        "LinkName": "index",
        "ObjectAttributeList": [
          {
            "Key": {
              "FacetName": "Root",
              "Name": "Type",
              "SchemaArn": {
                "Fn::GetAtt": [
                  "Directory",
                  "AppliedSchemaArn"
                ]
              }
            },
            "Value": {
              "StringValue": "index"
            }
          }
        ],
        "ParentReference": {
          "Selector": "/"
        }
      }
    },
    "usersRoot": {
      "Type": "Custom::CloudDirectoryObject",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryObjectLambda",
            "Arn"
          ]
        },
        "DirectoryArn": {
          "Fn::GetAtt": [
            "Directory",
            "DirectoryArn"
          ]
        },
        "SchemaFacets": [
          {
            "FacetName": "Root",
            "SchemaArn": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            }
          }
        ],
        "LinkName": "users",
        "ObjectAttributeList": [
          {
            "Key": {
              "FacetName": "Root",
              "Name": "Type",
              "SchemaArn": {
                "Fn::GetAtt": [
                  "Directory",
                  "AppliedSchemaArn"
                ]
              }
            },
            "Value": {
              "StringValue": "users"
            }
          }
        ],
        "ParentReference": {
          "Selector": "/"
        }
      }
    },
    "usersIndex": {
      "Type": "Custom::CloudDirIndex",
      "DependsOn": [
        "RootIndex"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryIndexLambda",
            "Arn"
          ]
        },
        "DirectoryArn": {
          "Fn::GetAtt": [
            "Directory",
            "DirectoryArn"
          ]
        },
        "LinkName": "users",
        "ParentReference": {
          "Selector": "/index"
        },
        "IsUnique": true,
        "OrderedIndexedAttributeList": [
          {
            "FacetName": "users",
            "Name": "ID",
            "SchemaArn": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            }
          }
        ]
      }
    },
    "groupsRoot": {
      "Type": "Custom::CloudDirectoryObject",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryObjectLambda",
            "Arn"
          ]
        },
        "DirectoryArn": {
          "Fn::GetAtt": [
            "Directory",
            "DirectoryArn"
          ]
        },
        "SchemaFacets": [
          {
            "FacetName": "Root",
            "SchemaArn": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            }
          }
        ],
        "LinkName": "groups",
        "ObjectAttributeList": [
          {
            "Key": {
              "FacetName": "Root",
              "Name": "Type",
              "SchemaArn": {
                "Fn::GetAtt": [
                  "Directory",
                  "AppliedSchemaArn"
                ]
              }
            },
            "Value": {
              "StringValue": "groups"
            }
          }
        ],
        "ParentReference": {
          "Selector": "/"
        }
      }
    },
    "groupsIndex": {
      "Type": "Custom::CloudDirIndex",
      "DependsOn": [
        "RootIndex"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryIndexLambda",
            "Arn"
          ]
        },
        "DirectoryArn": {
          "Fn::GetAtt": [
            "Directory",
            "DirectoryArn"
          ]
        },
        "LinkName": "groups",
        "ParentReference": {
          "Selector": "/index"
        },
        "IsUnique": true,
        "OrderedIndexedAttributeList": [
          {
            "FacetName": "groups",
            "Name": "ID",
            "SchemaArn": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            }
          }
        ]
      }
    },
    "instancesRoot": {
      "Type": "Custom::CloudDirectoryObject",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryObjectLambda",
            "Arn"
          ]
        },
        "DirectoryArn": {
          "Fn::GetAtt": [
            "Directory",
            "DirectoryArn"
          ]
        },
        "SchemaFacets": [
          {
            "FacetName": "Root",
            "SchemaArn": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            }
          }
        ],
        "LinkName": "instances",
        "ObjectAttributeList": [
          {
            "Key": {
              "FacetName": "Root",
              "Name": "Type",
              "SchemaArn": {
                "Fn::GetAtt": [
                  "Directory",
                  "AppliedSchemaArn"
                ]
              }
            },
            "Value": {
              "StringValue": "instances"
            }
          }
        ],
        "ParentReference": {
          "Selector": "/"
        }
      }
    },
    "instancesIndex": {
      "Type": "Custom::CloudDirIndex",
      "DependsOn": [
        "RootIndex"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCloudDirectoryIndexLambda",
            "Arn"
          ]
        },
        "DirectoryArn": {
          "Fn::GetAtt": [
            "Directory",
            "DirectoryArn"
          ]
        },
        "LinkName": "instances",
        "ParentReference": {
          "Selector": "/index"
        },
        "IsUnique": true,
        "OrderedIndexedAttributeList": [
          {
            "FacetName": "instances",
            "Name": "ID",
            "SchemaArn": {
              "Fn::GetAtt": [
                "Directory",
                "AppliedSchemaArn"
              ]
            }
          }
        ]
      }
    },
    "UserPoolAdmin": {
      "Type": "Custom::CognitoUI",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCognitoUILambda",
            "Arn"
          ]
        },
        "UserPoolId": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        },
        "CSS": ".logo-customizable {\n\tmax-width: 100%;\n\tmax-height: 100%;\n}\n.banner-customizable {\n\tpadding: 25px 0px 25px 0px;\n\tbackground-color: white;\n}\n.label-customizable {\n\tfont-weight: 410;\n}\n.textDescription-customizable {\n\tpadding-top: 10px;\n\tpadding-bottom: 10px;\n\tdisplay: block;\n\tfont-size: 16px;\n}\n.idpDescription-customizable {\n\tpadding-top: 10px;\n\tpadding-bottom: 10px;\n\tdisplay: block;\n\tfont-size: 16px;\n}\n.legalText-customizable {\n\tcolor: #747474;\n\tfont-size: 11px;\n}\n.submitButton-customizable {\n\tfont-size: 14px;\n\tfont-weight: bold;\n\tmargin: 20px 0px 10px 0px;\n\theight: 40px;\n\twidth: 100%;\n\tcolor: #fff;\n\tbackground-color: #1fbcd3;\n}\n.submitButton-customizable:hover {\n\tcolor: #fff;\n\tbackground-color: #06A3BA;\n}\n.errorMessage-customizable {\n\tpadding: 5px;\n\tfont-size: 14px;\n\twidth: 100%;\n\tbackground: #F5F5F5;\n\tborder: 2px solid #D64958;\n\tcolor: #D64958;\n}\n.inputField-customizable {\n\twidth: 100%;\n\theight: 34px;\n\tcolor: #555;\n\tbackground-color: #fff;\n\tborder: 1px solid #ccc;\n}\n.inputField-customizable:focus {\n\tborder-color: #66afe9;\n\toutline: 0;\n}\n.idpButton-customizable {\n\theight: 41px;\n\twidth: 100%;\n\twidth: 100%;\n\ttext-align: center;\n\tmargin-bottom: 15px;\n\tcolor: #fff;\n\tbackground-color: #5bc0de;\n\tborder-color: #46b8da;\n}\n.idpButton-customizable:hover {\n\tcolor: #fff;\n\tbackground-color: #31b0d5;\n}\n.socialButton-customizable {\n\theight: 40px;\n\ttext-align: left;\n\twidth: 100%;\n\tmargin-bottom: 15px;\n}\n.redirect-customizable {\n  display:none;\n\ttext-align: center;\n}\n.passwordCheck-notValid-customizable {\n\tcolor: #DF3312;\n}\n.passwordCheck-valid-customizable {\n\tcolor: #19BF00;\n}\n.background-customizable {\n\tbackground-color: #fff;\n}\n\n",
        "ClientId": {
          "Ref": "UserClient"
        },
        "ImageFile": {
          "Bucket": {
            "Ref": "AssetBucket"
          },
          "Key": {
            "Fn::Sub": "${AssetPrefix}/logo_user.jpg"
          }
        }
      }
    },
    "UserPoolUser": {
      "Type": "Custom::CognitoUI",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCognitoUILambda",
            "Arn"
          ]
        },
        "UserPoolId": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        },
        "CSS": ".logo-customizable {\n\tmax-width: 100%;\n\tmax-height: 100%;\n}\n.banner-customizable {\n\tpadding: 25px 0px 25px 0px;\n\tbackground-color: white;\n}\n.label-customizable {\n\tfont-weight: 410;\n}\n.textDescription-customizable {\n\tpadding-top: 10px;\n\tpadding-bottom: 10px;\n\tdisplay: block;\n\tfont-size: 16px;\n}\n.idpDescription-customizable {\n\tpadding-top: 10px;\n\tpadding-bottom: 10px;\n\tdisplay: block;\n\tfont-size: 16px;\n}\n.legalText-customizable {\n\tcolor: #747474;\n\tfont-size: 11px;\n}\n.submitButton-customizable {\n\tfont-size: 14px;\n\tfont-weight: bold;\n\tmargin: 20px 0px 10px 0px;\n\theight: 40px;\n\twidth: 100%;\n\tcolor: #fff;\n\tbackground-color: #1fbcd3;\n}\n.submitButton-customizable:hover {\n\tcolor: #fff;\n\tbackground-color: #06A3BA;\n}\n.errorMessage-customizable {\n\tpadding: 5px;\n\tfont-size: 14px;\n\twidth: 100%;\n\tbackground: #F5F5F5;\n\tborder: 2px solid #D64958;\n\tcolor: #D64958;\n}\n.inputField-customizable {\n\twidth: 100%;\n\theight: 34px;\n\tcolor: #555;\n\tbackground-color: #fff;\n\tborder: 1px solid #ccc;\n}\n.inputField-customizable:focus {\n\tborder-color: #66afe9;\n\toutline: 0;\n}\n.idpButton-customizable {\n\theight: 41px;\n\twidth: 100%;\n\twidth: 100%;\n\ttext-align: center;\n\tmargin-bottom: 15px;\n\tcolor: #fff;\n\tbackground-color: #5bc0de;\n\tborder-color: #46b8da;\n}\n.idpButton-customizable:hover {\n\tcolor: #fff;\n\tbackground-color: #31b0d5;\n}\n.socialButton-customizable {\n\theight: 40px;\n\ttext-align: left;\n\twidth: 100%;\n\tmargin-bottom: 15px;\n}\n.redirect-customizable {\n  display:none;\n\ttext-align: center;\n}\n.passwordCheck-notValid-customizable {\n\tcolor: #DF3312;\n}\n.passwordCheck-valid-customizable {\n\tcolor: #19BF00;\n}\n.background-customizable {\n\tbackground-color: #fff;\n}\n\n",
        "ClientId": {
          "Ref": "AdminClient"
        },
        "ImageFile": {
          "Bucket": {
            "Ref": "AssetBucket"
          },
          "Key": {
            "Fn::Sub": "${AssetPrefix}/logo_admin.jpg"
          }
        }
      }
    },
    "UserPoolUpdate": {
      "Type": "Custom::CognitoPoolUpdate",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCognitoPoolUpdateLambda",
            "Arn"
          ]
        },
        "UserPoolId": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
          "InviteMessageTemplate": {
            "EmailSubject": "SageMaker-Gaurd Access Invitation",
            "EmailMessage": {
              "Fn::Sub": "<p>Hello {username},\n<p>Welcome to SageGuard, your temporary password is:\n<p>     {####} \n<p>\n<p>Please go to the following link to log in and access your SageMaker Notebook Instances!\n<p>     ${URLs.UserLogin}\n<p>\n<p>Happy to help,\n<p>  SageGuard\n"
            }
          }
        },
        "LambdaConfig": {
          "PreSignUp": {
            "Fn::GetAtt": [
              "SignupLambda",
              "Arn"
            ]
          },
          "PostAuthentication": {
            "Fn::GetAtt": [
              "PostauthLambda",
              "Arn"
            ]
          }
        },
        "UserPoolAddOns": {
          "AdvancedSecurityMode": "ENFORCED"
        },
        "MfaConfiguration": "OPTIONAL",
        "SmsAuthenticationMessage": "{####} is your authentication code for SageGuard",
        "SmsConfiguration": {
          "SnsCallerArn": {
            "Fn::GetAtt": [
              "SNSCognitoRole",
              "Arn"
            ]
          },
          "ExternalId": {
            "Ref": "AWS::StackName"
          }
        },
        "AutoVerifiedAttributes": [
          "email"
        ],
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_LINK",
          "EmailMessageByLink": {
            "Fn::Sub": "<p>Hello {username},\n<p>Please follow the link below to verify your email address:\n<p>{##Verify Email##} \n<p>\n<p>Happy to help,\n<p>  SageGuard\n"
          },
          "EmailSubjectByLink": "SageGuard Email Verification"
        }
      }
    },
    "AdminClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {
          "Fn::Sub": "User"
        },
        "GenerateSecret": false,
        "UserPoolId": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        }
      }
    },
    "UserClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {
          "Fn::Sub": "Admin"
        },
        "GenerateSecret": false,
        "UserPoolId": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        }
      }
    },
    "IdPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": "UserPool",
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "AdminClient"
            },
            "ProviderName": {
              "Fn::Sub": "cognito-idp.${AWS::Region}.amazonaws.com/${QNA.Outputs.UserPool}"
            },
            "ServerSideTokenCheck": true
          }
        ]
      }
    },
    "Admin": {
      "Type": "AWS::Cognito::UserPoolUser",
      "DependsOn": [
        "SignupPermision",
        "Stage"
      ],
      "Properties": {
        "DesiredDeliveryMediums": [
          "EMAIL"
        ],
        "UserAttributes": [
          {
            "Name": "email",
            "Value": {
              "Ref": "AdminEmail"
            }
          },
          {
            "Name": "phone_number",
            "Value": {
              "Ref": "AdminPhoneNumber"
            }
          }
        ],
        "Username": {
          "Ref": "AdminUsername"
        },
        "UserPoolId": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        }
      }
    },
    "AdminMFA": {
      "Type": "Custom::CognitoUserMFA",
      "DependsOn": [
        "Admin"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCognitoMFALambda",
            "Arn"
          ]
        },
        "UserPoolId": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        },
        "Username": {
          "Ref": "AdminUsername"
        }
      }
    },
    "UserToGroup": {
      "Type": "AWS::Cognito::UserPoolUserToGroupAttachment",
      "Properties": {
        "GroupName": "Admins",
        "Username": {
          "Ref": "Admin"
        },
        "UserPoolId": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        }
      }
    },
    "SNSCognitoRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "cognito-idp.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [],
        "Policies": [
          {
            "PolicyName": "CognitoSNSPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": {
                "Effect": "Allow",
                "Action": [
                  "sns:publish"
                ],
                "Resource": "*"
              }
            }
          }
        ]
      }
    },
    "UserRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": []
      }
    },
    "AdminRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": []
      }
    },
    "RoleAttachment": {
      "Type": "Custom::CognitoRoleAttachment",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCognitoRoleAttachmentLambda",
            "Arn"
          ]
        },
        "IdentityPoolId": {
          "Ref": "IdPool"
        },
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "UserRole",
              "Arn"
            ]
          }
        },
        "RoleMappings": [
          {
            "ClientId": {
              "Ref": "AdminClient"
            },
            "UserPool": {
              "Fn::GetAtt": [
                "QNA",
                "Outputs.UserPool"
              ]
            },
            "Type": "Rules",
            "AmbiguousRoleResolution": "Deny",
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "Value": "Admins",
                  "RoleARN": {
                    "Fn::GetAtt": [
                      "AdminRole",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "SyncPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cognito-sync:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:cognito-sync:${AWS::Region}:${AWS::AccountId}:identitypool/${IdPool}/identity/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "UserRole"
          },
          {
            "Ref": "AdminRole"
          }
        ]
      }
    },
    "CognitouserLogin": {
      "Type": "Custom::CognitoLogin",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCognitoLoginLambda",
            "Arn"
          ]
        },
        "UserPool": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        },
        "ClientId": {
          "Ref": "UserClient"
        },
        "LoginCallbackUrls": [
          {
            "Fn::GetAtt": [
              "URLs",
              "UserPage"
            ]
          }
        ],
        "OAuthFlows": [
          "code",
          "implicit"
        ]
      }
    },
    "CognitoAdminLogin": {
      "Type": "Custom::CognitoLogin",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNCognitoLoginLambda",
            "Arn"
          ]
        },
        "UserPool": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.UserPool"
          ]
        },
        "ClientId": {
          "Ref": "AdminClient"
        },
        "LoginCallbackUrls": [
          {
            "Fn::GetAtt": [
              "URLs",
              "AdminPage"
            ]
          }
        ],
        "OAuthFlows": [
          "code",
          "implicit"
        ]
      }
    },
    "SignupPermision": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SignupLambda",
            "Arn"
          ]
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${QNA.Outputs.UserPool}"
        }
      }
    },
    "SignupLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lambda=new aws.Lambda()\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    lambda.invoke({\n        FunctionName:process.env.OBJECT_CREATE_LAMBDA,\n        InvocationType:\"Event\",\n        Payload:JSON.stringify({\n            Type:\"users\",\n            Attributes:Object.assign({ID:event.userName},event.request.userAttributes)\n        })\n    }).promise()\n    .then(result=>{\n        if(result.FunctionError){\n            callback(JSON.parse(JSON.parse(result.Payload).errorMessage))\n        }else{\n            callback(null,event)\n        }\n    })\n    .catch(callback)\n};\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Environment": {
          "Variables": {
            "OBJECT_CREATE_LAMBDA": {
              "Fn::GetAtt": [
                "APICloudDirectoryObjectCreateLambda",
                "Arn"
              ]
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "SignupLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Tags": [
          {
            "Key": "Type",
            "Value": "Cognito"
          }
        ]
      }
    },
    "SignupLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "LambdaInvoke",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "Lambda:InvokeFunction",
                  "Resource": {
                    "Fn::GetAtt": [
                      "APICloudDirectoryObjectCreateLambda",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "PostauthPermision": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PostauthLambda",
            "Arn"
          ]
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${QNA.Outputs.UserPool}"
        }
      }
    },
    "PostauthLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lambda=new aws.Lambda()\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    lambda.invoke({\n        FunctionName:process.env.OBJECT_UPDATE_LAMBDA,\n        InvocationType:\"Event\",\n        Payload:JSON.stringify({\n            Type:\"user\",\n            ID:event.userName,\n            Attributes:event.userAttributes\n        })\n    }).promise()\n    .then(result=>{\n        if(result.FunctionError){\n            callback(JSON.parse(JSON.parse(result.Payload).errorMessage))\n        }else{\n            callback(null,event)\n        }\n    })\n    .catch(callback)\n};\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Environment": {
          "Variables": {
            "OBJECT_UPDATE_LAMBDA": {
              "Fn::GetAtt": [
                "APICloudDirectoryObjectUpdateLambda",
                "Arn"
              ]
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "PostauthLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Tags": [
          {
            "Key": "Type",
            "Value": "Cognito"
          }
        ]
      }
    },
    "PostauthLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "LambdaInvoke",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "Lambda:InvokeFunction",
                  "Resource": {
                    "Fn::GetAtt": [
                      "APICloudDirectoryObjectUpdateLambda",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "ElasticSearchDomain": {
      "Type": "Custom::ESDomain",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNElasticSearchArnLambda",
            "Arn"
          ]
        },
        "endpoint": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.ElasticsearchEndpoint"
          ]
        }
      }
    },
    "LoginFirehose": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "DependsOn": [
        "LoginsIndex"
      ],
      "Properties": {
        "DeliveryStreamType": "DirectPut",
        "ElasticsearchDestinationConfiguration": {
          "BufferingHints": {
            "IntervalInSeconds": 60,
            "SizeInMBs": 5
          },
          "DomainARN": {
            "Fn::Sub": "${ElasticSearchDomain.ARN}"
          },
          "IndexName": "logins",
          "IndexRotationPeriod": "NoRotation",
          "RetryOptions": {
            "DurationInSeconds": 300
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseRole",
              "Arn"
            ]
          },
          "S3BackupMode": "AllDocuments",
          "S3Configuration": {
            "BucketARN": {
              "Fn::GetAtt": [
                "LogsBucket",
                "Arn"
              ]
            },
            "BufferingHints": {
              "IntervalInSeconds": 60,
              "SizeInMBs": 5
            },
            "CompressionFormat": "GZIP",
            "RoleARN": {
              "Fn::GetAtt": [
                "FirehoseRole",
                "Arn"
              ]
            },
            "Prefix": "Logins/"
          },
          "TypeName": "login"
        }
      }
    },
    "FirehoseRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "LogsBucket",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "LogsBucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":log-group:/aws/kinesisfirehose/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "a",
                  "Effect": "Allow",
                  "Action": [
                    "es:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "SageGuardFirehose"
          }
        ]
      }
    },
    "LoginsIndex": {
      "Type": "Custom::ESProxy",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.CFNESProxyLambda"
          ]
        },
        "NoUpdate": true,
        "create": {
          "endpoint": {
            "Fn::GetAtt": [
              "QNA",
              "Outputs.ElasticsearchEndpoint"
            ]
          },
          "path": {
            "Fn::Sub": "/logins"
          },
          "method": "PUT",
          "body": {
            "Fn::Sub": "{\"settings\":{},\"mappings\":{\"login\":{\"properties\":{\"UserName\":{\"type\":\"keyword\"},\"InstanceName\":{\"type\":\"keyword\"},\"Date\":{\"type\":\"date\"},\"IP\":{\"type\":\"ip\"},\"RequestId\":{\"type\":\"keyword\"},\"UserAgent\":{\"type\":\"text\"}}}}}"
          }
        },
        "delete": {
          "endpoint": {
            "Fn::GetAtt": [
              "QNA",
              "Outputs.ElasticsearchEndpoint"
            ]
          },
          "path": {
            "Fn::Sub": "/logins"
          },
          "method": "DELETE"
        }
      }
    },
    "KibanaConfig": {
      "Type": "Custom::ESProxy",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.CFNESProxyLambda"
          ]
        },
        "create": {
          "endpoint": {
            "Fn::GetAtt": [
              "QNA",
              "Outputs.ElasticsearchEndpoint"
            ]
          },
          "path": {
            "Fn::Sub": "_bulk"
          },
          "method": "POST",
          "body": [
            {
              "index": {
                "_index": ".kibana",
                "_type": "config",
                "_id": "5.1.1"
              }
            },
            {
              "buildNum": 14566,
              "defaultIndex": {
                "Fn::Sub": "logins"
              },
              "discover:aggs:terms:size": 20
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "index-pattern",
                "_id": {
                  "Fn::Sub": "logins"
                }
              }
            },
            {
              "title": {
                "Fn::Sub": "logins"
              }
            }
          ]
        }
      }
    },
    "SSMLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {}
    },
    "LogsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "LogsClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": [
        "VPC"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNS3ClearLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "LogsBucket"
        }
      }
    },
    "LogsBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "LogsBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "SSMBucketPermissionsCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "ssm.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${LogsBucket}"
              }
            },
            {
              "Sid": " SSMBucketDelivery",
              "Effect": "Allow",
              "Principal": {
                "Service": "ssm.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${LogsBucket}/ssm/*"
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            },
            {
              "Sid": "AWSLogDeliveryWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Sub": "${LogsBucket.Arn}/vpc"
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            },
            {
              "Sid": "AWSLogDeliveryAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": {
                "Fn::GetAtt": [
                  "LogsBucket",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::386209384616:root"
              },
              "Action": [
                "s3:GetBucketAcl",
                "s3:GetBucketPolicy"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "LogsBucket",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::386209384616:root"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Sub": "${LogsBucket.Arn}/*"
              }
            }
          ]
        }
      }
    },
    "Messages": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "AssetBucket": {
            "Ref": "AssetBucket"
          },
          "AssetPrefix": {
            "Ref": "AssetPrefix"
          },
          "StackName": {
            "Ref": "AWS::StackName"
          },
          "API": {
            "Ref": "API"
          },
          "APIURL": {
            "Fn::GetAtt": [
              "URLs",
              "API"
            ]
          },
          "CognitoAuthorizer": {
            "Ref": "CognitoAuthorizer"
          },
          "UtilLambdaLayer": {
            "Ref": "UtilLambdaLayer"
          },
          "WebsiteAPIResource": {
            "Ref": "WebsiteAPIResource"
          },
          "APILambdaRole": {
            "Ref": "APILambdaRole"
          },
          "APILambdaRoleArn": {
            "Fn::GetAtt": [
              "APILambdaRole",
              "Arn"
            ]
          },
          "ApiGatewayRole": {
            "Fn::GetAtt": [
              "ApiGatewayRole",
              "Arn"
            ]
          },
          "ApiGatewayRoleName": {
            "Ref": "ApiGatewayRole"
          }
        },
        "TemplateURL": {
          "Fn::Sub": "https://s3.amazonaws.com/${AssetBucket}/${AssetPrefix}/messages.json"
        }
      }
    },
    "QNA": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Email": "joedoe@example.com",
          "Username": "QnAAdmin",
          "BootstrapBucket": "aws-bigdata-blog",
          "BootstrapPrefix": "artifacts/aws-ai-qna-bot"
        },
        "TemplateURL": "http://s3.amazonaws.com/aws-bigdata-blog/artifacts/aws-ai-qna-bot/templates/master.json"
      }
    },
    "LexWebUi": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "BotName": {
            "Fn::GetAtt": [
              "QNA",
              "Outputs.BotName"
            ]
          },
          "CodeBuildName": {
            "Ref": "AWS::StackName"
          },
          "WebAppParentOrigin": {
            "Fn::Sub": "https://${API}.execute-api.${AWS::Region}.amazonaws.com"
          },
          "ShouldLoadIframeMinimized": true,
          "WebAppConfBotInitialText": "Hello",
          "WebAppConfBotInitialSpeech": "Hello",
          "WebAppConfToolbarTitle": "SageGuard"
        },
        "TemplateURL": "https://s3.amazonaws.com/aws-bigdata-blog/artifacts/aws-lex-web-ui/artifacts/templates/master.yaml"
      }
    },
    "QnABotContent": {
      "Type": "Custom::QnABotContent",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNQnABotImportLambda",
            "Arn"
          ]
        },
        "content": {
          "qna": [
            {
              "qid": "hello",
              "q": [
                "hello",
                "hi",
                "hey"
              ],
              "a": "Hi! welcome to the SageGuard Admin interface"
            },
            {
              "qid": "how.1",
              "q": [
                "how do I create an instance"
              ],
              "a": "go here"
            },
            {
              "qid": "how.2",
              "q": [
                "how do I create a group"
              ],
              "a": "go here"
            },
            {
              "qid": "how.3",
              "q": [
                "how do I create a user"
              ],
              "a": "go here"
            },
            {
              "qid": "how.4",
              "q": [
                "how do I create a IAM role for a sagemaker instance",
                "how do I create a role"
              ],
              "a": "go here"
            },
            {
              "qid": "how.5",
              "q": [
                "How to I create a glue development endpoint"
              ],
              "a": "go here"
            },
            {
              "qid": "how.6",
              "q": [
                "How do users log in"
              ],
              "a": "go here"
            },
            {
              "qid": "how.6",
              "q": [
                "How do i reset a users password"
              ],
              "a": "go here"
            }
          ]
        },
        "QnABotUrl": {
          "Fn::GetAtt": [
            "QNA",
            "Outputs.ClientURL"
          ]
        }
      }
    },
    "LexWebUICSS": {
      "Type": "Custom::LexWebUICSS",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLexWebUICSSLambda",
            "Arn"
          ]
        },
        "URL": {
          "Fn::GetAtt": [
            "LexWebUi",
            "Outputs.LoaderScriptUrl"
          ]
        },
        "Bucket": {
          "Ref": "AssetBucket"
        },
        "Index": {
          "Fn::Sub": "${AssetPrefix}/assets/index.html"
        },
        "CSS": {
          "Fn::Sub": "${AssetPrefix}/assets/custom.css"
        },
        "Date": "2018-12-30T03:49:15.707Z"
      }
    },
    "DefaultNotebookRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        ]
      }
    },
    "SSM": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "StackName": {
            "Ref": "AWS::StackName"
          },
          "SSMLogGroup": {
            "Ref": "SSMLogGroup"
          },
          "LogsBucket": {
            "Ref": "LogsBucket"
          },
          "AssetBucket": {
            "Ref": "AssetBucket"
          },
          "AssetPrefix": {
            "Ref": "AssetPrefix"
          }
        },
        "TemplateURL": {
          "Fn::Sub": "https://s3.amazonaws.com/${AssetBucket}/${AssetPrefix}/ssm.json"
        }
      }
    },
    "StepFunctions": {
      "Type": "AWS::CloudFormation::Stack",
      "DependsOn": [
        "VPC"
      ],
      "Properties": {
        "Parameters": {
          "AssetBucket": {
            "Ref": "AssetBucket"
          },
          "AssetPrefix": {
            "Ref": "AssetPrefix"
          },
          "Directory": {
            "Ref": "Directory"
          },
          "AppliedSchemaArn": {
            "Fn::GetAtt": [
              "Directory",
              "AppliedSchemaArn"
            ]
          },
          "StackName": {
            "Ref": "AWS::StackName"
          },
          "Subnet": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.Subnet"
            ]
          },
          "SecurityGroup": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.NoteBookSecurityGroup"
            ]
          },
          "VPC": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.VPC"
            ]
          },
          "EFS": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.EFS"
            ]
          },
          "SSMLogGroup": {
            "Ref": "SSMLogGroup"
          },
          "LogsBucket": {
            "Ref": "LogsBucket"
          },
          "LambdaUtilLayer": {
            "Ref": "UtilLambdaLayer"
          }
        },
        "TemplateURL": {
          "Fn::Sub": "https://s3.amazonaws.com/${AssetBucket}/${AssetPrefix}/step_functions.json"
        }
      }
    },
    "Constants": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNVariableLambda",
            "Arn"
          ]
        },
        "ApiStageName": "v1",
        "BuildDate": "2018-12-30T03:49:15.708Z",
        "Version": "1.0.0"
      }
    },
    "URLs": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNVariableLambda",
            "Arn"
          ]
        },
        "API": {
          "Fn::Sub": "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Constants.ApiStageName}"
        },
        "UserAPI": {
          "Fn::Sub": "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Constants.ApiStageName}/website/api"
        },
        "AdminLogin": {
          "Fn::Sub": "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Constants.ApiStageName}/website/admin"
        },
        "AdminPage": {
          "Fn::Sub": "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Constants.ApiStageName}/website?view=admin"
        },
        "UserPage": {
          "Fn::Sub": "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Constants.ApiStageName}/website?view=user"
        },
        "UserLogin": {
          "Fn::Sub": "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Constants.ApiStageName}/website/user"
        },
        "CognitoEndpoint": {
          "Fn::Sub": "${QNA.Outputs.CognitoEndpoint}"
        }
      }
    },
    "AdminLoginRouteEncoded": {
      "Type": "Custom::URIEncodedString",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNEncodeURIComponentLambda",
            "Arn"
          ]
        },
        "value": {
          "Fn::GetAtt": [
            "URLs",
            "AdminPage"
          ]
        }
      }
    },
    "UserLoginRouteEncoded": {
      "Type": "Custom::URIEncodedString",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNEncodeURIComponentLambda",
            "Arn"
          ]
        },
        "value": {
          "Fn::GetAtt": [
            "URLs",
            "UserPage"
          ]
        }
      }
    },
    "LoginURLS": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNVariableLambda",
            "Arn"
          ]
        },
        "AdminLogin": {
          "Fn::Sub": "${URLs.CognitoEndpoint}/login?redirect_uri=${AdminLoginRouteEncoded.value}&response_type=code&client_id=${AdminClient}"
        },
        "AdminLogout": {
          "Fn::Sub": "${URLs.CognitoEndpoint}/logout?redirect_uri=${AdminLoginRouteEncoded.value}&response_type=code&client_id=${AdminClient}"
        },
        "UserLogin": {
          "Fn::Sub": "${URLs.CognitoEndpoint}/login?redirect_uri=${UserLoginRouteEncoded.value}&response_type=code&client_id=${UserClient}"
        },
        "UserLogout": {
          "Fn::Sub": "${URLs.CognitoEndpoint}/logout?redirect_uri=${UserLoginRouteEncoded.value}&response_type=code&client_id=${UserClient}"
        }
      }
    },
    "VPC": {
      "Type": "AWS::CloudFormation::Stack",
      "DependsOn": [
        "LogsBucketPolicy"
      ],
      "Properties": {
        "Parameters": {
          "LogsBucketArn": {
            "Fn::GetAtt": [
              "LogsBucket",
              "Arn"
            ]
          },
          "VPCEndpoints": {
            "Ref": "VPCEndpoints"
          },
          "CidrBlock": {
            "Ref": "CidrBlock"
          },
          "EnableVPCEndpoints": {
            "Ref": "VPCEndpoints"
          }
        },
        "TemplateURL": {
          "Fn::Sub": "https://s3.amazonaws.com/${AssetBucket}/${AssetPrefix}/vpc.json"
        }
      }
    },
    "WebsiteBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "NoncurrentVersionExpirationInDays": 1,
              "Status": "Enabled"
            }
          ]
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html"
        }
      }
    },
    "WebsiteClear": {
      "Type": "Custom::S3Clear",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNS3ClearLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "WebsiteBucket"
        }
      }
    },
    "WebsiteUnzip": {
      "Type": "Custom::S3Unzip",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNUnzipLambda",
            "Arn"
          ]
        },
        "SrcBucket": {
          "Ref": "AssetBucket"
        },
        "Key": {
          "Fn::Sub": "${AssetPrefix}/website.zip"
        },
        "DstBucket": {
          "Ref": "WebsiteBucket"
        },
        "buildDate": "2018-12-30T03:49:15.710Z"
      },
      "DependsOn": "WebsiteClear"
    },
    "dashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": {
          "Ref": "AWS::StackName"
        },
        "DashboardBody": {
          "Fn::Sub": "{\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"# ${AWS::StackName} Dashboard\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":9,\"properties\":{\"markdown\":\"## Lambda Function\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":11,\"properties\":{\"markdown\":\"### ApiRouteHandler\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIAuthLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIAuthLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":13},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryAttachLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryAttachLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":13},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryAttachPolicyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryAttachPolicyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":13},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryAttachmentClearLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryAttachmentClearLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":13},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryAttachmentListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryAttachmentListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":19},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryDetachLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryDetachLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":19},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryDetachPolicyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryDetachPolicyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":19},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryIndexListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryIndexListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":19},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryObjectCreateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryObjectCreateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":25},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryObjectDeleteLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryObjectDeleteLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":25},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryObjectGetLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryObjectGetLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":25},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryObjectUpdateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryObjectUpdateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":25},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryPolicyClearLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryPolicyClearLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":31},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APICloudDirectoryPolicyListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APICloudDirectoryPolicyListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":31},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIFailLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIFailLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":31},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstanceCreateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstanceCreateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":31},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstanceDeleteLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstanceDeleteLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":37},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstanceDeleteWaitLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstanceDeleteWaitLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":37},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstanceGetLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstanceGetLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":37},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstanceListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstanceListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":37},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstancePostStateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstancePostStateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":43},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstanceRedirectLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstanceRedirectLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":43},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstanceStartStopLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstanceStartStopLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":43},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIInstanceUpdateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIInstanceUpdateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":43},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIOptionsLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIOptionsLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":49},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIRouterLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIRouterLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":49},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIUserCreateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIUserCreateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":49},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIUserDeleteLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIUserDeleteLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":49},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIUserGetLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIUserGetLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":55},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIUserUpdateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIUserUpdateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":55},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":61,\"properties\":{\"markdown\":\"### ApiTemplate\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIattachmentsTemplateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIattachmentsTemplateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":63},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIbulkTemplateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIbulkTemplateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":63},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIbulkPostTemplateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIbulkPostTemplateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":63},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIinstanceTemplateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIinstanceTemplateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":63},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIinstanceUserTemplateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIinstanceUserTemplateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":69},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIinstanceUserPostTemplateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIinstanceUserPostTemplateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":69},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIinstancesTemplateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIinstancesTemplateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":69},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${APIitemsTemplateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"APIitemsTemplateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":69},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":75,\"properties\":{\"markdown\":\"### CustomResource\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNApiGatewayCompressionLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNApiGatewayCompressionLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":77},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNApiGatewayDeploymentLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNApiGatewayDeploymentLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":77},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCloudDirectoryDirectoryLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCloudDirectoryDirectoryLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":77},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCloudDirectoryIndexLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCloudDirectoryIndexLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":77},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCloudDirectoryObjectLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCloudDirectoryObjectLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":83},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCloudDirectoryPublishSchemaLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCloudDirectoryPublishSchemaLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":83},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCloudDirectorySchemaLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCloudDirectorySchemaLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":83},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCognitoDomainLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCognitoDomainLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":83},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCognitoLoginLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCognitoLoginLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":89},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCognitoMFALambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCognitoMFALambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":89},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCognitoPoolUpdateLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCognitoPoolUpdateLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":89},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCognitoRoleAttachmentLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCognitoRoleAttachmentLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":89},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNCognitoUILambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNCognitoUILambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":95},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNElasticSearchArnLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNElasticSearchArnLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":95},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNEncodeURIComponentLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNEncodeURIComponentLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":95},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNLexWebUICSSLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNLexWebUICSSLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":95},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNQnABotImportLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNQnABotImportLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":101},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNS3ClearLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNS3ClearLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":101},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNS3VersionLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNS3VersionLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":101},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNUnzipLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNUnzipLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":101},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNVariableLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNVariableLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":107},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":113,\"properties\":{\"markdown\":\"### Cognito\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${SignupLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"SignupLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":115},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${PostauthLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"PostauthLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":115}]}"
        }
      }
    }
  },
  "Conditions": {
    "IfCidrBlock": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CidrBlock"
            },
            "10.0.1.0/24"
          ]
        }
      ]
    },
    "IfAdminUsername": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdminUsername"
            },
            "Admin"
          ]
        }
      ]
    },
    "IfVPCEndpoints": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VPCEndpoints"
            },
            "ENABLE"
          ]
        }
      ]
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-2": {
        "name": "US East (Ohio)"
      },
      "us-east-1": {
        "name": "US East (N. Virginia)"
      },
      "us-west-1": {
        "name": "US West (N. California)"
      },
      "us-west-2": {
        "name": "US West (Oregon)"
      },
      "ap-south-1": {
        "name": "Asia Pacific (Mumbai)"
      },
      "ap-northeast-3": {
        "name": "Asia Pacific (Osaka-Local)"
      },
      "ap-northeast-2": {
        "name": "Asia Pacific (Seoul)"
      },
      "ap-southeast-1": {
        "name": "Asia Pacific (Singapore)"
      },
      "ap-southeast-2": {
        "name": "Asia Pacific (Sydney)"
      },
      "ap-northeast-1": {
        "name": "Asia Pacific (Tokyo)"
      },
      "ca-central-1": {
        "name": "Canada (Central)"
      },
      "cn-north-1": {
        "name": "China (Beijing)"
      },
      "cn-northwest-1": {
        "name": "China (Ningxia)"
      },
      "eu-central-1": {
        "name": "EU (Frankfurt)"
      },
      "eu-west-1": {
        "name": "EU (Ireland)"
      },
      "eu-west-2": {
        "name": "EU (London)"
      },
      "eu-west-3": {
        "name": "EU (Paris)"
      },
      "eu-north-1": {
        "name": "EU (Stockholm)"
      },
      "sa-east-1": {
        "name": "South America (São Paulo)"
      },
      "us-gov-east-1": {
        "name": "AWS GovCloud (US-East)"
      },
      "us-gov-west-1": {
        "name": "AWS GovCloud (US)"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Adminstrator Settings"
          },
          "Parameters": [
            "AdminEmail",
            "AdminUsername",
            "AdminPhoneNumber"
          ]
        },
        {
          "Label": {
            "default": "Advanced Configuration"
          },
          "Parameters": [
            "VPCEndpoints"
          ]
        },
        {
          "Label": {
            "default": "[Do No Change] Asset Configuration"
          },
          "Parameters": [
            "AssetBucket",
            "AssetPrefix"
          ]
        }
      ],
      "ParameterLabels": {
        "AdminEmail": {
          "default": "Admin Email Address"
        },
        "AdminUsername": {
          "default": "Admin Username"
        },
        "AdminPhoneNumber": {
          "default": "Admin Phone Number"
        },
        "AssetBucket": {
          "default": "Asset Bucket"
        },
        "AssetPrefix": {
          "default": "Asset Prefix"
        },
        "VPCEndpoints": {
          "default": "Enable/Disable VPC Endpoint creation"
        }
      }
    }
  }
}