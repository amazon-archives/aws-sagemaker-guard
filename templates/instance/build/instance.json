{
  "Parameters": {
    "CodeRepository": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "AcceleratorType": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "State": {
      "Type": "String",
      "Default": "ON"
    },
    "LambdaUtilLayer": {
      "Type": "String"
    },
    "OnStopDocument": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "OnStartDocument": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "OnCreateDocument": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "OnTerminateDocument": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "ParentStack": {
      "Type": "String"
    },
    "SSMLogGroup": {
      "Type": "String"
    },
    "LogsBucket": {
      "Type": "String"
    },
    "EFS": {
      "Type": "String"
    },
    "InstanceType": {
      "Type": "String"
    },
    "RoleArn": {
      "Type": "String"
    },
    "KmsKeyId": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "SecurityGroupId": {
      "Type": "String"
    },
    "SubnetId": {
      "Type": "String"
    },
    "DirectInternetAccess": {
      "Type": "String",
      "Default": "Enabled"
    },
    "IdleShutdown": {
      "Type": "String",
      "Default": "30"
    },
    "GlueDevEndpoint": {
      "Type": "String",
      "Default": "EMPTY"
    }
  },
  "Conditions": {
    "IfCodeRepository": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CodeRepository"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfAcceleratorType": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AcceleratorType"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfState": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "State"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfOnStopDocument": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OnStopDocument"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfOnStartDocument": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OnStartDocument"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfOnCreateDocument": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OnCreateDocument"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfOnTerminateDocument": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OnTerminateDocument"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfKmsKeyId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "KmsKeyId"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfDirectInternetAccess": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DirectInternetAccess"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfIdleShutdown": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "IdleShutdown"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfGlueDevEndpoint": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "GlueDevEndpoint"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfCreateRole": {
      "Fn::Equals": [
        {
          "Ref": "RoleArn"
        },
        "CREATE"
      ]
    },
    "IfSecurityGroupId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SecurityGroupId"
            },
            ""
          ]
        }
      ]
    },
    "TurnOff": {
      "Fn::Equals": [
        {
          "Ref": "State"
        },
        "OFF"
      ]
    },
    "TurnOn": {
      "Fn::Equals": [
        {
          "Ref": "State"
        },
        "ON"
      ]
    },
    "IfDisableDirectInternet": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DirectInternetAccess"
            },
            "Enabled"
          ]
        }
      ]
    }
  },
  "Outputs": {
    "NoteBookName": {
      "Value": {
        "Fn::GetAtt": [
          "SageMakerNotebookInstance",
          "NotebookInstanceName"
        ]
      }
    },
    "InstanceID": {
      "Value": {
        "Fn::GetAtt": [
          "WaitConditionData",
          "id"
        ]
      }
    },
    "JupyterProxyCFNLambda": {
      "Value": {
        "Fn::GetAtt": [
          "JupyterApiProxyLambda",
          "Arn"
        ]
      }
    },
    "RoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "Role",
          "Arn"
        ]
      }
    },
    "State": {
      "Value": {
        "Ref": "State"
      }
    },
    "APITurnOffLambda": {
      "Value": {
        "Ref": "APITurnOffLambda"
      }
    },
    "APITurnOnLambda": {
      "Value": {
        "Ref": "APITurnOnLambda"
      }
    }
  },
  "Resources": {
    "JupyterApiProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION||\"us-east-1\";var sagemaker=new aws.SageMaker,https=require(\"https\"),URL=require(\"url\");function send(args){return sagemaker.createPresignedNotebookInstanceUrl({NotebookInstanceName:args.InstanceName}).promise().then(function(result){console.log(result);var url=URL.parse(result.AuthorizedUrl);return console.log(url),new Promise(function(res,rej){var opts={hostname:url.hostname,protocol:url.protocol,post:443,path:`${url.pathname}${url.search}`,method:\"GET\"};console.log(opts);var req=https.request(opts,x=>{opts.headers={Cookie:x.headers[\"set-cookie\"].join(\"; \")},opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()})}).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=args.path,opts.method=args.method,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>{var body=[];return console.log(opts),new Promise(function(res,rej){var req=https.request(opts,response=>{response.on(\"data\",chunk=>{body.push(chunk)}),response.on(\"end\",()=>{res(Buffer.concat(body).toString())})});args.body&&req.write(args.body),req.on(\"error\",rej),req.end()})}).then(x=>{try{return JSON.parse(x)}catch(e){return x}})}exports.send=send,exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties[event.RequestType.toLowerCase()];params?(console.log(params),send(params).then(result=>{console.log(result),response.send(event,context,response.SUCCESS)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)})):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "LifecycleLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var _=require(\"lodash\"),ssm=new aws.SSM,util=require(\"ssm\"),lambda=new aws.Lambda,sagemaker=new aws.SageMaker;function recurse(event,callback){setTimeout(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().catch(error=>{console.log(error),response.send(event,context,response.FAILED)}).then(()=>callback(null)),5e3)}function commandStatus(event){return\"Command\"===event.DocumentType?ssm.getCommandInvocation({CommandId:event.id,InstanceId:event.ResourceProperties.config.InstanceIds[0]}).promise().then(x=>x.Status):ssm.describeAutomationExecutions({Filters:[{Key:\"ExecutionId\",Values:[event.id]}]}).promise().then(x=>x.AutomationExecutionMetadataList[0].AutomationExecutionStatus)}function startNotebook(event){return\"ON\"===event.ResourceProperties.state?sagemaker.describeNotebookInstance({NotebookInstanceName:process.env.NOTEBOOK}).promise().then(x=>{if(console.log(JSON.stringify(x,null,2)),[\"Stopped\"].includes(x.NotebookInstanceStatus))return sagemaker.startNotebookInstance({NotebookInstanceName:process.env.NOTEBOOK}).promise()}):Promise.resolve()}function stopNotebook(event){return\"OFF\"===event.ResourceProperties.state?sagemaker.describeNotebookInstance({NotebookInstanceName:process.env.NOTEBOOK}).promise().then(x=>{if(console.log(JSON.stringify(x,null,2)),[\"InService\"].includes(x.NotebookInstanceStatus))return sagemaker.stopNotebookInstance({NotebookInstanceName:process.env.NOTEBOOK}).promise()}):Promise.resolve()}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;if(delete params.ServiceToken,event.RequestType===params.event)if(event.id)commandStatus(event).then(status=>{if(\"Success\"===status)return delete event.id,stopNotebook(event).then(()=>recurse(event,callback)).catch(error=>{console.log(error),response.send(event,context,response.FAILED)});[\"Pending\",\"InProgress\",\"Delayed\"].includes(status)?recurse(event,callback):response.send(event,context,response.FAILED)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)});else{if(event.wait)return sagemaker.describeNotebookInstance({NotebookInstanceName:process.env.NOTEBOOK}).promise().then(x=>{var state=event.ResourceProperties.state;\"OFF\"===state&&\"Stopped\"===x.NotebookInstanceStatus?response.send(event,context,response.SUCCESS):\"ON\"===state&&\"InService\"===x.NotebookInstanceStatus?response.send(event,context,response.SUCCESS):[\"Stopping\",\"Pending\"].includes(x.NotebookInstanceStatus)?recurse(event,callback):(x.NotebookInstanceStatus,response.send(event,context,response.FAILED))});startNotebook(event).then(()=>(event.wait=!0,\"EMPTY\"!==event.ResourceProperties.config.DocumentName?util.start(event.ResourceProperties.config).then(x=>Object.assign(event,x)):stopNotebook(event))).then(()=>recurse(event,callback)).catch(error=>{console.log(error),response.send(event,context,response.FAILED)})}else response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "NOTEBOOK": {
              "Fn::GetAtt": [
                "SageMakerNotebookInstance",
                "NotebookInstanceName"
              ]
            },
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "INSTANCEID": {
              "Fn::GetAtt": [
                "WaitConditionData",
                "id"
              ]
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "NotebookLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var _=require(\"lodash\"),lambda=new aws.Lambda,sagemaker=new aws.SageMaker,updateable=[\"AcceleratorTypes\",\"InstanceType\",\"RoleArn\",\"VolumeSizeInGB\",\"AdditionalCodeRepositories\",\"DefaultCodeRepository\"];function recurse(event,callback){setTimeout(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().catch(error=>{console.log(error),response.send(event,context,response.FAILED)}).then(()=>callback(null)),5e3)}function error(event){return function(error){console.log(error),response.send(event,context,response.FAILED)}}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;if(delete params.ServiceToken,event.wait)return sagemaker.describeNotebookInstance({NotebookInstanceName:params.NotebookInstanceName}).promise().then(x=>{\"InService\"===x.NotebookInstanceStatus?response.send(event,context,response.SUCCESS,x,x.NotebookInstanceArn):\"Pending\"===x.NotebookInstanceStatus?recurse(event,callback):\"Failed\"===x.NotebookInstanceStatus?response.send(event,context,response.FAILED):\"Stopped\"===x.NotebookInstanceStatus?sagemaker.deleteNotebookInstance({NotebookInstanceName:params.NotebookInstanceName}).promise().then(x=>response.send(event,context,response.SUCCESS)).catch(error(event)):response.send(event,context,response.FAILED)});if(\"Create\"===event.RequestType)event.wait=!0,sagemaker.createNotebookInstance(params).promise().then(()=>recurse(event,callback)).catch(error(event));else if(\"Update\"===event.RequestType){var old=event.OldResourceProperties;delete old.ServiceToken,_.isEqual(_.pick(params,updateable),_.pick(old,updateable))?sagemaker.describeNotebookInstance({NotebookInstanceName:params.NotebookInstanceName}).promise().then(x=>{response.send(event,context,response.SUCCESS,x,x.NotebookInstanceArn)}).catch(error(event)):(event.wait=!0,sagemaker.updateNotebookInstance(_.pick(params,updateable.concat([\"NotebookInstanceName\"]))).promise().then(()=>recurse(event,callback)).catch(error(event)))}else sagemaker.stopNotebookInstance({NotebookInstanceName:params.NotebookInstanceName}).promise().catch(x=>{if(!x.message.match(\"Unable to transition\"))throw x}).then(()=>recurse(event)).catch(error(event))};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "RoleNameLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));try{var params=event.ResourceProperties,name=params.Arn.match(/arn:.*:.*::.*:role\\/(.*)/)[1];response.send(event,context,response.SUCCESS,params,name)}catch(e){console.log(e),response.send(event,context,response.FAILED,params,name)}};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMActivationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var ssm=new aws.SSM;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,\"Create\"===event.RequestType?ssm.createActivation(params).promise().then(x=>{console.log(x),response.send(event,context,response.SUCCESS,x,x.ActivationId)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):\"Update\"===event.RequestType?response.send(event,context,response.SUCCESS,event.OldResourceProperties,event.PhysicalResourceId):ssm.describeInstanceInformation({Filters:[{Key:\"ActivationIds\",Values:[event.PhysicalResourceId]}]}).promise().then(x=>(console.log(JSON.stringify(x,null,2)),ssm.deregisterManagedInstance({InstanceId:x.InstanceInformationList[0].InstanceId}).promise())).then(x=>(console.log(JSON.stringify(x,null,2)),ssm.deleteActivation({ActivationId:event.PhysicalResourceId}).promise())).then(x=>response.send(event,context,response.SUCCESS)).catch(error=>{console.log(error),response.send(event,context,response.SUCCESS)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMAssociationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var ssm=new aws.SSM;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;params.AssociationName=event.LogicalResourceId,delete params.ServiceToken,\"Delete\"!==event.RequestType?ssm.createAssociation(params).promise().then(x=>{console.log(x),response.send(event,context,response.SUCCESS,x.AssociationDescription,x.AssociationDescription.AssociationId)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):ssm.deleteAssociation({AssociationId:event.PhysicalResourceId,InstanceId:params.InstanceId,Name:params.Name}).promise().then(()=>response.send(event,context,response.SUCCESS)).catch(error=>{console.log(error),response.send(event,context,response.SUCCESS)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMRunLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var ssm=new aws.SSM,util=require(\"ssm\"),lambda=new aws.Lambda;function get(event){return\"Command\"===event.DocumentType?ssm.getCommandInvocation({CommandId:event.id,InstanceId:event.ResourceProperties.config.InstanceIds[0]}).promise().then(x=>x.Status):ssm.describeAutomationExecutions({Filters:[{Key:\"ExecutionId\",Values:[event.id]}]}).promise().then(x=>x.AutomationExecutionMetadataList[0].AutomationExecutionStatus)}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,event.RequestType===params.event?event.id?get(event).then(status=>{\"Success\"===status?response.send(event,context,response.SUCCESS):[\"Pending\",\"InProgress\",\"Delayed\"].includes(status)?setTimeout(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().catch(error=>{console.log(error),response.send(event,context,response.FAILED)}).then(()=>callback(null)),5e3):response.send(event,context,response.FAILED)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):util.start(event.ResourceProperties.config).then(x=>Object.assign(event,x)).then(id=>{setTimeout(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().catch(error=>{console.log(error),response.send(event,context,response.FAILED)}).then(()=>callback(null)),5e3)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMTagsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var ssm=new aws.SSM;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,\"Delete\"!==event.RequestType?ssm.addTagsToResource(params).promise().then(x=>{console.log(x),response.send(event,context,response.SUCCESS)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "VariableLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,Object.keys(params).forEach(function(key){var value=params[key];\"object\"==typeof value&&(\"toLowerCase\"===value.op?params[key]=value.value.toLowerCase():params[key]=value.value)}),response.send(event,context,response.SUCCESS,params)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "WaitDataParseLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken;try{response.send(event,context,response.SUCCESS,JSON.parse(params.Data))}catch(e){console.log(e),response.send(event,context,response.FAILED)}};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "testLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION||\"us-east-1\";var sagemaker=new aws.SageMaker,https=require(\"https\"),URL=require(\"url\");async function send(args){return sagemaker.createPresignedNotebookInstanceUrl({NotebookInstanceName:args.InstanceName}).promise().then(function(result){console.log(result);var url=URL.parse(result.AuthorizedUrl);return console.log(url),new Promise(function(res,rej){var opts={hostname:url.hostname,protocol:url.protocol,post:443,path:`${url.pathname}${url.search}`,method:\"GET\"};console.log(opts);var req=https.request(opts,x=>{opts.headers={Cookie:x.headers[\"set-cookie\"].join(\"; \")},opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()})}).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=args.path,opts.method=args.method,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>{var body=[];return console.log(opts),new Promise(function(res,rej){var req=https.request(opts,response=>{response.on(\"data\",chunk=>{body.push(chunk)}),response.on(\"end\",()=>{res(Buffer.concat(body).toString())})});args.body&&req.write(args.body),req.on(\"error\",rej),req.end()})}).then(x=>{try{return JSON.parse(x)}catch(e){return x}})}send({InstanceName:\"SageMakerNotebookInstance-nSPgAasgJ6yt\",path:\"/api/status\",method:\"GET\"}).then(x=>console.log(JSON.stringify(x,null,2)));"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSSMFullAccess",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
          {
            "Ref": "CFNPolicy"
          }
        ]
      }
    },
    "CFNPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "iam:PassRole",
                "lambda:InvokeFunction",
                "cloudformation:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "SageMakerNotebookInstance": {
      "Type": "Custom::NotebookInstance",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "NotebookLambda",
            "Arn"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "NotebookInstanceName": {
          "Ref": "AWS::StackName"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        },
        "LifecycleConfigName": {
          "Fn::GetAtt": [
            "SageMakerNotebookLifecycle",
            "NotebookInstanceLifecycleConfigName"
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroupId"
          }
        ],
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "DefaultCodeRepository": {
          "Fn::If": [
            "IfCodeRepository",
            {
              "Ref": "CodeRepository"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "AcceleratorTypes": {
          "Fn::If": [
            "IfAcceleratorType",
            [
              {
                "Ref": "AcceleratorType"
              }
            ],
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "KmsKeyId": {
          "Fn::If": [
            "IfKmsKeyId",
            {
              "Ref": "KmsKeyId"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "DirectInternetAccess": {
          "Fn::If": [
            "IfDisableDirectInternet",
            {
              "Ref": "DirectInternetAccess"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "SageMakerNotebookLifecycle": {
      "Type": "AWS::SageMaker::NotebookInstanceLifecycleConfig",
      "Properties": {
        "OnCreate": [
          {
            "Content": {
              "Fn::Base64": {
                "Fn::Sub": "#! /bin/bash\nset -ex \n\nstop amazon-ssm-agent\nyum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm amazon-efs-utils\nstop amazon-ssm-agent\n\nmkdir -p /mnt/efs\nmount -t efs ${EFS}:/ /mnt/efs\nmkdir -p /mnt/efs/${AWS::StackName}/ssm\nrm -rf /mnt/efs/${AWS::StackName}/ssm/*\n\nmount -t efs ${EFS}:/${AWS::StackName}/ssm /var/lib/amazon/ssm\n\n\ncat > /etc/amazon/ssm/seelog.xml <<- EOM\n<seelog type=\"adaptive\" mininterval=\"2000000\" maxinterval=\"100000000\" critmsgcount=\"500\" minlevel=\"info\">\n    <exceptions>\n        <exception filepattern=\"test*\" minlevel=\"error\"/>\n    </exceptions>\n    <outputs formatid=\"fmtinfo\">\n        <console formatid=\"fmtinfo\"/>\n        <rollingfile type=\"size\" filename=\"/var/log/amazon/ssm/amazon-ssm-agent.log\" maxsize=\"30000000\" maxrolls=\"5\"/>\n        <filter levels=\"error,critical\" formatid=\"fmterror\">\n            <rollingfile type=\"size\" filename=\"/var/log/amazon/ssm/errors.log\" maxsize=\"10000000\" maxrolls=\"5\"/>\n        </filter>\n        <custom name=\"cloudwatch_receiver\" formatid=\"fmtdebug\" data-log-group=\"${SSMLogGroup}\"/>\n    </outputs>    \n    <formats>\n        <format id=\"fmterror\" format=\"%Date %Time %LEVEL [%FuncShort @ %File.%Line] %Msg%n\"/>        \n        <format id=\"fmtdebug\" format=\"%Date %Time %LEVEL [%FuncShort @ %File.%Line] %Msg%n\"/>\n        <format id=\"fmtinfo\" format=\"%Date %Time %LEVEL %Msg%n\"/>    \n    </formats>\n</seelog>\nEOM\n\namazon-ssm-agent -register -y \\\n    -code \"${SSMActivation.ActivationCode}\" \\\n    -id \"${SSMActivation.ActivationId}\" \\\n    -region \"${AWS::Region}\"\n\nstart amazon-ssm-agent\n\nID=$(cat /var/lib/amazon/ssm/Vault/Store/RegistrationKey | jq '.instanceID' --raw-output)\n\n/opt/aws/bin/cfn-signal --success=true --data=$ID --id=id \"${WaitHandle}\"\n"
              }
            }
          }
        ],
        "OnStart": [
          {
            "Content": {
              "Fn::Base64": {
                "Fn::Sub": "#! /bin/bash\nset -ex \n\nstop amazon-ssm-agent\nif [ ! -d /mnt/efs ]; then\n    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm amazon-efs-utils\n    stop amazon-ssm-agent\n\n    mkdir -p /mnt/efs\n    mount -t efs ${EFS}:/ /mnt/efs\n    mkdir -p /mnt/efs/${AWS::StackName}/ssm\n    mount -t efs ${EFS}:/${AWS::StackName}/ssm /var/lib/amazon/ssm\nfi\n\nID=$(cat /var/lib/amazon/ssm/Vault/Store/RegistrationKey | jq '.instanceID' --raw-output)\ncat >> /etc/awslogs/awslogs.conf<<- EOM\n\n[/var/log/jupyter.log]\nfile = /var/log/jupyter*\nbuffer_duration = 5000\nlog_stream_name = $ID-jupyter\n/LifecycleConfigOnStartinitial_position = start_of_file\nlog_group_name = ${SSMLogGroup}\nEOM\nservice awslogs restart\n\ncat > /etc/amazon/ssm/seelog.xml <<- EOM\n<seelog type=\"adaptive\" mininterval=\"2000000\" maxinterval=\"100000000\" critmsgcount=\"500\" minlevel=\"info\">\n    <exceptions>\n        <exception filepattern=\"test*\" minlevel=\"error\"/>\n    </exceptions>\n    <outputs formatid=\"fmtinfo\">\n        <console formatid=\"fmtinfo\"/>\n        <rollingfile type=\"size\" filename=\"/var/log/amazon/ssm/amazon-ssm-agent.log\" maxsize=\"30000000\" maxrolls=\"5\"/>\n        <filter levels=\"error,critical\" formatid=\"fmterror\">\n            <rollingfile type=\"size\" filename=\"/var/log/amazon/ssm/errors.log\" maxsize=\"10000000\" maxrolls=\"5\"/>\n        </filter>\n        <custom name=\"cloudwatch_receiver\" formatid=\"fmtdebug\" data-log-group=\"${SSMLogGroup}\"/>\n    </outputs>    \n    <formats>\n        <format id=\"fmterror\" format=\"%Date %Time %LEVEL [%FuncShort @ %File.%Line] %Msg%n\"/>        \n        <format id=\"fmtdebug\" format=\"%Date %Time %LEVEL [%FuncShort @ %File.%Line] %Msg%n\"/>\n        <format id=\"fmtinfo\" format=\"%Date %Time %LEVEL %Msg%n\"/>    \n    </formats>\n</seelog>\nEOM\n\nstart amazon-ssm-agent\n\nif [ \"${GlueDevEndpoint}\" != \"EMPTY\" ]; then \n    set -ex\n    [ -e /home/ec2-user/glue_ready ] && exit 0\n     \n    mkdir /home/ec2-user/glue\n    cd /home/ec2-user/glue\n    DEV_ENDPOINT_NAME=${GlueDevEndpoint}\n    aws s3 cp s3://aws-glue-jes-prod-us-east-1-assets/sagemaker/assets/ . --recursive\n     \n    tar -xf autossh-1.4e.tgz\n    cd autossh-1.4e\n    ./configure\n    make\n    sudo make install\n    pip install pandas==0.22.0\n     \n    mkdir -p /home/ec2-user/.sparkmagic\n    cp /home/ec2-user/glue/config.json /home/ec2-user/.sparkmagic/config.json\n     \n    mkdir -p /home/ec2-user/SageMaker/Glue\\ Examples\n    mv /home/ec2-user/glue/notebook-samples/* /home/ec2-user/SageMaker/Glue\\ Examples/\n     \n    sudo cp /home/ec2-user/glue/autossh.conf /etc/init/\n    python3 /home/ec2-user/glue/bootstrap.py --devendpointname $DEV_ENDPOINT_NAME --endpoint https://glue.${AWS::Region}.amazonaws.com --notebookname $ID\n    sudo touch /home/ec2-user/glue_ready\nfi\n"
              }
            }
          }
        ]
      }
    },
    "SSMActivation": {
      "Type": "Custom::SSMActivation",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMActivationLambda",
            "Arn"
          ]
        },
        "IamRole": {
          "Ref": "SSMRole"
        },
        "DefaultInstanceName": {
          "Ref": "AWS::StackName"
        },
        "RegistrationLimit": 1
      }
    },
    "WaitConditionData": {
      "Type": "Custom::WaitDataParse",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "WaitDataParseLambda",
            "Arn"
          ]
        },
        "Data": {
          "Fn::GetAtt": [
            "WaitCondition",
            "Data"
          ]
        }
      }
    },
    "SSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ssm.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        ]
      }
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "900",
        "Count": "1"
      }
    },
    "RunStartDocument": {
      "Type": "Custom::RunDocument",
      "Condition": "IfOnStartDocument",
      "DependsOn": [
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMRunLambda",
            "Arn"
          ]
        },
        "event": "Create",
        "config": {
          "DocumentName": {
            "Ref": "OnStartDocument"
          },
          "Parameters": {
            "CodeRepository": [
              {
                "Ref": "CodeRepository"
              }
            ],
            "AcceleratorType": [
              {
                "Ref": "AcceleratorType"
              }
            ],
            "State": [
              {
                "Ref": "State"
              }
            ],
            "LambdaUtilLayer": [
              {
                "Ref": "LambdaUtilLayer"
              }
            ],
            "OnStopDocument": [
              {
                "Ref": "OnStopDocument"
              }
            ],
            "ParentStack": [
              {
                "Ref": "ParentStack"
              }
            ],
            "SSMLogGroup": [
              {
                "Ref": "SSMLogGroup"
              }
            ],
            "LogsBucket": [
              {
                "Ref": "LogsBucket"
              }
            ],
            "EFS": [
              {
                "Ref": "EFS"
              }
            ],
            "InstanceType": [
              {
                "Ref": "InstanceType"
              }
            ],
            "RoleArn": [
              {
                "Fn::GetAtt": [
                  "Role",
                  "Arn"
                ]
              }
            ],
            "KmsKeyId": [
              {
                "Ref": "KmsKeyId"
              }
            ],
            "SecurityGroupId": [
              {
                "Ref": "SecurityGroupId"
              }
            ],
            "SubnetId": [
              {
                "Ref": "SubnetId"
              }
            ],
            "DirectInternetAccess": [
              {
                "Ref": "DirectInternetAccess"
              }
            ],
            "IdleShutdown": [
              {
                "Ref": "IdleShutdown"
              }
            ],
            "GlueDevEndpoint": [
              {
                "Ref": "GlueDevEndpoint"
              }
            ],
            "InstanceId": [
              {
                "Fn::GetAtt": [
                  "WaitConditionData",
                  "id"
                ]
              }
            ],
            "StackName": [
              {
                "Ref": "AWS::StackName"
              }
            ]
          },
          "InstanceIds": [
            {
              "Fn::GetAtt": [
                "WaitConditionData",
                "id"
              ]
            }
          ]
        }
      }
    },
    "RunLifeCycleDocument": {
      "Type": "Custom::Lifecycle",
      "DependsOn": [
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LifecycleLambda",
            "Arn"
          ]
        },
        "event": "Update",
        "state": {
          "Ref": "State"
        },
        "config": {
          "DocumentName": {
            "Fn::If": [
              "TurnOn",
              {
                "Ref": "OnStartDocument"
              },
              {
                "Ref": "OnStopDocument"
              }
            ]
          },
          "Parameters": {
            "CodeRepository": [
              {
                "Ref": "CodeRepository"
              }
            ],
            "AcceleratorType": [
              {
                "Ref": "AcceleratorType"
              }
            ],
            "State": [
              {
                "Ref": "State"
              }
            ],
            "LambdaUtilLayer": [
              {
                "Ref": "LambdaUtilLayer"
              }
            ],
            "OnStopDocument": [
              {
                "Ref": "OnStopDocument"
              }
            ],
            "ParentStack": [
              {
                "Ref": "ParentStack"
              }
            ],
            "SSMLogGroup": [
              {
                "Ref": "SSMLogGroup"
              }
            ],
            "LogsBucket": [
              {
                "Ref": "LogsBucket"
              }
            ],
            "EFS": [
              {
                "Ref": "EFS"
              }
            ],
            "InstanceType": [
              {
                "Ref": "InstanceType"
              }
            ],
            "RoleArn": [
              {
                "Fn::GetAtt": [
                  "Role",
                  "Arn"
                ]
              }
            ],
            "KmsKeyId": [
              {
                "Ref": "KmsKeyId"
              }
            ],
            "SecurityGroupId": [
              {
                "Ref": "SecurityGroupId"
              }
            ],
            "SubnetId": [
              {
                "Ref": "SubnetId"
              }
            ],
            "DirectInternetAccess": [
              {
                "Ref": "DirectInternetAccess"
              }
            ],
            "IdleShutdown": [
              {
                "Ref": "IdleShutdown"
              }
            ],
            "GlueDevEndpoint": [
              {
                "Ref": "GlueDevEndpoint"
              }
            ],
            "InstanceId": [
              {
                "Fn::GetAtt": [
                  "WaitConditionData",
                  "id"
                ]
              }
            ],
            "StackName": [
              {
                "Ref": "AWS::StackName"
              }
            ]
          },
          "InstanceIds": [
            {
              "Fn::GetAtt": [
                "WaitConditionData",
                "id"
              ]
            }
          ]
        }
      }
    },
    "RunTerminateDocument": {
      "Type": "Custom::RunDocument",
      "Condition": "IfOnTerminateDocument",
      "DependsOn": [
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMRunLambda",
            "Arn"
          ]
        },
        "event": "Delete",
        "config": {
          "DocumentName": {
            "Ref": "OnTerminateDocument"
          },
          "Mode": "Auto",
          "Parameters": {
            "CodeRepository": [
              {
                "Ref": "CodeRepository"
              }
            ],
            "AcceleratorType": [
              {
                "Ref": "AcceleratorType"
              }
            ],
            "State": [
              {
                "Ref": "State"
              }
            ],
            "LambdaUtilLayer": [
              {
                "Ref": "LambdaUtilLayer"
              }
            ],
            "OnStopDocument": [
              {
                "Ref": "OnStopDocument"
              }
            ],
            "ParentStack": [
              {
                "Ref": "ParentStack"
              }
            ],
            "SSMLogGroup": [
              {
                "Ref": "SSMLogGroup"
              }
            ],
            "LogsBucket": [
              {
                "Ref": "LogsBucket"
              }
            ],
            "EFS": [
              {
                "Ref": "EFS"
              }
            ],
            "InstanceType": [
              {
                "Ref": "InstanceType"
              }
            ],
            "RoleArn": [
              {
                "Fn::GetAtt": [
                  "Role",
                  "Arn"
                ]
              }
            ],
            "KmsKeyId": [
              {
                "Ref": "KmsKeyId"
              }
            ],
            "SecurityGroupId": [
              {
                "Ref": "SecurityGroupId"
              }
            ],
            "SubnetId": [
              {
                "Ref": "SubnetId"
              }
            ],
            "DirectInternetAccess": [
              {
                "Ref": "DirectInternetAccess"
              }
            ],
            "IdleShutdown": [
              {
                "Ref": "IdleShutdown"
              }
            ],
            "GlueDevEndpoint": [
              {
                "Ref": "GlueDevEndpoint"
              }
            ],
            "InstanceId": [
              {
                "Fn::GetAtt": [
                  "WaitConditionData",
                  "id"
                ]
              }
            ],
            "StackName": [
              {
                "Ref": "AWS::StackName"
              }
            ]
          }
        }
      }
    },
    "RunCreateDocument": {
      "Type": "Custom::RunDocument",
      "Condition": "IfOnCreateDocument",
      "DependsOn": [
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMRunLambda",
            "Arn"
          ]
        },
        "event": "Create",
        "config": {
          "DocumentName": {
            "Ref": "OnCreateDocument"
          },
          "Mode": "Auto",
          "Parameters": {
            "CodeRepository": [
              {
                "Ref": "CodeRepository"
              }
            ],
            "AcceleratorType": [
              {
                "Ref": "AcceleratorType"
              }
            ],
            "State": [
              {
                "Ref": "State"
              }
            ],
            "LambdaUtilLayer": [
              {
                "Ref": "LambdaUtilLayer"
              }
            ],
            "OnStopDocument": [
              {
                "Ref": "OnStopDocument"
              }
            ],
            "ParentStack": [
              {
                "Ref": "ParentStack"
              }
            ],
            "SSMLogGroup": [
              {
                "Ref": "SSMLogGroup"
              }
            ],
            "LogsBucket": [
              {
                "Ref": "LogsBucket"
              }
            ],
            "EFS": [
              {
                "Ref": "EFS"
              }
            ],
            "InstanceType": [
              {
                "Ref": "InstanceType"
              }
            ],
            "RoleArn": [
              {
                "Fn::GetAtt": [
                  "Role",
                  "Arn"
                ]
              }
            ],
            "KmsKeyId": [
              {
                "Ref": "KmsKeyId"
              }
            ],
            "SecurityGroupId": [
              {
                "Ref": "SecurityGroupId"
              }
            ],
            "SubnetId": [
              {
                "Ref": "SubnetId"
              }
            ],
            "DirectInternetAccess": [
              {
                "Ref": "DirectInternetAccess"
              }
            ],
            "IdleShutdown": [
              {
                "Ref": "IdleShutdown"
              }
            ],
            "GlueDevEndpoint": [
              {
                "Ref": "GlueDevEndpoint"
              }
            ],
            "InstanceId": [
              {
                "Fn::GetAtt": [
                  "WaitConditionData",
                  "id"
                ]
              }
            ],
            "StackName": [
              {
                "Ref": "AWS::StackName"
              }
            ]
          }
        }
      }
    },
    "InstanceSSMTags": {
      "Type": "Custom::SSMTags",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMTagsLambda",
            "Arn"
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "WaitConditionData",
            "id"
          ]
        },
        "ResourceType": "ManagedInstance",
        "Tags": [
          {
            "Key": "Project",
            "Value": "SageGuard"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Stack",
            "Value": {
              "Ref": "ParentStack"
            }
          }
        ]
      }
    },
    "CheckIdle": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 hour)",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CloudWatchIdleLambda",
                "Arn"
              ]
            },
            "Id": "idle"
          }
        ]
      }
    },
    "CloudWatchIdleLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION||\"us-east-1\";var sagemaker=new aws.SageMaker,cf=new aws.CloudFormation,https=require(\"https\"),URL=require(\"url\");function stop(){return cf.describeStacks({StackName:stackname}).promise().then(x=>{if([\"CREATE_COMPLETE\",\"ROLLBACK_COMPLETE\",\"UPDATE_COMPLETE\",\"UPDATE_ROLLBACK_COMPLETE\"].includes(x.Stacks[0].StackStatus)){var Parameters=_.fromPairs(x.Stacks[0].Parameters.map(y=>[y.ParameterKey,y.ParameterValue]));return Parameters.State=\"OFF\",cf.updateStack({StackName:result.attributes.StackName,Capabilities:[\"CAPABILITY_NAMED_IAM\"],UsePreviousTemplate:!0,Parameters:_.toPairs(Parameters).map(y=>({ParameterKey:y[0],ParameterValue:y[1]}))}).promise().catch(error=>{if(\"No updates are to be performed.\"!==error.message)throw error})}throw new Error(`Stack currently in state ${x.Stacks[0].StackStatus}`)})}function send(args){return sagemaker.createPresignedNotebookInstanceUrl({NotebookInstanceName:args.InstanceName}).promise().then(function(result){console.log(result);var url=URL.parse(result.AuthorizedUrl);return console.log(url),new Promise(function(res,rej){var opts={hostname:url.hostname,protocol:url.protocol,post:443,path:`${url.pathname}${url.search}`,method:\"GET\"};console.log(opts);var req=https.request(opts,x=>{opts.headers={Cookie:x.headers[\"set-cookie\"].join(\"; \")},opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()})}).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=args.path,opts.method=args.method,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>{var body=[];return console.log(opts),new Promise(function(res,rej){var req=https.request(opts,response=>{response.on(\"data\",chunk=>{body.push(chunk)}),response.on(\"end\",()=>{res(Buffer.concat(body).toString())})});args.body&&req.write(args.body),req.on(\"error\",rej),req.end()})}).then(x=>{try{return JSON.parse(x)}catch(e){return x}})}exports.handler=((event,context,cb)=>{console.log(\"EVENT:\",JSON.stringify(event,null,2));var timeout=6e4*process.env.IDLETIME,now=new Date;send({InstanceName:process.env.INSTANCE,path:\"/api/kernels/\",method:\"GET\"}).then(result=>{if(console.log(JSON.stringify(result,null,2)),!result)return stop();result.filter(x=>x.kernel.connections>0).filter(x=>\"idle\"!==x.kernel.execution_state).filter(x=>{var last=new Date(x.kernel.last_activity);return now-last<timeout}).length||send({InstanceName:process.env.INSTANCE,path:\"/api/status\",method:\"GET\"}).then(x=>{var last=new Date(x.last_activity);if(now-last>timeout)return Promise.all(result.map(x=>x.path).then(path=>send({InstanceName:process.env.INSTANCE,path:`/api/contents/${path}/checkpoints`,method:\"POST\"}))).then(stop)}).then(console.log)}).catch(console.log)});"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "CloudWatchLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Environment": {
          "Variables": {
            "INSTANCE": {
              "Fn::GetAtt": [
                "SageMakerNotebookInstance",
                "NotebookInstanceName"
              ]
            },
            "IDLETIME": {
              "Ref": "IdleShutdown"
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CloudWatch"
          }
        ]
      }
    },
    "CheckIdlePermissionIdle": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CloudWatchIdleLambda",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CheckIdle",
            "Arn"
          ]
        }
      }
    },
    "CloudWatchLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        ],
        "Policies": []
      }
    },
    "Role": {
      "Type": "Custom::RoleName",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "VariableLambda",
            "Arn"
          ]
        },
        "Arn": {
          "Fn::If": [
            "IfCreateRole",
            {
              "Fn::GetAtt": [
                "DefaultNotebookRole",
                "Arn"
              ]
            },
            {
              "Ref": "RoleArn"
            }
          ]
        }
      }
    },
    "DefaultNotebookRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "IfCreateRole",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        ]
      }
    },
    "APITurnOffLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar _=require('lodash')\nvar cf=new aws.CloudFormation()\nvar sagemaker=new aws.SageMaker()\n\nvar doc=process.env.ONSTOP\nvar accessable=\"false\"\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    \n    cf.describeStacks({\n        StackName:process.env.STACKNAME\n    }).promise()\n    .then(result=>{\n        var params=_.fromPairs(result.Stacks[0].Parameters\n            .map(x=>[x.ParameterKey,x.ResolvedValue || x.ParameterValue]))\n        var tags=_.fromPairs(result.Stacks[0].Tags.map(x=>[x.Key,x.Value]))\n\n        tags.Accessable=accessable\n        outputs.StackName=stackname\n        outputs.InstanceId=outputs.InstanceID\n\n        cf.updateStack({\n            StackName:process.env.STACKNAME\n            Tags:_.toPairs(tags).map(x=>{return {\n                Key:x[0],\n                Value:[1]\n            }})\n        }).promise()\n        .then(()=>sagemaker.stopNotebookInstance({\n            NotebookInstanceName:process.env.NOTEBOOK\n        }).promise())\n        .then(x=>{\n            if(doc!==\"EMPTY\"){\n                return ssm.sendCommand({\n                    DocumentName:doc,\n                    InstanceIds:process.env.INSTANCEID,\n                    Parameters:_.mapValues(outputs,x=>[x])\n                }).promise()\n            }\n        })\n    })\n    .then(()=>callback(null))\n    .catch(e=>{\n        console.log(e)\n        callback(e)\n    })\n}\n        \n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "NOTEBOOK": {
              "Ref": "SageMakerNotebookInstance"
            },
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "INSTANCEID": {
              "Fn::GetAtt": [
                "WaitConditionData",
                "id"
              ]
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "APITurnOnLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar _=require('lodash')\nvar cf=new aws.CloudFormation()\nvar sagemaker=new aws.SageMaker()\n\nvar doc=process.env.ONSTART\nvar accessable=\"true\"\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    \n    cf.describeStacks({\n        StackName:process.env.STACKNAME\n    }).promise()\n    .then(result=>{\n        var params=_.fromPairs(result.Stacks[0].Parameters\n            .map(x=>[x.ParameterKey,x.ResolvedValue || x.ParameterValue]))\n        var tags=_.fromPairs(result.Stacks[0].Tags.map(x=>[x.Key,x.Value]))\n\n        tags.Accessable=accessable\n        outputs.StackName=stackname\n        outputs.InstanceId=outputs.InstanceID\n\n        cf.updateStack({\n            StackName:process.env.STACKNAME\n            Tags:_.toPairs(tags).map(x=>{return {\n                Key:x[0],\n                Value:[1]\n            }})\n        }).promise()\n        .then(()=>sagemaker.startNotebookInstance({\n            NotebookInstanceName:process.env.NOTEBOOK\n        }).promise())\n        .then(x=>{\n            if(doc!==\"EMPTY\"){\n                return ssm.sendCommand({\n                    DocumentName:doc,\n                    InstanceIds:process.env.INSTANCEID,\n                    Parameters:_.mapValues(outputs,x=>[x])\n                }).promise()\n            }\n        })\n    })\n    .then(()=>callback(null))\n    .catch(e=>{\n        console.log(e)\n        callback(e)\n    })\n}\n        \n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "APILambdaRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "NOTEBOOK": {
              "Ref": "SageMakerNotebookInstance"
            },
            "ONSTART": {
              "Ref": "OnStartDocument"
            },
            "ONSTOP": {
              "Ref": "OnStopDocument"
            },
            "INSTANCEID": {
              "Fn::GetAtt": [
                "WaitConditionData",
                "id"
              ]
            },
            "STACKNAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "APILambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSSMFullAccess",
          {
            "Ref": "APIPolicy"
          }
        ]
      }
    },
    "APIPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": ""
}