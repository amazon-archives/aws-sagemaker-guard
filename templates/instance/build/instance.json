{
  "Parameters": {
    "OnStartDocument": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "OnCreateDocument": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "OnTerminateDocument": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "ParentStack": {
      "Type": "String"
    },
    "SSMLogGroup": {
      "Type": "String"
    },
    "LogsBucket": {
      "Type": "String"
    },
    "EFS": {
      "Type": "String"
    },
    "InstanceType": {
      "Type": "String"
    },
    "RoleArn": {
      "Type": "String"
    },
    "KmsKeyId": {
      "Type": "String",
      "Default": "EMPTY"
    },
    "SecurityGroupId": {
      "Type": "String"
    },
    "SubnetId": {
      "Type": "String"
    },
    "DirectInternetAccess": {
      "Type": "String",
      "Default": "Enabled"
    },
    "IdleShutdown": {
      "Type": "String",
      "Default": "30"
    },
    "GlueDevEndpoint": {
      "Type": "String",
      "Default": "EMPTY"
    }
  },
  "Conditions": {
    "IfOnStartDocument": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OnStartDocument"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfOnCreateDocument": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OnCreateDocument"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfOnTerminateDocument": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OnTerminateDocument"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfKmsKeyId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "KmsKeyId"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfDirectInternetAccess": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DirectInternetAccess"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfIdleShutdown": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "IdleShutdown"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfGlueDevEndpoint": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "GlueDevEndpoint"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IfCreateRole": {
      "Fn::Equals": [
        {
          "Ref": "RoleArn"
        },
        "CREATE"
      ]
    },
    "IfSecurityGroupId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SecurityGroupId"
            },
            ""
          ]
        }
      ]
    },
    "IfDisableDirectInternet": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DirectInternetAccess"
            },
            "Enabled"
          ]
        }
      ]
    }
  },
  "Outputs": {
    "NoteBookName": {
      "Value": {
        "Fn::GetAtt": [
          "SageMakerNotebookInstance",
          "NotebookInstanceName"
        ]
      }
    },
    "InstanceID": {
      "Value": {
        "Fn::GetAtt": [
          "WaitConditionData",
          "id"
        ]
      }
    },
    "JupyterProxyCFNLambda": {
      "Value": {
        "Fn::GetAtt": [
          "JupyterApiProxyLambda",
          "Arn"
        ]
      }
    },
    "RoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "Role",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "JupyterApiProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION || 'us-east-1'\nvar sagemaker=new aws.SageMaker()\nvar https=require('https')\nvar URL=require('url')\n\nexports.send=send\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties[event.RequestType.toLowerCase()]\n    \n    if(params){\n        console.log(params)\n        send(params).then(result=>{\n            console.log(result)\n            response.send(event, context, response.SUCCESS)\n        })\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\nfunction send(args){\n    return sagemaker.createPresignedNotebookInstanceUrl({\n        NotebookInstanceName:args.InstanceName\n    }).promise()\n    .then(function(result){ \n        console.log(result)\n        var url=URL.parse(result.AuthorizedUrl)\n        console.log(url)\n        return new Promise(function(res,rej){ \n            var opts={\n                hostname:url.hostname,\n                protocol:url.protocol,\n                post:443,\n                path:`${url.pathname}${url.search}`,\n                method:'GET'\n            }\n            console.log(opts)\n            var req=https.request(opts,x=>{\n                opts.headers={\n                    Cookie:x.headers['set-cookie'].join('; ')\n                }\n                opts.path=x.headers.location\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,x=>{\n                opts.path=x.headers.location\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,x=>{\n                opts.path=args.path\n                opts.method=args.method\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        var body=[]\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,response=>{\n                response.on('data',chunk=>{\n                    body.push(chunk)\n                })\n                response.on('end',()=>{\n                    res(Buffer.concat(body).toString())\n                })\n            })\n            if(args.body){\n                req.write(args.body)\n            }\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(x=>{\n        try{\n            return JSON.parse(x)\n        }catch(e){\n            return x\n        }\n    })\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "RoleNameLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    try{\n        var params=event.ResourceProperties\n        var name=params.Arn.match(/arn:.*:.*::.*:role\\/(.*)/)[1]\n\n        response.send(event, context, response.SUCCESS,params,name)\n    }catch(e){\n        console.log(e)\n        response.send(event, context, response.FAILED,params,name)\n    }\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMActivationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar ssm=new aws.SSM()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n\n    if(event.RequestType===\"Create\"){\n        ssm.createActivation(params).promise()\n        .then(x=>{\n            console.log(x)\n            response.send(event, context, response.SUCCESS,x,x.ActivationId)\n        })\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else if(event.RequestType===\"Update\"){\n        response.send(event, context, response.SUCCESS,event.OldResourceProperties,event.PhysicalResourceId)\n    }else{\n        ssm.describeInstanceInformation({\n            Filters:[{\n                Key:\"ActivationIds\",\n                Values:[event.PhysicalResourceId]\n            }],\n        }).promise()\n        .then(x=>{\n            console.log(JSON.stringify(x,null,2))\n            return ssm.deregisterManagedInstance({\n                InstanceId:x.InstanceInformationList[0].InstanceId\n            }).promise()\n        })\n        .then(x=>{\n            console.log(JSON.stringify(x,null,2))\n            return ssm.deleteActivation({\n                ActivationId:event.PhysicalResourceId\n            }).promise()\n        })\n        .then(x=>response.send(event, context, response.SUCCESS))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.SUCCESS)\n        })\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMAssociationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar ssm=new aws.SSM()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    params.AssociationName=event.LogicalResourceId\n    delete params.ServiceToken\n\n    if(event.RequestType!==\"Delete\"){\n        ssm.createAssociation(params).promise()\n        .then(x=>{\n            console.log(x)\n            response.send(event, context, response.SUCCESS,x.AssociationDescription,x.AssociationDescription.AssociationId)\n        })\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else {\n        ssm.deleteAssociation({\n            AssociationId:event.PhysicalResourceId,\n            InstanceId:params.InstanceId,\n            Name:params.Name\n        }).promise()\n        .then(()=>response.send(event, context, response.SUCCESS))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.SUCCESS)\n        })\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMRunLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar ssm=new aws.SSM()\nvar lambda=new aws.Lambda()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n\n    if(event.RequestType===params.event){\n        if(event.id){\n            get(event)\n            .then(status=>{\n                if(status===\"Success\"){\n                    response.send(event, context, response.SUCCESS)\n                }else if([\"Pending\",\"InProgress\",\"Delayed\"].includes(status)){\n                    setTimeout(()=>lambda.invoke({\n                            FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,\n                            InvocationType:\"Event\",\n                            Payload:JSON.stringify(event)\n                        }).promise()\n                        .catch(error=>{\n                            console.log(error)\n                            response.send(event, context, response.FAILED)\n                        })\n                        .then(()=>callback(null))\n                    ,5000)\n                }else{\n                    response.send(event, context, response.FAILED)\n                }\n            })\n            .catch(error=>{\n                console.log(error)\n                response.send(event, context, response.FAILED)\n            })\n        }else{\n            start(event)\n            .then(id=>{\n                setTimeout(()=>lambda.invoke({\n                        FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,\n                        InvocationType:\"Event\",\n                        Payload:JSON.stringify(event)\n                    }).promise()\n                    .catch(error=>{\n                        console.log(error)\n                        response.send(event, context, response.FAILED)\n                    })\n                    .then(()=>callback(null))\n                ,5000)\n            })\n            .catch(error=>{\n                console.log(error)\n                response.send(event, context, response.FAILED)\n            })\n        }\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\nfunction start(event){\n    return ssm.getDocument({\n        Name:event.ResourceProperties.config.DocumentName\n    }).promise()\n    .then(x=>{\n        event.DocumentType=x.DocumentType\n        if(x.DocumentType===\"Command\"){\n            return ssm.sendCommand(event.ResourceProperties.config).promise()\n            .then(y=>event.id=y.Command.CommandId)\n        }else if(x.DocumentType===\"Automation\"){\n            return ssm.startAutomationExecution(event.ResourceProperties.config).promise()\n            .then(y=>event.id=y.AutomationExecutionId)\n        }else{\n            throw \"invalid document type\"\n        }\n    })\n}\n\nfunction get(event){\n    if(event.DocumentType===\"Command\"){\n        return ssm.getCommandInvocation({\n            CommandId:event.id,\n            InstanceId:event.ResourceProperties.config.InstanceIds[0]\n        }).promise()\n        .then(x=>x.Status)\n    }else{\n        return ssm.describeAutomationExecutions({\n            Filters:[{\n                Key:\"ExecutionId\",\n                Values:[event.id]\n            }]\n        }).promise()\n        .then(x=>x.AutomationExecutionMetadataList[0].AutomationExecutionStatus)\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMTagsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar ssm=new aws.SSM()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n\n    if(event.RequestType!==\"Delete\"){\n        ssm.addTagsToResource(params).promise()\n        .then(x=>{\n            console.log(x)\n            response.send(event, context, response.SUCCESS)\n        })\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else {\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "VariableLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n\n    Object.keys(params).forEach(function(key){\n        var value=params[key]\n        if(typeof value===\"object\"){\n            if(value.op===\"toLowerCase\"){\n                params[key]=value.value.toLowerCase()\n            }else{\n                params[key]=value.value\n            }\n        }\n    })\n\n    response.send(event, context, response.SUCCESS,params)\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "WaitDataParseLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n\n    try{\n        response.send(event, context, response.SUCCESS,JSON.parse(params.Data))\n    }catch(e){\n        console.log(e)\n        response.send(event, context, response.FAILED)\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "testLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION || 'us-east-1'\nvar sagemaker=new aws.SageMaker()\nvar https=require('https')\nvar URL=require('url')\n\nsend({\n    InstanceName:\"SageMakerNotebookInstance-nSPgAasgJ6yt\",\n    path:\"/api/status\",\n    method:\"GET\"\n}).then(x=>console.log(JSON.stringify(x,null,2)))\n\nasync function send(args){\n    return sagemaker.createPresignedNotebookInstanceUrl({\n        NotebookInstanceName:args.InstanceName\n    }).promise()\n    .then(function(result){ \n        console.log(result)\n        var url=URL.parse(result.AuthorizedUrl)\n        console.log(url)\n        return new Promise(function(res,rej){ \n            var opts={\n                hostname:url.hostname,\n                protocol:url.protocol,\n                post:443,\n                path:`${url.pathname}${url.search}`,\n                method:'GET'\n            }\n            console.log(opts)\n            var req=https.request(opts,x=>{\n                opts.headers={\n                    Cookie:x.headers['set-cookie'].join('; ')\n                }\n                opts.path=x.headers.location\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,x=>{\n                opts.path=x.headers.location\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,x=>{\n                opts.path=args.path\n                opts.method=args.method\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        var body=[]\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,response=>{\n                response.on('data',chunk=>{\n                    body.push(chunk)\n                })\n                response.on('end',()=>{\n                    res(Buffer.concat(body).toString())\n                })\n            })\n            if(args.body){\n                req.write(args.body)\n            }\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(x=>{\n        try{\n            return JSON.parse(x)\n        }catch(e){\n            return x\n        }\n    })\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SSMAutomationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com",
                  "ssm.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole",
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ]
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSSMFullAccess",
          {
            "Ref": "CFNPolicy"
          }
        ]
      }
    },
    "CFNPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "iam:PassRole",
                "lambda:InvokeFunction"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "SageMakerNotebookInstance": {
      "Type": "AWS::SageMaker::NotebookInstance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "NotebookInstanceName": {
          "Ref": "AWS::StackName"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        },
        "LifecycleConfigName": {
          "Fn::GetAtt": [
            "SageMakerNotebookLifecycle",
            "NotebookInstanceLifecycleConfigName"
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroupId"
          }
        ],
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "KmsKeyId": {
          "Fn::If": [
            "IfKmsKeyId",
            {
              "Ref": "KmsKeyId"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "DirectInternetAccess": {
          "Fn::If": [
            "IfDisableDirectInternet",
            {
              "Ref": "DirectInternetAccess"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "SageMakerNotebookLifecycle": {
      "Type": "AWS::SageMaker::NotebookInstanceLifecycleConfig",
      "Properties": {
        "OnCreate": [
          {
            "Content": {
              "Fn::Base64": {
                "Fn::Sub": "#! /bin/bash\nset -ex \n\nstop amazon-ssm-agent\nyum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm amazon-efs-utils\nstop amazon-ssm-agent\n\nmkdir -p /mnt/efs\nmount -t efs ${EFS}:/ /mnt/efs\nmkdir -p /mnt/efs/${AWS::StackName}/ssm\nrm -rf /mnt/efs/${AWS::StackName}/ssm/*\n\nmount -t efs ${EFS}:/${AWS::StackName}/ssm /var/lib/amazon/ssm\n\n\ncat > /etc/amazon/ssm/seelog.xml <<- EOM\n<seelog type=\"adaptive\" mininterval=\"2000000\" maxinterval=\"100000000\" critmsgcount=\"500\" minlevel=\"info\">\n    <exceptions>\n        <exception filepattern=\"test*\" minlevel=\"error\"/>\n    </exceptions>\n    <outputs formatid=\"fmtinfo\">\n        <console formatid=\"fmtinfo\"/>\n        <rollingfile type=\"size\" filename=\"/var/log/amazon/ssm/amazon-ssm-agent.log\" maxsize=\"30000000\" maxrolls=\"5\"/>\n        <filter levels=\"error,critical\" formatid=\"fmterror\">\n            <rollingfile type=\"size\" filename=\"/var/log/amazon/ssm/errors.log\" maxsize=\"10000000\" maxrolls=\"5\"/>\n        </filter>\n        <custom name=\"cloudwatch_receiver\" formatid=\"fmtdebug\" data-log-group=\"${SSMLogGroup}\"/>\n    </outputs>    \n    <formats>\n        <format id=\"fmterror\" format=\"%Date %Time %LEVEL [%FuncShort @ %File.%Line] %Msg%n\"/>        \n        <format id=\"fmtdebug\" format=\"%Date %Time %LEVEL [%FuncShort @ %File.%Line] %Msg%n\"/>\n        <format id=\"fmtinfo\" format=\"%Date %Time %LEVEL %Msg%n\"/>    \n    </formats>\n</seelog>\nEOM\n\namazon-ssm-agent -register -y \\\n    -code \"${SSMActivation.ActivationCode}\" \\\n    -id \"${SSMActivation.ActivationId}\" \\\n    -region \"${AWS::Region}\"\n\nstart amazon-ssm-agent\n\nID=$(cat /var/lib/amazon/ssm/Vault/Store/RegistrationKey | jq '.instanceID' --raw-output)\n\n/opt/aws/bin/cfn-signal --success=true --data=$ID --id=id \"${WaitHandle}\"\n"
              }
            }
          }
        ],
        "OnStart": [
          {
            "Content": {
              "Fn::Base64": {
                "Fn::Sub": "#! /bin/bash\nset -ex \n\nstop amazon-ssm-agent\nif [ ! -d /mnt/efs ]; then\n    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm amazon-efs-utils\n    stop amazon-ssm-agent\n\n    mkdir -p /mnt/efs\n    mount -t efs ${EFS}:/ /mnt/efs\n    mkdir -p /mnt/efs/${AWS::StackName}/ssm\n    mount -t efs ${EFS}:/${AWS::StackName}/ssm /var/lib/amazon/ssm\nfi\n\nID=$(cat /var/lib/amazon/ssm/Vault/Store/RegistrationKey | jq '.instanceID' --raw-output)\ncat >> /etc/awslogs/awslogs.conf<<- EOM\n\n[/var/log/jupyter.log]\nfile = /var/log/jupyter*\nbuffer_duration = 5000\nlog_stream_name = $ID-jupyter\n/LifecycleConfigOnStartinitial_position = start_of_file\nlog_group_name = ${SSMLogGroup}\nEOM\nservice awslogs restart\n\ncat > /etc/amazon/ssm/seelog.xml <<- EOM\n<seelog type=\"adaptive\" mininterval=\"2000000\" maxinterval=\"100000000\" critmsgcount=\"500\" minlevel=\"info\">\n    <exceptions>\n        <exception filepattern=\"test*\" minlevel=\"error\"/>\n    </exceptions>\n    <outputs formatid=\"fmtinfo\">\n        <console formatid=\"fmtinfo\"/>\n        <rollingfile type=\"size\" filename=\"/var/log/amazon/ssm/amazon-ssm-agent.log\" maxsize=\"30000000\" maxrolls=\"5\"/>\n        <filter levels=\"error,critical\" formatid=\"fmterror\">\n            <rollingfile type=\"size\" filename=\"/var/log/amazon/ssm/errors.log\" maxsize=\"10000000\" maxrolls=\"5\"/>\n        </filter>\n        <custom name=\"cloudwatch_receiver\" formatid=\"fmtdebug\" data-log-group=\"${SSMLogGroup}\"/>\n    </outputs>    \n    <formats>\n        <format id=\"fmterror\" format=\"%Date %Time %LEVEL [%FuncShort @ %File.%Line] %Msg%n\"/>        \n        <format id=\"fmtdebug\" format=\"%Date %Time %LEVEL [%FuncShort @ %File.%Line] %Msg%n\"/>\n        <format id=\"fmtinfo\" format=\"%Date %Time %LEVEL %Msg%n\"/>    \n    </formats>\n</seelog>\nEOM\n\nstart amazon-ssm-agent\n\nif [ \"${GlueDevEndpoint}\" != \"EMPTY\" ]; then \n    set -ex\n    [ -e /home/ec2-user/glue_ready ] && exit 0\n     \n    mkdir /home/ec2-user/glue\n    cd /home/ec2-user/glue\n    DEV_ENDPOINT_NAME=${GlueDevEndpoint}\n    aws s3 cp s3://aws-glue-jes-prod-us-east-1-assets/sagemaker/assets/ . --recursive\n     \n    tar -xf autossh-1.4e.tgz\n    cd autossh-1.4e\n    ./configure\n    make\n    sudo make install\n    pip install pandas==0.22.0\n     \n    mkdir -p /home/ec2-user/.sparkmagic\n    cp /home/ec2-user/glue/config.json /home/ec2-user/.sparkmagic/config.json\n     \n    mkdir -p /home/ec2-user/SageMaker/Glue\\ Examples\n    mv /home/ec2-user/glue/notebook-samples/* /home/ec2-user/SageMaker/Glue\\ Examples/\n     \n    sudo cp /home/ec2-user/glue/autossh.conf /etc/init/\n    python3 /home/ec2-user/glue/bootstrap.py --devendpointname $DEV_ENDPOINT_NAME --endpoint https://glue.${AWS::Region}.amazonaws.com --notebookname $ID\n    sudo touch /home/ec2-user/glue_ready\nfi\n"
              }
            }
          }
        ]
      }
    },
    "SSMActivation": {
      "Type": "Custom::SSMActivation",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMActivationLambda",
            "Arn"
          ]
        },
        "IamRole": {
          "Ref": "SSMRole"
        },
        "DefaultInstanceName": {
          "Ref": "AWS::StackName"
        },
        "RegistrationLimit": 1
      }
    },
    "WaitConditionData": {
      "Type": "Custom::WaitDataParse",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "WaitDataParseLambda",
            "Arn"
          ]
        },
        "Data": {
          "Fn::GetAtt": [
            "WaitCondition",
            "Data"
          ]
        }
      }
    },
    "SSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ssm.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        ]
      }
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "900",
        "Count": "1"
      }
    },
    "RunStartDocument": {
      "Type": "Custom::RunDocument",
      "Condition": "IfOnStartDocument",
      "DependsOn": [
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMRunLambda",
            "Arn"
          ]
        },
        "event": "Create",
        "config": {
          "DocumentName": {
            "Ref": "OnStartDocument"
          },
          "Parameters": {
            "ParentStack": [
              {
                "Ref": "ParentStack"
              }
            ],
            "SSMLogGroup": [
              {
                "Ref": "SSMLogGroup"
              }
            ],
            "LogsBucket": [
              {
                "Ref": "LogsBucket"
              }
            ],
            "EFS": [
              {
                "Ref": "EFS"
              }
            ],
            "InstanceType": [
              {
                "Ref": "InstanceType"
              }
            ],
            "RoleArn": [
              {
                "Fn::GetAtt": [
                  "Role",
                  "Arn"
                ]
              }
            ],
            "KmsKeyId": [
              {
                "Ref": "KmsKeyId"
              }
            ],
            "SecurityGroupId": [
              {
                "Ref": "SecurityGroupId"
              }
            ],
            "SubnetId": [
              {
                "Ref": "SubnetId"
              }
            ],
            "DirectInternetAccess": [
              {
                "Ref": "DirectInternetAccess"
              }
            ],
            "IdleShutdown": [
              {
                "Ref": "IdleShutdown"
              }
            ],
            "GlueDevEndpoint": [
              {
                "Ref": "GlueDevEndpoint"
              }
            ],
            "InstanceId": [
              {
                "Fn::GetAtt": [
                  "WaitConditionData",
                  "id"
                ]
              }
            ],
            "StackName": [
              {
                "Ref": "AWS::StackName"
              }
            ]
          },
          "InstanceIds": [
            {
              "Fn::GetAtt": [
                "WaitConditionData",
                "id"
              ]
            }
          ]
        }
      }
    },
    "RunTerminateDocument": {
      "Type": "Custom::RunDocument",
      "Condition": "IfOnTerminateDocument",
      "DependsOn": [
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMRunLambda",
            "Arn"
          ]
        },
        "event": "Delete",
        "config": {
          "DocumentName": {
            "Ref": "OnTerminateDocument"
          },
          "Mode": "Auto",
          "Parameters": {
            "ParentStack": [
              {
                "Ref": "ParentStack"
              }
            ],
            "SSMLogGroup": [
              {
                "Ref": "SSMLogGroup"
              }
            ],
            "LogsBucket": [
              {
                "Ref": "LogsBucket"
              }
            ],
            "EFS": [
              {
                "Ref": "EFS"
              }
            ],
            "InstanceType": [
              {
                "Ref": "InstanceType"
              }
            ],
            "RoleArn": [
              {
                "Fn::GetAtt": [
                  "Role",
                  "Arn"
                ]
              }
            ],
            "KmsKeyId": [
              {
                "Ref": "KmsKeyId"
              }
            ],
            "SecurityGroupId": [
              {
                "Ref": "SecurityGroupId"
              }
            ],
            "SubnetId": [
              {
                "Ref": "SubnetId"
              }
            ],
            "DirectInternetAccess": [
              {
                "Ref": "DirectInternetAccess"
              }
            ],
            "IdleShutdown": [
              {
                "Ref": "IdleShutdown"
              }
            ],
            "GlueDevEndpoint": [
              {
                "Ref": "GlueDevEndpoint"
              }
            ],
            "InstanceId": [
              {
                "Fn::GetAtt": [
                  "WaitConditionData",
                  "id"
                ]
              }
            ],
            "StackName": [
              {
                "Ref": "AWS::StackName"
              }
            ]
          }
        }
      }
    },
    "RunCreateDocument": {
      "Type": "Custom::RunDocument",
      "Condition": "IfOnCreateDocument",
      "DependsOn": [
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMRunLambda",
            "Arn"
          ]
        },
        "event": "Create",
        "config": {
          "DocumentName": {
            "Ref": "OnCreateDocument"
          },
          "Mode": "Auto",
          "Parameters": {
            "ParentStack": [
              {
                "Ref": "ParentStack"
              }
            ],
            "SSMLogGroup": [
              {
                "Ref": "SSMLogGroup"
              }
            ],
            "LogsBucket": [
              {
                "Ref": "LogsBucket"
              }
            ],
            "EFS": [
              {
                "Ref": "EFS"
              }
            ],
            "InstanceType": [
              {
                "Ref": "InstanceType"
              }
            ],
            "RoleArn": [
              {
                "Fn::GetAtt": [
                  "Role",
                  "Arn"
                ]
              }
            ],
            "KmsKeyId": [
              {
                "Ref": "KmsKeyId"
              }
            ],
            "SecurityGroupId": [
              {
                "Ref": "SecurityGroupId"
              }
            ],
            "SubnetId": [
              {
                "Ref": "SubnetId"
              }
            ],
            "DirectInternetAccess": [
              {
                "Ref": "DirectInternetAccess"
              }
            ],
            "IdleShutdown": [
              {
                "Ref": "IdleShutdown"
              }
            ],
            "GlueDevEndpoint": [
              {
                "Ref": "GlueDevEndpoint"
              }
            ],
            "InstanceId": [
              {
                "Fn::GetAtt": [
                  "WaitConditionData",
                  "id"
                ]
              }
            ],
            "StackName": [
              {
                "Ref": "AWS::StackName"
              }
            ]
          }
        }
      }
    },
    "InstanceSSMTags": {
      "Type": "Custom::SSMTags",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SSMTagsLambda",
            "Arn"
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "WaitConditionData",
            "id"
          ]
        },
        "ResourceType": "ManagedInstance",
        "Tags": [
          {
            "Key": "Project",
            "Value": "SageGuard"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Stack",
            "Value": {
              "Ref": "ParentStack"
            }
          }
        ]
      }
    },
    "CheckIdle": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 hour)",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CloudWatchIdleLambda",
                "Arn"
              ]
            },
            "Id": "idle"
          }
        ]
      }
    },
    "CloudWatchIdleLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION||\"us-east-1\";var sagemaker=new aws.SageMaker,https=require(\"https\"),URL=require(\"url\");function send(args){return sagemaker.createPresignedNotebookInstanceUrl({NotebookInstanceName:args.InstanceName}).promise().then(function(result){console.log(result);var url=URL.parse(result.AuthorizedUrl);return console.log(url),new Promise(function(res,rej){var opts={hostname:url.hostname,protocol:url.protocol,post:443,path:`${url.pathname}${url.search}`,method:\"GET\"};console.log(opts);var req=https.request(opts,x=>{opts.headers={Cookie:x.headers[\"set-cookie\"].join(\"; \")},opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()})}).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=args.path,opts.method=args.method,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>{var body=[];return console.log(opts),new Promise(function(res,rej){var req=https.request(opts,response=>{response.on(\"data\",chunk=>{body.push(chunk)}),response.on(\"end\",()=>{res(Buffer.concat(body).toString())})});args.body&&req.write(args.body),req.on(\"error\",rej),req.end()})}).then(x=>{try{return JSON.parse(x)}catch(e){return x}})}exports.handler=((event,context,cb)=>{console.log(\"EVENT:\",JSON.stringify(event,null,2));var timeout=6e4*process.env.IDLETIME,now=new Date;send({InstanceName:process.env.INSTANCE,path:\"/api/kernels/\",method:\"GET\"}).then(result=>{if(console.log(JSON.stringify(result,null,2)),!result)return sagemaker.stopNotebookInstance({NotebookInstanceName:process.env.INSTANCE}).promise();result.filter(x=>x.kernel.connections>0).filter(x=>\"idle\"!==x.kernel.execution_state).filter(x=>{var last=new Date(x.kernel.last_activity);return now-last<timeout}).length||send({InstanceName:process.env.INSTANCE,path:\"/api/status\",method:\"GET\"}).then(x=>{var last=new Date(x.last_activity);if(now-last>timeout)return Promise.all(result.map(x=>x.path).then(path=>send({InstanceName:process.env.INSTANCE,path:`/api/contents/${path}/checkpoints`,method:\"POST\"}))).then(x=>sagemaker.stopNotebookInstance({NotebookInstanceName:process.env.INSTANCE}).promise())}).then(console.log)}).catch(console.log)});"
        },
        "Handler": "index.handler",
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "CloudWatchLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Environment": {
          "Variables": {
            "INSTANCE": {
              "Fn::GetAtt": [
                "SageMakerNotebookInstance",
                "NotebookInstanceName"
              ]
            },
            "IDLETIME": {
              "Ref": "IdleShutdown"
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        },
        "Timeout": 60,
        "Tags": [
          {
            "Key": "Type",
            "Value": "CloudWatch"
          }
        ]
      }
    },
    "CheckIdlePermissionIdle": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CloudWatchIdleLambda",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CheckIdle",
            "Arn"
          ]
        }
      }
    },
    "CloudWatchLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        ],
        "Policies": []
      }
    },
    "Role": {
      "Type": "Custom::RoleName",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "VariableLambda",
            "Arn"
          ]
        },
        "Arn": {
          "Fn::If": [
            "IfCreateRole",
            {
              "Fn::GetAtt": [
                "DefaultNotebookRole",
                "Arn"
              ]
            },
            {
              "Ref": "RoleArn"
            }
          ]
        }
      }
    },
    "DefaultNotebookRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "IfCreateRole",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        ]
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": ""
}