{
  "Parameters": {
    "StackName": {
      "Type": "String"
    },
    "SSMLogGroup": {
      "Type": "String"
    },
    "LogsBucket": {
      "Type": "String"
    },
    "AssetBucket": {
      "Type": "String"
    },
    "AssetPrefix": {
      "Type": "String"
    }
  },
  "Conditions": {},
  "Outputs": {
    "AutomationRole": {
      "Value": {
        "Ref": "SSMAutomationRole"
      }
    }
  },
  "Resources": {
    "SSMAssociationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar ssm=new aws.SSM()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    params.AssociationName=event.LogicalResourceId\n    delete params.ServiceToken\n\n    if(event.RequestType!==\"Delete\"){\n        ssm.createAssociation(params).promise()\n        .then(x=>{\n            console.log(x)\n            response.send(event, context, response.SUCCESS,x.AssociationDescription,x.AssociationDescription.AssociationId)\n        })\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else {\n        ssm.deleteAssociation({\n            AssociationId:event.PhysicalResourceId,\n            InstanceId:params.InstanceId,\n            Name:params.Name\n        }).promise()\n        .then(()=>response.send(event, context, response.SUCCESS))\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.SUCCESS)\n        })\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60
      }
    },
    "SSMTagsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\nvar response = require('cfn-response')\naws.config.region=process.env.AWS_REGION\nvar ssm=new aws.SSM()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n\n    if(event.RequestType!==\"Delete\"){\n        ssm.addTagsToResource(params).promise()\n        .then(x=>{\n            console.log(x)\n            response.send(event, context, response.SUCCESS)\n        })\n        .catch(error=>{\n            console.log(error)\n            response.send(event, context, response.FAILED)\n        })\n    }else {\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60
      }
    },
    "VariableLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var params=event.ResourceProperties\n    delete params.ServiceToken\n\n    Object.keys(params).forEach(function(key){\n        var value=params[key]\n        if(typeof value===\"object\"){\n            if(value.op===\"toLowerCase\"){\n                params[key]=value.value.toLowerCase()\n            }else{\n                params[key]=value.value\n            }\n        }\n    })\n\n    response.send(event, context, response.SUCCESS,params)\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60
      }
    },
    "testLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION || 'us-east-1'\nvar sagemaker=new aws.SageMaker()\nvar https=require('https')\nvar URL=require('url')\n\nsend({\n    InstanceName:\"SageMakerNotebookInstance-nSPgAasgJ6yt\",\n    path:\"/api/status\",\n    method:\"GET\"\n}).then(x=>console.log(JSON.stringify(x,null,2)))\n\nasync function send(args){\n    return sagemaker.createPresignedNotebookInstanceUrl({\n        NotebookInstanceName:args.InstanceName\n    }).promise()\n    .then(function(result){ \n        console.log(result)\n        var url=URL.parse(result.AuthorizedUrl)\n        console.log(url)\n        return new Promise(function(res,rej){ \n            var opts={\n                hostname:url.hostname,\n                protocol:url.protocol,\n                post:443,\n                path:`${url.pathname}${url.search}`,\n                method:'GET'\n            }\n            console.log(opts)\n            var req=https.request(opts,x=>{\n                opts.headers={\n                    Cookie:x.headers['set-cookie'].join('; ')\n                }\n                opts.path=x.headers.location\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,x=>{\n                opts.path=x.headers.location\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,x=>{\n                opts.path=args.path\n                opts.method=args.method\n                res(opts)\n            })\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(opts=>{\n        var body=[]\n        console.log(opts)\n        return new Promise(function(res,rej){\n            var req=https.request(opts,response=>{\n                response.on('data',chunk=>{\n                    body.push(chunk)\n                })\n                response.on('end',()=>{\n                    res(Buffer.concat(body).toString())\n                })\n            })\n            if(args.body){\n                req.write(args.body)\n            }\n            req.on('error',rej)\n            req.end()\n        })\n    })\n    .then(x=>{\n        try{\n            return JSON.parse(x)\n        }catch(e){\n            return x\n        }\n    })\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSSMFullAccess",
          {
            "Ref": "CFNPolicy"
          }
        ]
      }
    },
    "CFNPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "iam:PassRole"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "BYODCommandDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "installs and configures the aws-samples/amazon-sagemaker-BYOD-template project on the instance.",
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "runShellScript",
              "inputs": {
                "runCommand": [
                  "#! bin/bash\nset -x\ncd /home/ec2-user/SageMaker\n\ngit clone https://github.com/aws-samples/amazon-sagemaker-BYOD-template.git\ncd amazon-sagemaker-BYOD-template\n/home/ec2-user/anaconda3/envs/JupyterSystemEnv/bin/npm install\nBUCKET=$(aws cloudformation describe-stacks --stack-name {{BucketStack}}-bucket --query \"Stacks[0].Outputs[0].OutputValue\")\n\ncat > ./config.js <<- EOM\n    var out={\n        assetBucket:$BUCKET,\n        assetPrefix:\"BYOD\",\n        namespace:\"dev\",\n        profile:\"default\",\n        region:\"{{Region}}\",\n        parameters:{}\n    }\n    out.parameters.AssetBucket=out.assetBucket\n    out.parameters.AssetPrefix=out.assetPrefix\n\n    module.exports=out\nEOM\n"
                ]
              }
            }
          ],
          "parameters": {
            "BucketStack": {
              "type": "String"
            },
            "Region": {
              "type": "String"
            }
          }
        },
        "Tags": [
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "BYOD"
          }
        ],
        "DocumentType": "Command"
      }
    },
    "GlueCommandDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "install SageMaker BYOD project template",
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "runShellScript",
              "inputs": {
                "runCommand": [
                  "#! /bin/bash\n \nset -ex\n[ -e /home/ec2-user/glue_ready ] && exit 0\n \nmkdir /home/ec2-user/glue\ncd /home/ec2-user/glue\nDEV_ENDPOINT_NAME={{GlueDevEndpoint}}\naws s3 cp s3://aws-glue-jes-prod-us-east-1-assets/sagemaker/assets/ . --recursive\n \ntar -xf autossh-1.4e.tgz\ncd autossh-1.4e\n./configure\nmake\nsudo make install\npip install pandas==0.22.0\n \nmkdir -p /home/ec2-user/.sparkmagic\ncp /home/ec2-user/glue/config.json /home/ec2-user/.sparkmagic/config.json\n \nmkdir -p /home/ec2-user/SageMaker/Glue\\ Examples\nmv /home/ec2-user/glue/notebook-samples/* /home/ec2-user/SageMaker/Glue\\ Examples/\n \nsudo cp /home/ec2-user/glue/autossh.conf /etc/init/\npython3 /home/ec2-user/glue/bootstrap.py --devendpointname $DEV_ENDPOINT_NAME --endpoint https://glue.{{Region}}.amazonaws.com --notebookname notebook\nsudo touch /home/ec2-user/glue_ready\n"
                ]
              }
            }
          ],
          "parameters": {
            "GlueDevEndpoint": {
              "type": "String"
            },
            "Region": {
              "type": "String"
            }
          }
        },
        "Tags": [
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "Glue"
          }
        ],
        "DocumentType": "Command"
      }
    },
    "HelloWorldCommandDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "Example Document to be used with SageGaurd",
          "parameters": {
            "VolumeSize": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "CodeRepository": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "AcceleratorType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "State": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LambdaUtilLayer": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "ParentStack": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SSMLogGroup": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LogsBucket": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EFS": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "InstanceType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "RoleArn": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "KmsKeyId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SecurityGroupId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SubnetId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "DirectInternetAccess": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "IdleShutdown": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "GlueDevEndpoint": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "VPC": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EnableRoot": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "Event": {
              "type": "String"
            },
            "StackName": {
              "type": "String"
            },
            "InstanceId": {
              "type": "String"
            },
            "SSMRoleArn": {
              "type": "String"
            }
          },
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "example",
              "inputs": {
                "runCommand": [
                  "echo 'hello'"
                ]
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "OnCreateDelete",
            "Value": "true"
          },
          {
            "Key": "OnStartStop",
            "Value": "true"
          },
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "HelloWorld"
          }
        ],
        "DocumentType": "Command"
      }
    },
    "InstallCommandDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "Install conda requirements.txt on a SageMaker notebook instance",
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "runShellScript",
              "inputs": {
                "runCommand": [
                  "#! /bin/bash\n\nset -ex\nCONDA=/home/ec2-user/anaconda3/bin/conda\nTMP=/home/ec2-user/tmp\n\n\ncat >> $TMP<<- EOM\n{{ requirements }}\nEOM\n\n$CONDA install --yes --name JupyterSystemEnv --file $TMP\nrm $TMP\n"
                ]
              }
            }
          ],
          "parameters": {
            "requirements": {
              "type": "String",
              "default": "Enabled",
              "displayType": "textarea",
              "description": "The contents of a requirements.txt file to be installed on the SageMaker notebook instance"
            }
          }
        },
        "Tags": [
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "Install"
          }
        ],
        "DocumentType": "Command"
      }
    },
    "InstallSSHKeyCommandDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "Installs an SSH key on a SageMaker notebook instance. The key does not survive an instance reboot and must be reinstalled on each start up",
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "runShellScript",
              "inputs": {
                "runCommand": [
                  "#! /bin/bash\nset -ex \n\necho \"{{PublicKey}}\" >> /home/ec2-user/.ssh/authorized_keys\nchmod 640 /home/ec2-user/.ssh/authorized_keys\n"
                ]
              }
            }
          ],
          "parameters": {
            "PublicKey": {
              "type": "String",
              "default": "Enabled",
              "displayType": "textarea",
              "description": "The contents of the SSH public key to be installed on the instance"
            }
          }
        },
        "Tags": [
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "InstallSSHKey"
          }
        ],
        "DocumentType": "Command"
      }
    },
    "SageBuildCommandDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "installs and configures the aws-sagemaker-build project to provide a CI/CD environment for SageMaker",
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "runShellScript",
              "inputs": {
                "runCommand": [
                  "#! bin/bash\nset -x\ncd /home/ec2-user/SageMaker\n\nmkdir -p SageBuild\ncd SageBuild\naws s3 cp s3://${BUCKET}/${PREFIX}/notebooks.zip .\nunzip notebooks.zip \nrm notebooks.zip\necho '{\"Region\":\"{{Region}}\",\"StackName\":\"{{StackName}}\"}' > config.json\n\nfor notebook in $(find . | grep .ipynb); do\n    jupyter trust $notebook\ndone\n\ncd ..\nchown \"ec2-user\" SageBuild --recursive \n"
                ]
              }
            }
          ],
          "parameters": {
            "Bucket": {
              "type": "String"
            },
            "Region": {
              "type": "String"
            },
            "Prefix": {
              "type": "String"
            },
            "StackName": {
              "type": "String"
            }
          }
        },
        "Tags": [
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "SageBuild"
          }
        ],
        "DocumentType": "Command"
      }
    },
    "UninstallCommandDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "Uninstall conda requirements.txt on a SageMaker notebook instance",
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "runShellScript",
              "inputs": {
                "runCommand": [
                  "#! /bin/bash\n\nset -ex\nCONDA=/home/ec2-user/anaconda3/bin/conda\nTMP=/home/ec2-user/tmp\n\ncat >> $TMP<<- EOM\n{{ requirements }}\nEOM\n\n$CONDA uninstall --yes --name JupyterSystemEnv $( cat $TMP | tr -d '\\n' )\nrm $TMP\n"
                ]
              }
            }
          ],
          "parameters": {
            "requirements": {
              "type": "String",
              "default": "Enabled",
              "displayType": "textarea",
              "description": "The contents of a requirements.txt file to be uninstalled on the SageMaker notebook instance"
            }
          }
        },
        "Tags": [
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "Uninstall"
          }
        ],
        "DocumentType": "Command"
      }
    },
    "BYODAutomationDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "0.3",
          "description": {
            "Fn::Sub": "OnCreate Document. Installs and configures the aws-samples/amazon-sagemaker-BYOD-template project on the instance."
          },
          "assumeRole": {
            "Fn::GetAtt": [
              "SSMAutomationRole",
              "Arn"
            ]
          },
          "parameters": {
            "VolumeSize": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "CodeRepository": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "AcceleratorType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "State": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LambdaUtilLayer": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "ParentStack": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SSMLogGroup": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LogsBucket": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EFS": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "InstanceType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "RoleArn": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "KmsKeyId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SecurityGroupId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SubnetId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "DirectInternetAccess": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "IdleShutdown": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "GlueDevEndpoint": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "VPC": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EnableRoot": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "Event": {
              "type": "String"
            },
            "StackName": {
              "type": "String"
            },
            "InstanceId": {
              "type": "String"
            },
            "SSMRoleArn": {
              "type": "String"
            }
          },
          "mainSteps": [
            {
              "name": "choice",
              "action": "aws:branch",
              "inputs": {
                "Choices": [
                  {
                    "Variable": "{{Event}}",
                    "StringEquals": "Create",
                    "NextStep": "create"
                  },
                  {
                    "Variable": "{{Event}}",
                    "StringEquals": "Delete",
                    "NextStep": "delete"
                  }
                ]
              }
            },
            {
              "action": "aws:createStack",
              "nextStep": "install",
              "name": "create",
              "inputs": {
                "StackName": "{{StackName}}-bucket",
                "TemplateURL": {
                  "Fn::Sub": "https://s3.amazonaws.com/${AssetBucket}/${AssetPrefix}/bucket.json"
                },
                "Capabilities": [
                  "CAPABILITY_IAM"
                ],
                "Parameters": [
                  {
                    "ParameterValue": "{{RoleArn}}",
                    "ParameterKey": "RoleArn"
                  },
                  {
                    "ParameterValue": "{{StackName}}",
                    "ParameterKey": "NotebookInstance"
                  }
                ]
              }
            },
            {
              "action": "aws:runCommand",
              "name": "install",
              "isEnd": true,
              "inputs": {
                "DocumentName": {
                  "Ref": "BYODCommandDocument"
                },
                "InstanceIds": [
                  "{{InstanceId}}"
                ],
                "OutputS3BucketName": "{{LogsBucket}}",
                "OutputS3KeyPrefix": "BYOD",
                "Parameters": {
                  "BucketStack": "{{StackName}}-bucket",
                  "Region": "{{global:REGION}}"
                }
              }
            },
            {
              "action": "aws:deleteStack",
              "name": "delete",
              "isEnd": true,
              "inputs": {
                "StackName": "{{StackName}}-bucket"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "OnCreateDelete",
            "Value": "true"
          },
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "BYOD"
          }
        ],
        "DocumentType": "Automation"
      }
    },
    "BucketAutomationDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "0.3",
          "description": {
            "Fn::Sub": "Creates an S3 bucket and add permissions fo the notebook to access the document."
          },
          "assumeRole": {
            "Fn::GetAtt": [
              "SSMAutomationRole",
              "Arn"
            ]
          },
          "parameters": {
            "VolumeSize": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "CodeRepository": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "AcceleratorType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "State": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LambdaUtilLayer": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "ParentStack": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SSMLogGroup": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LogsBucket": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EFS": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "InstanceType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "RoleArn": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "KmsKeyId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SecurityGroupId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SubnetId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "DirectInternetAccess": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "IdleShutdown": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "GlueDevEndpoint": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "VPC": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EnableRoot": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "Event": {
              "type": "String"
            },
            "StackName": {
              "type": "String"
            },
            "InstanceId": {
              "type": "String"
            },
            "SSMRoleArn": {
              "type": "String"
            }
          },
          "mainSteps": [
            {
              "name": "choice",
              "action": "aws:branch",
              "inputs": {
                "Choices": [
                  {
                    "Variable": "{{Event}}",
                    "StringEquals": "Create",
                    "NextStep": "create"
                  },
                  {
                    "Variable": "{{Event}}",
                    "StringEquals": "Delete",
                    "NextStep": "delete"
                  }
                ]
              }
            },
            {
              "action": "aws:createStack",
              "name": "create",
              "inputs": {
                "StackName": "{{StackName}}-bucket",
                "TemplateURL": {
                  "Fn::Sub": "https://s3.amazonaws.com/${AssetBucket}/${AssetPrefix}/bucket.json"
                },
                "Capabilities": [
                  "CAPABILITY_IAM"
                ],
                "Parameters": [
                  {
                    "ParameterValue": "{{RoleArn}}",
                    "ParameterKey": "RoleArn"
                  },
                  {
                    "ParameterValue": "{{StackName}}",
                    "ParameterKey": "NotebookInstance"
                  }
                ]
              }
            },
            {
              "action": "aws:deleteStack",
              "name": "delete",
              "isEnd": true,
              "inputs": {
                "StackName": "{{StackName}}-bucket"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "OnCreateDelete",
            "Value": "true"
          },
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "Bucket"
          }
        ],
        "DocumentType": "Automation"
      }
    },
    "GlueAutomationDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "0.3",
          "description": {
            "Fn::Sub": "Creates a Glue Development Endpoint and configures the instance to be able to use it."
          },
          "assumeRole": {
            "Fn::GetAtt": [
              "SSMAutomationRole",
              "Arn"
            ]
          },
          "parameters": {
            "VolumeSize": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "CodeRepository": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "AcceleratorType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "State": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LambdaUtilLayer": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "ParentStack": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SSMLogGroup": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LogsBucket": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EFS": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "InstanceType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "RoleArn": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "KmsKeyId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SecurityGroupId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SubnetId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "DirectInternetAccess": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "IdleShutdown": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "GlueDevEndpoint": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "VPC": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EnableRoot": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "Event": {
              "type": "String"
            },
            "StackName": {
              "type": "String"
            },
            "InstanceId": {
              "type": "String"
            },
            "SSMRoleArn": {
              "type": "String"
            }
          },
          "mainSteps": [
            {
              "name": "choice",
              "action": "aws:branch",
              "inputs": {
                "Choices": [
                  {
                    "Variable": "{{Event}}",
                    "StringEquals": "Create",
                    "NextStep": "create"
                  },
                  {
                    "Variable": "{{Event}}",
                    "StringEquals": "Delete",
                    "NextStep": "delete"
                  }
                ]
              }
            },
            {
              "action": "aws:createStack",
              "name": "create",
              "nextStep": "install",
              "inputs": {
                "StackName": "{{StackName}}-glue-endpoint",
                "TemplateURL": {
                  "Fn::Sub": "https://s3.amazonaws.com/${AssetBucket}/${AssetPrefix}/glue_dev_endpoint.json"
                },
                "Capabilities": [
                  "CAPABILITY_IAM"
                ],
                "Parameters": [
                  {
                    "ParameterValue": "{{SSMRoleArn}}",
                    "ParameterKey": "SSMRoleArn"
                  },
                  {
                    "ParameterValue": "{{RoleArn}}",
                    "ParameterKey": "RoleArn"
                  },
                  {
                    "ParameterValue": "{{LambdaUtilLayer}}",
                    "ParameterKey": "LambdaUtilLayer"
                  },
                  {
                    "ParameterValue": "{{SecurityGroupId}}",
                    "ParameterKey": "SecurityGroupId"
                  },
                  {
                    "ParameterValue": "{{SubnetId}}",
                    "ParameterKey": "SubnetId"
                  },
                  {
                    "ParameterValue": "{{VPC}}",
                    "ParameterKey": "VPC"
                  }
                ]
              }
            },
            {
              "action": "aws:runCommand",
              "name": "install",
              "isEnd": true,
              "inputs": {
                "DocumentName": {
                  "Ref": "GlueCommandDocument"
                },
                "InstanceIds": [
                  "{{InstanceId}}"
                ],
                "OutputS3BucketName": "{{LogsBucket}}",
                "OutputS3KeyPrefix": "CreateGlue",
                "Parameters": {
                  "Region": "{{global:REGION}}",
                  "GlueDevEndpoint": "{{StackName}}-glue-endpoint"
                }
              }
            },
            {
              "action": "aws:deleteStack",
              "isEnd": true,
              "name": "delete",
              "inputs": {
                "StackName": "{{StackName}}-glue-endpoint"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "OnStartStop",
            "Value": "true"
          },
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "Glue"
          }
        ],
        "DocumentType": "Automation"
      }
    },
    "SageBuildAutomationDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "0.3",
          "description": {
            "Fn::Sub": "OnCreate Document. Installs and configures the aws-sagemaker-build project on the instance."
          },
          "assumeRole": {
            "Fn::GetAtt": [
              "SSMAutomationRole",
              "Arn"
            ]
          },
          "parameters": {
            "VolumeSize": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "CodeRepository": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "AcceleratorType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "State": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LambdaUtilLayer": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "ParentStack": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SSMLogGroup": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "LogsBucket": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EFS": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "InstanceType": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "RoleArn": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "KmsKeyId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SecurityGroupId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "SubnetId": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "DirectInternetAccess": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "IdleShutdown": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "GlueDevEndpoint": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "VPC": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "EnableRoot": {
              "type": "String",
              "description": "Example",
              "default": "Hello World"
            },
            "Event": {
              "type": "String"
            },
            "StackName": {
              "type": "String"
            },
            "InstanceId": {
              "type": "String"
            },
            "SSMRoleArn": {
              "type": "String"
            }
          },
          "mainSteps": [
            {
              "name": "choice",
              "action": "aws:branch",
              "inputs": {
                "Choices": [
                  {
                    "Variable": "{{Event}}",
                    "StringEquals": "Create",
                    "NextStep": "create"
                  },
                  {
                    "Variable": "{{Event}}",
                    "StringEquals": "Delete",
                    "NextStep": "delete"
                  }
                ]
              }
            },
            {
              "action": "aws:createStack",
              "name": "create",
              "nextStep": "describeStack",
              "inputs": {
                "StackName": "{{StackName}}-bucket",
                "TemplateURL": {
                  "Fn::Sub": "https://s3.amazonaws.com/${AssetBucket}/${AssetPrefix}/bucket.json"
                },
                "Capabilities": [
                  "CAPABILITY_IAM"
                ],
                "Parameters": [
                  {
                    "ParameterValue": "{{RoleArn}}",
                    "ParameterKey": "RoleArn"
                  },
                  {
                    "ParameterValue": "{{StackName}}",
                    "ParameterKey": "NotebookInstance"
                  }
                ]
              }
            },
            {
              "name": "describeStack",
              "action": "aws:executeAwsApi",
              "nextStep": "install",
              "inputs": {
                "Service": "cloudformation",
                "Api": "DescribeStacks",
                "StackName": "{{StackName}}-bucket"
              },
              "outputs": [
                {
                  "Name": "Bucket",
                  "Type": "String",
                  "Selector": "$.Stacks[0].Outputs[0].OutputValue"
                }
              ]
            },
            {
              "action": "aws:runCommand",
              "name": "install",
              "nextStep": "startSageBuild",
              "inputs": {
                "DocumentName": {
                  "Ref": "SageBuildCommandDocument"
                },
                "InstanceIds": [
                  "{{InstanceId}}"
                ],
                "OutputS3BucketName": "{{LogsBucket}}",
                "OutputS3KeyPrefix": "SageBuild",
                "Parameters": {
                  "Bucket": "aws-machine-learning-blog",
                  "Region": "{{global:REGION}}",
                  "Prefix": "artifacts/sagebuild/v1",
                  "StackName": "{{StackName}}-SageBuild"
                }
              }
            },
            {
              "action": "aws:createStack",
              "name": "startSageBuild",
              "isEnd": true,
              "inputs": {
                "StackName": "{{StackName}}-SageBuild",
                "TemplateURL": "https://s3.amazonaws.com/aws-machine-learning-blog/artifacts/sagebuild/v1/template.json",
                "Capabilities": [
                  "CAPABILITY_IAM"
                ],
                "Parameters": [
                  {
                    "ParameterValue": "NONE",
                    "ParameterKey": "NoteBookInstanceType"
                  },
                  {
                    "ParameterValue": "{{describeStack.Bucket}}",
                    "ParameterKey": "ExternalDataBucket"
                  },
                  {
                    "ParameterValue": "{{describeStack.Bucket}}",
                    "ParameterKey": "AssetBucket"
                  },
                  {
                    "ParameterValue": "SageBuild",
                    "ParameterKey": "AssetPrefix"
                  }
                ]
              }
            },
            {
              "action": "aws:deleteStack",
              "name": "delete",
              "nextStep": "deleteSageBuild",
              "inputs": {
                "StackName": "{{StackName}}-bucket"
              }
            },
            {
              "action": "aws:deleteStack",
              "name": "deleteSageBuild",
              "isEnd": true,
              "inputs": {
                "StackName": "{{StackName}}-SageBuild"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "OnCreateDelete",
            "Value": "true"
          },
          {
            "Key": "StackName",
            "Value": {
              "Ref": "StackName"
            }
          },
          {
            "Key": "DisplayName",
            "Value": "SageBuild"
          }
        ],
        "DocumentType": "Automation"
      }
    },
    "InstanceInventory": {
      "Type": "AWS::SSM::Association",
      "Properties": {
        "Name": {
          "Ref": "InventoryDocument"
        },
        "Targets": [
          {
            "Key": "tag:Stack",
            "Values": [
              {
                "Ref": "StackName"
              }
            ]
          }
        ],
        "ScheduleExpression": "cron(0 0 0/12 ? * * *)",
        "Parameters": {
          "files": [
            "[{\"Path\":\"/home/ec2-user/SageMaker\",\"Pattern\":[\"*.ipynb\"],\"Recursive\":true}]"
          ]
        },
        "OutputLocation": {
          "S3Location": {
            "OutputS3BucketName": {
              "Ref": "LogsBucket"
            },
            "OutputS3KeyPrefix": "ssm/logs/inventory"
          }
        }
      }
    },
    "DataSync": {
      "Type": "AWS::SSM::ResourceDataSync",
      "Properties": {
        "BucketName": {
          "Ref": "LogsBucket"
        },
        "BucketPrefix": "ssm/inventory",
        "SyncFormat": "JsonSerDe",
        "BucketRegion": {
          "Ref": "AWS::Region"
        },
        "SyncName": {
          "Ref": "StackName"
        }
      }
    },
    "InventoryDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "Run first a shell script & then inventory plugin.",
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "runShellScript",
              "inputs": {
                "runCommand": [
                  "#! /bin/bash\n\nCONDA=/home/ec2-user/anaconda3/bin/conda\nNODE=/home/ec2-user/anaconda3/envs/JupyterSystemEnv/bin/node\nTMP=/home/ec2-user/tmp\n\nA=$($CONDA list --json | jq  '.' --raw-output -c)\n\nCONTENT=$($NODE - << EndOfMessage\nconsole.log(JSON.stringify(JSON.parse('$A')\n    .map(x=>{\n        var keys=Object.keys(x)\n        var out={}\n        keys.map(y=>{\n            if(typeof x[y] ==='string'){\n                out[y]=x[y]\n            }else{\n                out[y]=JSON.stringify(x[y])\n            }\n        })\n        return out\n    })))\nEndOfMessage\n)\n\necho \"{\\\"SchemaVersion\\\" : \\\"1.0\\\", \\\"TypeName\\\": \\\"Custom:CondaPackages\\\", \\\"Content\\\":$CONTENT}\" > $TMP\n\nset -ex\n\nID=$(cat /var/lib/amazon/ssm/Vault/Store/RegistrationKey | jq '.instanceID' --raw-output)\nmv $TMP /var/lib/amazon/ssm/$ID/inventory/custom/conda.json\n\n"
                ]
              }
            },
            {
              "action": "aws:softwareInventory",
              "name": "collectSoftwareInventoryItems",
              "inputs": {
                "applications": "Enabled",
                "awsComponents": "Enabled",
                "networkConfig": "Enabled",
                "customInventory": "Enabled",
                "files": "{{ files }}",
                "instanceDetailedInformation": "Enabled"
              }
            }
          ],
          "parameters": {
            "applications": {
              "type": "String",
              "default": "Enabled",
              "description": "(Optional) Collect data for installed applications.",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "awsComponents": {
              "type": "String",
              "default": "Enabled",
              "description": "(Optional) Collect data for AWSComponents like amazon-ssm-agent.",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "networkConfig": {
              "type": "String",
              "default": "Enabled",
              "description": "(Optional) Collect data for Network configurations.",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "files": {
              "type": "String",
              "default": "[{\"Path\":\"/home/ec2-user/SageMaker\",\"Pattern\":[\"*.py\",\"*.ipynb\"],\"Recursive\":false}]",
              "description": "<p>(Optional, requires SSMAgent version 2.2.64.0 and above)<br/><br/>Linux example:<br/><em>[{\"Path\":\"/usr/bin\", \"Pattern\":[\"aws*\", \"*ssm*\"],\"Recursive\":false},{\"Path\":\"/var/log\", \"Pattern\":[\"amazon*.*\"], \"Recursive\":true, \"DirScanLimit\":1000}]<br/></em><br/>Windows example:<br/><em>[{\"Path\":\"%PROGRAMFILES%\", \"Pattern\":[\"*.exe\"],\"Recursive\":true}]</em><br/><br/>Learn More: http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-about.html#sysman-inventory-file-and-registry  </p>",
              "displayType": "textarea"
            }
          }
        },
        "DocumentType": "Command"
      }
    },
    "DataCatalog": {
      "Type": "AWS::Glue::Database",
      "Properties": {
        "DatabaseInput": {},
        "CatalogId": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "CrawlerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "glue.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        ],
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "InventoryCrawler": {
      "Type": "AWS::Glue::Crawler",
      "Properties": {
        "Role": {
          "Fn::GetAtt": [
            "CrawlerRole",
            "Arn"
          ]
        },
        "DatabaseName": {
          "Ref": "DataCatalog"
        },
        "Targets": {
          "S3Targets": [
            {
              "Path": {
                "Fn::Sub": "${LogsBucket}/data"
              }
            }
          ]
        }
      }
    },
    "SSMAutomationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com",
                  "ssm.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole",
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ],
        "Policies": []
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": ""
}