{
  "Parameters": {
    "LambdaUtilLayer": {
      "Type": "String"
    },
    "SecurityGroupId": {
      "Type": "String"
    },
    "SubnetId": {
      "Type": "String"
    },
    "VPC": {
      "Type": "String"
    },
    "RoleArn": {
      "Type": "String"
    },
    "SSMRoleArn": {
      "Type": "String"
    }
  },
  "Conditions": {},
  "Outputs": {
    "RoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "EndpointRole",
          "Arn"
        ]
      }
    },
    "EndpointName": {
      "Value": {
        "Ref": "GlueDevEndpoint"
      }
    }
  },
  "Resources": {
    "DescribeENILambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,ec2=new aws.EC2;function recurse(event,callback,context){event.wait=!0,setTimeout(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().catch(error=>{console.log(error),response.send(event,context,response.FAILED)}).then(()=>callback(null)),5e3)}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;try{\"Delete\"===event.RequestType?ec2.describeNetworkInterfaces({Filters:[{Name:\"group-id\",Values:[params.SecurityGroup]}]}).promise().then(x=>{console.log(JSON.stringify(x,null,2)),0===x.NetworkInterfaces.length?response.send(event,context,response.SUCCESS,params):recurse(event,callback,context)}).catch(e=>{console.log(e),response.send(event,context,response.FAILED,params)}):response.send(event,context,response.SUCCESS,params)}catch(e){console.log(e),response.send(event,context,response.FAILED,params)}};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60
      }
    },
    "RoleNameLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));try{var params=event.ResourceProperties,name=params.Arn.match(/arn:.*:.*::.*:role\\/(.*)/)[1];response.send(event,context,response.SUCCESS,params,name)}catch(e){console.log(e),response.send(event,context,response.FAILED,params,name)}};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60
      }
    },
    "VariableLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,Object.keys(params).forEach(function(key){var value=params[key];\"object\"==typeof value&&(\"toLowerCase\"===value.op?params[key]=value.value.toLowerCase():params[key]=value.value)}),response.send(event,context,response.SUCCESS,params)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Layers": [
          {
            "Ref": "LambdaUtilLayer"
          }
        ],
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
          "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
        ]
      }
    },
    "GlueDevEndpoint": {
      "Type": "AWS::Glue::DevEndpoint",
      "DependsOn": [
        "EndpointSecurityGroupIngress",
        "EndpointRole",
        "ENIWait"
      ],
      "Properties": {
        "EndpointName": {
          "Ref": "AWS::StackName"
        },
        "NumberOfNodes": "2",
        "RoleArn": {
          "Fn::GetAtt": [
            "EndpointRole",
            "Arn"
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "EndpointSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "PublicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChYeu0Uo5PWm/Wd+Sm3yxJFL3UpwHxEyBVnk09uYMfDYCrGgqYCHQHH+5bfyHDoarS6XcUTEl8EKYr4kMLN3QYK7sWJB6/8OhxuteVJ82nGLef7aElKlR50J73MJrcOClBvW0NYPmxdvli4BeYt5QKlkOL/APnqx1QME7nMqJ4eV//z1pIZ7KOoSGt/NYOEHJA+I1Tv0ffDXQPWnYJ8Jp9zSHNbiMy+G+FO6/WKx6yQdFdJV5HD+QDdoqxCXLtrIZ+6DoFf5DuDDa6fofPlFpgFSrrPiqig/K9BItPcXmWGGMVTSpd6+ZUYJ72es/+7BbMGca44XPf0FjKlPfALKnh your_email@example.com\n"
      }
    },
    "EndpointSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Allow Access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "SecurityGroupId"
            },
            "FromPort": 0,
            "ToPort": 65535
          }
        ]
      }
    },
    "ENIWait": {
      "Type": "Custom::Variable",
      "DependsOn": [
        "EndpointSecurityGroup",
        "EndpointRole"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DescribeENILambda",
            "Arn"
          ]
        },
        "SecurityGroup": {
          "Ref": "EndpointSecurityGroup"
        }
      }
    },
    "EndpointSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": [
        "EndpointSecurityGroup"
      ],
      "Properties": {
        "GroupId": {
          "Ref": "EndpointSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "EndpointSecurityGroup"
        },
        "FromPort": 0,
        "ToPort": 65535
      }
    },
    "EndpointRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "glue.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        ]
      }
    },
    "RoleName": {
      "Type": "Custom::RoleName",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "RoleNameLambda",
            "Arn"
          ]
        },
        "Arn": {
          "Ref": "SSMRoleArn"
        }
      }
    },
    "AccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "glue:GetDevEndpoint",
                "glue:UpdateDevEndpoint"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:devEndpoint/${GlueDevEndpoint}"
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RoleName"
          }
        ]
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": ""
}